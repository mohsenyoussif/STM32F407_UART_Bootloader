
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003018  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080031a0  080031a0  000131a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031dc  080031dc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080031dc  080031dc  000131dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031e4  080031e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031e4  080031e4  000131e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031e8  080031e8  000131e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  080031f8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  080031f8  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000892e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001997  00000000  00000000  0002896a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000828  00000000  00000000  0002a308  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000768  00000000  00000000  0002ab30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020e8d  00000000  00000000  0002b298  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000749c  00000000  00000000  0004c125  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c3103  00000000  00000000  000535c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001166c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fe0  00000000  00000000  00116740  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003188 	.word	0x08003188

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003188 	.word	0x08003188

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <uint8VerifyCRC>:
 *         - CRC_FAIL    (if calculated CRC does not match)
 */


static uint8_t uint8VerifyCRC(uint8_t* copy_puint8dataArr,uint8_t copy_uint8Length,uint32_t copy_uint32HostCRC)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	460b      	mov	r3, r1
 80004d2:	607a      	str	r2, [r7, #4]
 80004d4:	72fb      	strb	r3, [r7, #11]

	/*
	 * Step 1: Compute the CRC for the given data.
	 * The function iterates through each byte of the data array, accumulating the CRC value.
	 */
	for(Local_uint8Iterator = 0 ; Local_uint8Iterator < copy_uint8Length; Local_uint8Iterator++)
 80004d6:	2300      	movs	r3, #0
 80004d8:	77fb      	strb	r3, [r7, #31]
 80004da:	e00f      	b.n	80004fc <uint8VerifyCRC+0x34>
	{
		/* Load the current byte from the data array into a temporary variable */
		Local_uint32Temp = copy_puint8dataArr[Local_uint8Iterator];
 80004dc:	7ffb      	ldrb	r3, [r7, #31]
 80004de:	68fa      	ldr	r2, [r7, #12]
 80004e0:	4413      	add	r3, r2
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	617b      	str	r3, [r7, #20]

		/* Accumulate the CRC for the current byte */
		Local_uint8AccCRC = HAL_CRC_Accumulate(&hcrc, &Local_uint32Temp, 1);
 80004e6:	f107 0314 	add.w	r3, r7, #20
 80004ea:	2201      	movs	r2, #1
 80004ec:	4619      	mov	r1, r3
 80004ee:	480e      	ldr	r0, [pc, #56]	; (8000528 <uint8VerifyCRC+0x60>)
 80004f0:	f001 f889 	bl	8001606 <HAL_CRC_Accumulate>
 80004f4:	61b8      	str	r0, [r7, #24]
	for(Local_uint8Iterator = 0 ; Local_uint8Iterator < copy_uint8Length; Local_uint8Iterator++)
 80004f6:	7ffb      	ldrb	r3, [r7, #31]
 80004f8:	3301      	adds	r3, #1
 80004fa:	77fb      	strb	r3, [r7, #31]
 80004fc:	7ffa      	ldrb	r2, [r7, #31]
 80004fe:	7afb      	ldrb	r3, [r7, #11]
 8000500:	429a      	cmp	r2, r3
 8000502:	d3eb      	bcc.n	80004dc <uint8VerifyCRC+0x14>

	/*
	 * Step 2: Reset the CRC calculation unit.
	 * This ensures that every time this function is called, it starts calculation from the beginning.
	 */
	__HAL_CRC_RESET_HANDLE_STATE(&hcrc);
 8000504:	4b08      	ldr	r3, [pc, #32]	; (8000528 <uint8VerifyCRC+0x60>)
 8000506:	2200      	movs	r2, #0
 8000508:	715a      	strb	r2, [r3, #5]

	/*
	 * Step 3: Compare the computed CRC with the expected CRC from the Host.
	 * If they match, the CRC check is successful; otherwise, it fails.
	 */
	if(Local_uint8AccCRC == copy_uint32HostCRC)
 800050a:	69ba      	ldr	r2, [r7, #24]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	429a      	cmp	r2, r3
 8000510:	d102      	bne.n	8000518 <uint8VerifyCRC+0x50>
	{
		Local_uint8CRCStatus = CRC_SUCCESS ;   /* CRC verification passed */
 8000512:	2301      	movs	r3, #1
 8000514:	77bb      	strb	r3, [r7, #30]
 8000516:	e001      	b.n	800051c <uint8VerifyCRC+0x54>
	}else
	{
		Local_uint8CRCStatus = CRC_FAIL ;     /* CRC verification failed */
 8000518:	2300      	movs	r3, #0
 800051a:	77bb      	strb	r3, [r7, #30]
	}

	/* Step 4: Return the verification result (CRC_SUCCESS or CRC_FAIL) */
	return Local_uint8CRCStatus  ;
 800051c:	7fbb      	ldrb	r3, [r7, #30]
}
 800051e:	4618      	mov	r0, r3
 8000520:	3720      	adds	r7, #32
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000028 	.word	0x20000028

0800052c <voidSendACK>:
 *     [1] -> Length of the response data that follows
 * - It then transmits this buffer over UART to notify the Host.
 */

static void voidSendACK(uint8_t copy_uint8ReplyeLngth)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
	/* Buffer to hold the ACK response and the length of the following response */
	uint8_t Local_uint8AckBuffer[2] = {BL_ACK, copy_uint8ReplyeLngth};
 8000536:	23a5      	movs	r3, #165	; 0xa5
 8000538:	733b      	strb	r3, [r7, #12]
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	737b      	strb	r3, [r7, #13]

	/* Send ACK response via UART */
	HAL_UART_Transmit(&huart2, Local_uint8AckBuffer, 2, HAL_MAX_DELAY);
 800053e:	f107 010c 	add.w	r1, r7, #12
 8000542:	f04f 33ff 	mov.w	r3, #4294967295
 8000546:	2202      	movs	r2, #2
 8000548:	4803      	ldr	r0, [pc, #12]	; (8000558 <voidSendACK+0x2c>)
 800054a:	f002 f8ec 	bl	8002726 <HAL_UART_Transmit>
}
 800054e:	bf00      	nop
 8000550:	3710      	adds	r7, #16
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	20000030 	.word	0x20000030

0800055c <voidSendNACK>:
 * - The function prepares a single-byte buffer containing BL_NACK.
 * - It then transmits this NACK response over UART to notify the Host of the failure.
 */

static void voidSendNACK(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
	/* Buffer holding the NACK response */
	uint8_t Local_uint8NAck = BL_NACK;
 8000562:	237f      	movs	r3, #127	; 0x7f
 8000564:	71fb      	strb	r3, [r7, #7]

	/* Send NACK response via UART */
	HAL_UART_Transmit(&huart2, &Local_uint8NAck, 1, HAL_MAX_DELAY);
 8000566:	1df9      	adds	r1, r7, #7
 8000568:	f04f 33ff 	mov.w	r3, #4294967295
 800056c:	2201      	movs	r2, #1
 800056e:	4803      	ldr	r0, [pc, #12]	; (800057c <voidSendNACK+0x20>)
 8000570:	f002 f8d9 	bl	8002726 <HAL_UART_Transmit>
}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000030 	.word	0x20000030

08000580 <uint8_ValidateAddress>:
 * @return uint8_t : Address validation status:
 *         - `VALID_ADDRESS` if the address is within Flash or SRAM.
 *         - `NOT_VALID_ADDRESS` otherwise.
 */
static uint8_t uint8_ValidateAddress(uint32_t Copy_uint32Address)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]

	     /* Initialize status as NOT valid */
		uint8_t Local_uint8AddressStatus = NOT_VALID_ADDRESS;
 8000588:	2300      	movs	r3, #0
 800058a:	73fb      	strb	r3, [r7, #15]

		/* Check if the address falls within Flash memory */
	     if((Copy_uint32Address >= FLASH_BASE) && (Copy_uint32Address<= FLASH_END))
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000592:	d306      	bcc.n	80005a2 <uint8_ValidateAddress+0x22>
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800059a:	d202      	bcs.n	80005a2 <uint8_ValidateAddress+0x22>
	     {
	    	 Local_uint8AddressStatus = VALID_ADDRESS ;
 800059c:	2301      	movs	r3, #1
 800059e:	73fb      	strb	r3, [r7, #15]
 80005a0:	e00c      	b.n	80005bc <uint8_ValidateAddress+0x3c>
	     }
	     /* Check if the address falls within SRAM memory */
	     else if((Copy_uint32Address >= SRAM1_BASE) && (Copy_uint32Address <= (SRAM1_BASE + (128*1024))))
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80005a8:	d306      	bcc.n	80005b8 <uint8_ValidateAddress+0x38>
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4a07      	ldr	r2, [pc, #28]	; (80005cc <uint8_ValidateAddress+0x4c>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d802      	bhi.n	80005b8 <uint8_ValidateAddress+0x38>
	     {
	    	 Local_uint8AddressStatus = VALID_ADDRESS ;
 80005b2:	2301      	movs	r3, #1
 80005b4:	73fb      	strb	r3, [r7, #15]
 80005b6:	e001      	b.n	80005bc <uint8_ValidateAddress+0x3c>
	     }
	     else
	     {
	    	 Local_uint8AddressStatus = NOT_VALID_ADDRESS ;
 80005b8:	2300      	movs	r3, #0
 80005ba:	73fb      	strb	r3, [r7, #15]
	     }

return Local_uint8AddressStatus ;
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20020000 	.word	0x20020000

080005d0 <uint8_tExecute_FlashErase>:
 * @return uint8_t : Flash erase operation status:
 *         - `HAL_OK`    -> Erase successful.
 *         - `HAL_ERROR` -> Invalid parameters or erase failure.
 */
static uint8_t uint8_tExecute_FlashErase(uint8_t Copy_uint8SectorNumber, uint8_t Copy_uint8NumberofSectors)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	; 0x28
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	460a      	mov	r2, r1
 80005da:	71fb      	strb	r3, [r7, #7]
 80005dc:	4613      	mov	r3, r2
 80005de:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef Local_ErrorStatus = HAL_OK; // Variable to store function execution status
 80005e0:	2300      	movs	r3, #0
 80005e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Validate input parameters */
    if ((Copy_uint8NumberofSectors > NUMBER_OF_SECTORS) && (Copy_uint8SectorNumber != MASS_ERASE))
 80005e6:	79bb      	ldrb	r3, [r7, #6]
 80005e8:	2b0c      	cmp	r3, #12
 80005ea:	d906      	bls.n	80005fa <uint8_tExecute_FlashErase+0x2a>
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	2bff      	cmp	r3, #255	; 0xff
 80005f0:	d003      	beq.n	80005fa <uint8_tExecute_FlashErase+0x2a>
    {
        /* Error: Number of sectors requested exceeds available flash sectors */
        Local_ErrorStatus = HAL_ERROR;
 80005f2:	2301      	movs	r3, #1
 80005f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80005f8:	e035      	b.n	8000666 <uint8_tExecute_FlashErase+0x96>
    }
    else if ((Copy_uint8SectorNumber > (NUMBER_OF_SECTORS - 1)) && (Copy_uint8SectorNumber != MASS_ERASE))
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	2b0b      	cmp	r3, #11
 80005fe:	d906      	bls.n	800060e <uint8_tExecute_FlashErase+0x3e>
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	2bff      	cmp	r3, #255	; 0xff
 8000604:	d003      	beq.n	800060e <uint8_tExecute_FlashErase+0x3e>
    {
        /* Error: Invalid starting sector number */
        Local_ErrorStatus = HAL_ERROR;
 8000606:	2301      	movs	r3, #1
 8000608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800060c:	e02b      	b.n	8000666 <uint8_tExecute_FlashErase+0x96>
        /* Define structure to configure erase operation */
        FLASH_EraseInitTypeDef Local_MyErase;
        uint32_t Local_uint32SectorError; // Variable to store sector erase errors

        /* Check if a mass erase is required */
        if (Copy_uint8SectorNumber == MASS_ERASE)
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	2bff      	cmp	r3, #255	; 0xff
 8000612:	d102      	bne.n	800061a <uint8_tExecute_FlashErase+0x4a>
        {
            /* Mass Erase: Erases all sectors in the flash memory */
            Local_MyErase.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8000614:	2301      	movs	r3, #1
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	e012      	b.n	8000640 <uint8_tExecute_FlashErase+0x70>
        }
        else
        {
            /* Sector Erase: Erase a specific number of sectors starting from Copy_uint8SectorNumber */
            uint8_t Local_uint8RemainingSectors = NUMBER_OF_SECTORS - Copy_uint8SectorNumber;
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	f1c3 030c 	rsb	r3, r3, #12
 8000620:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

            /* Ensure the number of sectors does not exceed the available range */
            if (Copy_uint8NumberofSectors > Local_uint8RemainingSectors)
 8000624:	79ba      	ldrb	r2, [r7, #6]
 8000626:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800062a:	429a      	cmp	r2, r3
 800062c:	d902      	bls.n	8000634 <uint8_tExecute_FlashErase+0x64>
            {
                Copy_uint8NumberofSectors = Local_uint8RemainingSectors;
 800062e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000632:	71bb      	strb	r3, [r7, #6]
            }

            /* Configure sector erase parameters */
            Local_MyErase.TypeErase = FLASH_TYPEERASE_SECTORS;  // Select sector erase mode
 8000634:	2300      	movs	r3, #0
 8000636:	613b      	str	r3, [r7, #16]
            Local_MyErase.NbSectors = Copy_uint8NumberofSectors; // Number of sectors to erase
 8000638:	79bb      	ldrb	r3, [r7, #6]
 800063a:	61fb      	str	r3, [r7, #28]
            Local_MyErase.Sector = Copy_uint8SectorNumber;       // Start sector for erase
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	61bb      	str	r3, [r7, #24]
        }

        /* Set additional erase parameters */
        Local_MyErase.VoltageRange = FLASH_VOLTAGE_RANGE_3; // Voltage range (2.7V to 3.6V)
 8000640:	2302      	movs	r3, #2
 8000642:	623b      	str	r3, [r7, #32]
        Local_MyErase.Banks = FLASH_BANK_1;                 // Select flash bank to erase
 8000644:	2301      	movs	r3, #1
 8000646:	617b      	str	r3, [r7, #20]

        /* Unlock the flash memory for write/erase operations */
        HAL_FLASH_Unlock();
 8000648:	f001 f808 	bl	800165c <HAL_FLASH_Unlock>

        /* Perform the erase operation */
        Local_ErrorStatus = HAL_FLASHEx_Erase(&Local_MyErase, &Local_uint32SectorError);
 800064c:	f107 020c 	add.w	r2, r7, #12
 8000650:	f107 0310 	add.w	r3, r7, #16
 8000654:	4611      	mov	r1, r2
 8000656:	4618      	mov	r0, r3
 8000658:	f001 f8c8 	bl	80017ec <HAL_FLASHEx_Erase>
 800065c:	4603      	mov	r3, r0
 800065e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* Lock the flash memory to prevent accidental modifications */
        HAL_FLASH_Lock();
 8000662:	f001 f81d 	bl	80016a0 <HAL_FLASH_Lock>
    }

    /* Return the erase operation status */
    return Local_ErrorStatus;
 8000666:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800066a:	4618      	mov	r0, r3
 800066c:	3728      	adds	r7, #40	; 0x28
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <BL_voidHandleGetVERCmd>:
 * Return:
 * -------
 * @return None.
 */
void BL_voidHandleGetVERCmd(uint8_t* copy_puint8CmdPacket)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	uint8_t Local_uint8BLVersion, Local_uint8CRCStatus;
	uint8_t Local_uint8CmdLen; // this variable to extract command length
	uint32_t Local_uint32HostCRC; // this variable to extract host CRC

	/* Extract command length (first byte includes "Length to follow") */
	Local_uint8CmdLen = copy_puint8CmdPacket[0] + 1;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	3301      	adds	r3, #1
 8000682:	75fb      	strb	r3, [r7, #23]

	/* Extract CRC from the last 4 bytes of the received packet */
	Local_uint32HostCRC = *((uint32_t*)(copy_puint8CmdPacket + Local_uint8CmdLen - 4));
 8000684:	7dfb      	ldrb	r3, [r7, #23]
 8000686:	3b04      	subs	r3, #4
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	4413      	add	r3, r2
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	613b      	str	r3, [r7, #16]

	/* Verify CRC of the received command */
	Local_uint8CRCStatus = uint8VerifyCRC(copy_puint8CmdPacket, (Local_uint8CmdLen - 4), Local_uint32HostCRC);
 8000690:	7dfb      	ldrb	r3, [r7, #23]
 8000692:	3b04      	subs	r3, #4
 8000694:	b2db      	uxtb	r3, r3
 8000696:	693a      	ldr	r2, [r7, #16]
 8000698:	4619      	mov	r1, r3
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	f7ff ff14 	bl	80004c8 <uint8VerifyCRC>
 80006a0:	4603      	mov	r3, r0
 80006a2:	73fb      	strb	r3, [r7, #15]

	if (Local_uint8CRCStatus == CRC_SUCCESS)
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d10d      	bne.n	80006c6 <BL_voidHandleGetVERCmd+0x52>
	{
		/* Send ACK with the length of the response payload (1 byte for version) */
		voidSendACK(1u);
 80006aa:	2001      	movs	r0, #1
 80006ac:	f7ff ff3e 	bl	800052c <voidSendACK>

		/* Send the bootloader version */
		Local_uint8BLVersion = BL_VERSION;
 80006b0:	2301      	movs	r3, #1
 80006b2:	73bb      	strb	r3, [r7, #14]
		HAL_UART_Transmit(&huart2, &Local_uint8BLVersion, 1, HAL_MAX_DELAY);
 80006b4:	f107 010e 	add.w	r1, r7, #14
 80006b8:	f04f 33ff 	mov.w	r3, #4294967295
 80006bc:	2201      	movs	r2, #1
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <BL_voidHandleGetVERCmd+0x60>)
 80006c0:	f002 f831 	bl	8002726 <HAL_UART_Transmit>
	else
	{
		/* Send NACK if CRC verification fails */
		voidSendNACK();
	}
}
 80006c4:	e001      	b.n	80006ca <BL_voidHandleGetVERCmd+0x56>
		voidSendNACK();
 80006c6:	f7ff ff49 	bl	800055c <voidSendNACK>
}
 80006ca:	bf00      	nop
 80006cc:	3718      	adds	r7, #24
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000030 	.word	0x20000030

080006d8 <BL_voidHandleGetHelpCmd>:
 *      - Sends an ACK with the size of the supported commands list.
 *      - Transmits the list of supported commands via UART.
 * 5. If CRC verification fails, sends a NACK to the host.
 */
void BL_voidHandleGetHelpCmd(uint8_t* copy_puint8CmdPacket)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	uint8_t Local_uint8CRCStatus;
	uint8_t Local_uint8CmdLen; // this variable to extract command length
	uint32_t Local_uint32HostCRC; // this variable to extract host CRC

	/* Extract command length (first byte includes "Length to follow") */
	Local_uint8CmdLen = copy_puint8CmdPacket[0] + 1;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	3301      	adds	r3, #1
 80006e6:	77fb      	strb	r3, [r7, #31]

	/* Extract CRC from the last 4 bytes of the received packet */
	Local_uint32HostCRC = *((uint32_t*)(copy_puint8CmdPacket + Local_uint8CmdLen - 4));
 80006e8:	7ffb      	ldrb	r3, [r7, #31]
 80006ea:	3b04      	subs	r3, #4
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	4413      	add	r3, r2
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	61bb      	str	r3, [r7, #24]

	/* Verify CRC of the received command */
	Local_uint8CRCStatus = uint8VerifyCRC(copy_puint8CmdPacket, (Local_uint8CmdLen - 4), Local_uint32HostCRC);
 80006f4:	7ffb      	ldrb	r3, [r7, #31]
 80006f6:	3b04      	subs	r3, #4
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	69ba      	ldr	r2, [r7, #24]
 80006fc:	4619      	mov	r1, r3
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f7ff fee2 	bl	80004c8 <uint8VerifyCRC>
 8000704:	4603      	mov	r3, r0
 8000706:	75fb      	strb	r3, [r7, #23]

	if (Local_uint8CRCStatus == CRC_SUCCESS)
 8000708:	7dfb      	ldrb	r3, [r7, #23]
 800070a:	2b01      	cmp	r3, #1
 800070c:	d111      	bne.n	8000732 <BL_voidHandleGetHelpCmd+0x5a>
	{

		/* Define an array containing all supported bootloader commands */
		uint8_t Local_uint8BLSupportedCommands []=
 800070e:	4a0c      	ldr	r2, [pc, #48]	; (8000740 <BL_voidHandleGetHelpCmd+0x68>)
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	ca07      	ldmia	r2, {r0, r1, r2}
 8000716:	e883 0007 	stmia.w	r3, {r0, r1, r2}
								BL_OTP_READ               ,
								BL_DIS_WR_PROTECT
		};

		/* Send an ACK with the size of the supported commands list */
		voidSendACK(sizeof(Local_uint8BLSupportedCommands));
 800071a:	200c      	movs	r0, #12
 800071c:	f7ff ff06 	bl	800052c <voidSendACK>

		/* Transmit the list of supported commands to the host over UART */
		HAL_UART_Transmit(&huart2, Local_uint8BLSupportedCommands, sizeof(Local_uint8BLSupportedCommands), HAL_MAX_DELAY);
 8000720:	f107 0108 	add.w	r1, r7, #8
 8000724:	f04f 33ff 	mov.w	r3, #4294967295
 8000728:	220c      	movs	r2, #12
 800072a:	4806      	ldr	r0, [pc, #24]	; (8000744 <BL_voidHandleGetHelpCmd+0x6c>)
 800072c:	f001 fffb 	bl	8002726 <HAL_UART_Transmit>
	else
	{
		/* Send NACK if CRC verification fails */
		voidSendNACK();
	}
}
 8000730:	e001      	b.n	8000736 <BL_voidHandleGetHelpCmd+0x5e>
		voidSendNACK();
 8000732:	f7ff ff13 	bl	800055c <voidSendNACK>
}
 8000736:	bf00      	nop
 8000738:	3720      	adds	r7, #32
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	080031a0 	.word	0x080031a0
 8000744:	20000030 	.word	0x20000030

08000748 <BL_voidHandleGetCIDcmd>:
 *    - Sends an ACK response to indicate success.
 *    - Transmits the Chip ID (2 bytes) to the host.
 * 5. If CRC verification fails, it sends a NACK response.
 */
void BL_voidHandleGetCIDcmd(uint8_t* copy_puint8CmdPacket)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	uint8_t Local_uint8CmdLen; // this variable to extract command length
	uint16_t Local_uint16CID ; // Variable to hold the extracted Chip ID
	uint32_t Local_uint32HostCRC; // this variable to extract host CRC

	/* Step 1: Extract command length (first byte includes "Length to follow") */
	Local_uint8CmdLen = copy_puint8CmdPacket[0] + 1;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	3301      	adds	r3, #1
 8000756:	75fb      	strb	r3, [r7, #23]

	/* Step 2: Extract CRC from the last 4 bytes of the received packet */
	Local_uint32HostCRC = *((uint32_t*)(copy_puint8CmdPacket + Local_uint8CmdLen - 4));
 8000758:	7dfb      	ldrb	r3, [r7, #23]
 800075a:	3b04      	subs	r3, #4
 800075c:	687a      	ldr	r2, [r7, #4]
 800075e:	4413      	add	r3, r2
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	613b      	str	r3, [r7, #16]

	/* Step 3: Verify CRC of the received command */
	Local_uint8CRCStatus = uint8VerifyCRC(copy_puint8CmdPacket, (Local_uint8CmdLen - 4), Local_uint32HostCRC);
 8000764:	7dfb      	ldrb	r3, [r7, #23]
 8000766:	3b04      	subs	r3, #4
 8000768:	b2db      	uxtb	r3, r3
 800076a:	693a      	ldr	r2, [r7, #16]
 800076c:	4619      	mov	r1, r3
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff feaa 	bl	80004c8 <uint8VerifyCRC>
 8000774:	4603      	mov	r3, r0
 8000776:	73fb      	strb	r3, [r7, #15]

	if (Local_uint8CRCStatus == CRC_SUCCESS)
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d112      	bne.n	80007a4 <BL_voidHandleGetCIDcmd+0x5c>
	{
		/* Step 4: Retrieve Chip ID (12-bit value from the DBGMCU_IDCODE register) */
		Local_uint16CID = DBGMCU_IDCODE_REGISTER & 0x0fff;
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <BL_voidHandleGetCIDcmd+0x68>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	b29b      	uxth	r3, r3
 8000784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000788:	b29b      	uxth	r3, r3
 800078a:	81bb      	strh	r3, [r7, #12]

		/* Step 5: Send ACK with the response length (2 bytes for Chip ID) */
		voidSendACK(2u);
 800078c:	2002      	movs	r0, #2
 800078e:	f7ff fecd 	bl	800052c <voidSendACK>

		/* Step 6: Transmit the Chip ID to the host */
		HAL_UART_Transmit(&huart2, (uint8_t*)&Local_uint16CID , 2 , HAL_MAX_DELAY);
 8000792:	f107 010c 	add.w	r1, r7, #12
 8000796:	f04f 33ff 	mov.w	r3, #4294967295
 800079a:	2202      	movs	r2, #2
 800079c:	4805      	ldr	r0, [pc, #20]	; (80007b4 <BL_voidHandleGetCIDcmd+0x6c>)
 800079e:	f001 ffc2 	bl	8002726 <HAL_UART_Transmit>
	else
	{
		/* Send NACK if CRC verification fails */
		voidSendNACK();
	}
}
 80007a2:	e001      	b.n	80007a8 <BL_voidHandleGetCIDcmd+0x60>
		voidSendNACK();
 80007a4:	f7ff feda 	bl	800055c <voidSendNACK>
}
 80007a8:	bf00      	nop
 80007aa:	3718      	adds	r7, #24
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	e0042000 	.word	0xe0042000
 80007b4:	20000030 	.word	0x20000030

080007b8 <BL_voidHandleGetRDPStatusCmd>:
 *      - Reads the RDP status from the option bytes at `RDP_USER_OPTION_WORD`.
 *      - Sends an ACK followed by the 1-byte RDP status.
 * 5. If the CRC check fails, sends a NACK.
 */
void BL_voidHandleGetRDPStatusCmd(uint8_t* copy_puint8CmdPacket)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	uint8_t Local_uint8CRCStatus;
	uint8_t Local_uint8CmdLen; // this variable to extract command length
	uint32_t Local_uint32HostCRC; // this variable to extract host CRC

	/* Extract command length (first byte includes "Length to follow") */
	Local_uint8CmdLen = copy_puint8CmdPacket[0] + 1;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	3301      	adds	r3, #1
 80007c6:	75fb      	strb	r3, [r7, #23]

	/* Extract CRC from the last 4 bytes of the received packet */
	Local_uint32HostCRC = *((uint32_t*)(copy_puint8CmdPacket + Local_uint8CmdLen - 4));
 80007c8:	7dfb      	ldrb	r3, [r7, #23]
 80007ca:	3b04      	subs	r3, #4
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	4413      	add	r3, r2
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	613b      	str	r3, [r7, #16]

	/* Verify CRC of the received command */
	Local_uint8CRCStatus = uint8VerifyCRC(copy_puint8CmdPacket, (Local_uint8CmdLen - 4), Local_uint32HostCRC);
 80007d4:	7dfb      	ldrb	r3, [r7, #23]
 80007d6:	3b04      	subs	r3, #4
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	693a      	ldr	r2, [r7, #16]
 80007dc:	4619      	mov	r1, r3
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f7ff fe72 	bl	80004c8 <uint8VerifyCRC>
 80007e4:	4603      	mov	r3, r0
 80007e6:	73fb      	strb	r3, [r7, #15]

	if (Local_uint8CRCStatus == CRC_SUCCESS)
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d110      	bne.n	8000810 <BL_voidHandleGetRDPStatusCmd+0x58>
	{

		/* Extract RDP status from option bytes (stored in the upper byte) */
		uint8_t Local_uint8RDPStatus = (uint8_t)((RDP_USER_OPTION_WORD >> 8) & 0xff);
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <BL_voidHandleGetRDPStatusCmd+0x64>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	0a1b      	lsrs	r3, r3, #8
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	73bb      	strb	r3, [r7, #14]

		/* Send ACK with the length of the response payload (1 byte for version) */
		voidSendACK(1u);
 80007f8:	2001      	movs	r0, #1
 80007fa:	f7ff fe97 	bl	800052c <voidSendACK>

		/* Transmit the RDP status back to the host */
		HAL_UART_Transmit(&huart2, (uint8_t*)&Local_uint8RDPStatus , 1 , HAL_MAX_DELAY);
 80007fe:	f107 010e 	add.w	r1, r7, #14
 8000802:	f04f 33ff 	mov.w	r3, #4294967295
 8000806:	2201      	movs	r2, #1
 8000808:	4805      	ldr	r0, [pc, #20]	; (8000820 <BL_voidHandleGetRDPStatusCmd+0x68>)
 800080a:	f001 ff8c 	bl	8002726 <HAL_UART_Transmit>
	else
	{
		/* Send NACK if CRC verification fails */
		voidSendNACK();
	}
}
 800080e:	e001      	b.n	8000814 <BL_voidHandleGetRDPStatusCmd+0x5c>
		voidSendNACK();
 8000810:	f7ff fea4 	bl	800055c <voidSendNACK>
}
 8000814:	bf00      	nop
 8000816:	3718      	adds	r7, #24
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	1fffc000 	.word	0x1fffc000
 8000820:	20000030 	.word	0x20000030

08000824 <BL_voidHandleGoToAddressCmd>:
 *    - If invalid:
 *        - Sends a NACK response to indicate failure.
 * 4. If the CRC check fails, a NACK is sent immediately.
 */
void BL_voidHandleGoToAddressCmd(uint8_t* copy_puint8CmdPacket)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
    uint8_t Local_uint8CRCStatus;
    uint8_t Local_uint8CmdLen;       /* Variable to store command length */
    uint32_t Local_uint32HostCRC;    /* Variable to store CRC received from Host */

    /* Extract command length (first byte includes "Length to follow") */
    Local_uint8CmdLen = copy_puint8CmdPacket[0] + 1;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	3301      	adds	r3, #1
 8000832:	77fb      	strb	r3, [r7, #31]

    /* Extract CRC from the last 4 bytes of the received packet */
    Local_uint32HostCRC = *((uint32_t*)(copy_puint8CmdPacket + Local_uint8CmdLen - 4));
 8000834:	7ffb      	ldrb	r3, [r7, #31]
 8000836:	3b04      	subs	r3, #4
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	4413      	add	r3, r2
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	61bb      	str	r3, [r7, #24]

    /* Verify CRC of the received command */
    Local_uint8CRCStatus = uint8VerifyCRC(copy_puint8CmdPacket, (Local_uint8CmdLen - 4), Local_uint32HostCRC);
 8000840:	7ffb      	ldrb	r3, [r7, #31]
 8000842:	3b04      	subs	r3, #4
 8000844:	b2db      	uxtb	r3, r3
 8000846:	69ba      	ldr	r2, [r7, #24]
 8000848:	4619      	mov	r1, r3
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f7ff fe3c 	bl	80004c8 <uint8VerifyCRC>
 8000850:	4603      	mov	r3, r0
 8000852:	75fb      	strb	r3, [r7, #23]

    if (Local_uint8CRCStatus == CRC_SUCCESS)
 8000854:	7dfb      	ldrb	r3, [r7, #23]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d12a      	bne.n	80008b0 <BL_voidHandleGoToAddressCmd+0x8c>
    {
        uint32_t Local_uint32Address;
        uint8_t Local_uint8AddressValidStatus;

        /* Send ACK with the length of the response payload (1 byte for address validation result) */
        voidSendACK(1u);
 800085a:	2001      	movs	r0, #1
 800085c:	f7ff fe66 	bl	800052c <voidSendACK>

        /* Extract the target address from the command packet */
        Local_uint32Address = *((uint32_t*)&copy_puint8CmdPacket[2]);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000866:	613b      	str	r3, [r7, #16]

        /* Validate if the extracted address falls within Flash or SRAM */
        Local_uint8AddressValidStatus = uint8_ValidateAddress(Local_uint32Address);
 8000868:	6938      	ldr	r0, [r7, #16]
 800086a:	f7ff fe89 	bl	8000580 <uint8_ValidateAddress>
 800086e:	4603      	mov	r3, r0
 8000870:	72fb      	strb	r3, [r7, #11]

        if (Local_uint8AddressValidStatus == VALID_ADDRESS)
 8000872:	7afb      	ldrb	r3, [r7, #11]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d112      	bne.n	800089e <BL_voidHandleGoToAddressCmd+0x7a>
        {
            /* Notify the Host that the address is valid */
            HAL_UART_Transmit(&huart2, &Local_uint8AddressValidStatus, 1, HAL_MAX_DELAY);
 8000878:	f107 010b 	add.w	r1, r7, #11
 800087c:	f04f 33ff 	mov.w	r3, #4294967295
 8000880:	2201      	movs	r2, #1
 8000882:	480e      	ldr	r0, [pc, #56]	; (80008bc <BL_voidHandleGoToAddressCmd+0x98>)
 8000884:	f001 ff4f 	bl	8002726 <HAL_UART_Transmit>
             * Jump to the specified address:
             * - Define a pointer to function.
             * - Increment address by 1 to ensure Thumb mode (T-bit = 1).
             * - Cast address to function pointer and execute.
             */
            void (*Local_pvFuncPtr)(void) = NULL;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
            Local_uint32Address|=0x1;  /* Set T-bit for ARM Cortex-M Thumb mode */
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	613b      	str	r3, [r7, #16]
            Local_pvFuncPtr = (void*)Local_uint32Address;
 8000894:	693b      	ldr	r3, [r7, #16]
 8000896:	60fb      	str	r3, [r7, #12]
            Local_pvFuncPtr();  /* Jump to the specified address */
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	4798      	blx	r3
    else
    {
        /* Send NACK if CRC verification fails */
        voidSendNACK();
    }
}
 800089c:	e00a      	b.n	80008b4 <BL_voidHandleGoToAddressCmd+0x90>
          HAL_UART_Transmit(&huart2, &Local_uint8AddressValidStatus, 1, HAL_MAX_DELAY);
 800089e:	f107 010b 	add.w	r1, r7, #11
 80008a2:	f04f 33ff 	mov.w	r3, #4294967295
 80008a6:	2201      	movs	r2, #1
 80008a8:	4804      	ldr	r0, [pc, #16]	; (80008bc <BL_voidHandleGoToAddressCmd+0x98>)
 80008aa:	f001 ff3c 	bl	8002726 <HAL_UART_Transmit>
}
 80008ae:	e001      	b.n	80008b4 <BL_voidHandleGoToAddressCmd+0x90>
        voidSendNACK();
 80008b0:	f7ff fe54 	bl	800055c <voidSendNACK>
}
 80008b4:	bf00      	nop
 80008b6:	3720      	adds	r7, #32
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000030 	.word	0x20000030

080008c0 <BL_voidHandleFlashEraseCmd>:
 * Return:
 * -------
 * - No return value (void), but the function sends feedback to the host via UART.
 */
void BL_voidHandleFlashEraseCmd(uint8_t* copy_puint8CmdPacket)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	uint8_t Local_uint8CRCStatus;
	uint8_t Local_uint8CmdLen; // this variable to extract command length
	uint32_t Local_uint32HostCRC; // this variable to extract host CRC

	/* Extract command length (first byte includes "Length to follow") */
	Local_uint8CmdLen = copy_puint8CmdPacket[0] + 1;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	3301      	adds	r3, #1
 80008ce:	75fb      	strb	r3, [r7, #23]

	/* Extract CRC from the last 4 bytes of the received packet */
	Local_uint32HostCRC = *((uint32_t*)(copy_puint8CmdPacket + Local_uint8CmdLen - 4));
 80008d0:	7dfb      	ldrb	r3, [r7, #23]
 80008d2:	3b04      	subs	r3, #4
 80008d4:	687a      	ldr	r2, [r7, #4]
 80008d6:	4413      	add	r3, r2
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	613b      	str	r3, [r7, #16]

	/* Verify CRC of the received command */
	Local_uint8CRCStatus = uint8VerifyCRC(copy_puint8CmdPacket, (Local_uint8CmdLen - 4), Local_uint32HostCRC);
 80008dc:	7dfb      	ldrb	r3, [r7, #23]
 80008de:	3b04      	subs	r3, #4
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	4619      	mov	r1, r3
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff fdee 	bl	80004c8 <uint8VerifyCRC>
 80008ec:	4603      	mov	r3, r0
 80008ee:	73fb      	strb	r3, [r7, #15]

	if(Local_uint8CRCStatus == CRC_SUCCESS)
 80008f0:	7bfb      	ldrb	r3, [r7, #15]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d123      	bne.n	800093e <BL_voidHandleFlashEraseCmd+0x7e>
	{
		uint8_t Local_uint8EraseStatus ;
		/* Send ACK with the length of the response payload (1 byte for erase status) */
		 voidSendACK(1u);
 80008f6:	2001      	movs	r0, #1
 80008f8:	f7ff fe18 	bl	800052c <voidSendACK>

		 /* Turn on LED (LD5) to indicate flash erase is in progress */
		 HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET) ;
 80008fc:	2201      	movs	r2, #1
 80008fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000902:	4812      	ldr	r0, [pc, #72]	; (800094c <BL_voidHandleFlashEraseCmd+0x8c>)
 8000904:	f001 fa46 	bl	8001d94 <HAL_GPIO_WritePin>

		 /* Execute flash erase */
		 Local_uint8EraseStatus =  uint8_tExecute_FlashErase(copy_puint8CmdPacket[2] ,copy_puint8CmdPacket[3]) ;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3302      	adds	r3, #2
 800090c:	781a      	ldrb	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	3303      	adds	r3, #3
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	4619      	mov	r1, r3
 8000916:	4610      	mov	r0, r2
 8000918:	f7ff fe5a 	bl	80005d0 <uint8_tExecute_FlashErase>
 800091c:	4603      	mov	r3, r0
 800091e:	73bb      	strb	r3, [r7, #14]

		 /* Turn off LED (LD5) after erase completion */
		 HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET) ;
 8000920:	2200      	movs	r2, #0
 8000922:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000926:	4809      	ldr	r0, [pc, #36]	; (800094c <BL_voidHandleFlashEraseCmd+0x8c>)
 8000928:	f001 fa34 	bl	8001d94 <HAL_GPIO_WritePin>

		 /* Send the erase status to the host */
		 HAL_UART_Transmit(&huart2, &Local_uint8EraseStatus, 1, HAL_MAX_DELAY) ;
 800092c:	f107 010e 	add.w	r1, r7, #14
 8000930:	f04f 33ff 	mov.w	r3, #4294967295
 8000934:	2201      	movs	r2, #1
 8000936:	4806      	ldr	r0, [pc, #24]	; (8000950 <BL_voidHandleFlashEraseCmd+0x90>)
 8000938:	f001 fef5 	bl	8002726 <HAL_UART_Transmit>
	else
	{
		/* Send NACK if CRC verification fails */
		voidSendNACK();
	}
}
 800093c:	e001      	b.n	8000942 <BL_voidHandleFlashEraseCmd+0x82>
		voidSendNACK();
 800093e:	f7ff fe0d 	bl	800055c <voidSendNACK>
}
 8000942:	bf00      	nop
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40020c00 	.word	0x40020c00
 8000950:	20000030 	.word	0x20000030

08000954 <BL_voidHandleMemWriteCmd>:

void BL_voidHandleMemWriteCmd(uint8_t* copy_puint8CmdPacket)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	uint8_t Local_uint8CRCStatus;
	uint8_t Local_uint8CmdLen; // this variable to extract command length
	uint32_t Local_uint32HostCRC; // this variable to extract host CRC

	/* Extract command length (first byte includes "Length to follow") */
	Local_uint8CmdLen = copy_puint8CmdPacket[0] + 1;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	3301      	adds	r3, #1
 8000962:	75fb      	strb	r3, [r7, #23]

	/* Extract CRC from the last 4 bytes of the received packet */
	Local_uint32HostCRC = *((uint32_t*)(copy_puint8CmdPacket + Local_uint8CmdLen - 4));
 8000964:	7dfb      	ldrb	r3, [r7, #23]
 8000966:	3b04      	subs	r3, #4
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	4413      	add	r3, r2
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	613b      	str	r3, [r7, #16]

	/* Verify CRC of the received command */
	Local_uint8CRCStatus = uint8VerifyCRC(copy_puint8CmdPacket, (Local_uint8CmdLen - 4), Local_uint32HostCRC);
 8000970:	7dfb      	ldrb	r3, [r7, #23]
 8000972:	3b04      	subs	r3, #4
 8000974:	b2db      	uxtb	r3, r3
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	4619      	mov	r1, r3
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff fda4 	bl	80004c8 <uint8VerifyCRC>
 8000980:	4603      	mov	r3, r0
 8000982:	73fb      	strb	r3, [r7, #15]

	if(Local_uint8CRCStatus == CRC_SUCCESS)
 8000984:	7bfb      	ldrb	r3, [r7, #15]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d103      	bne.n	8000992 <BL_voidHandleMemWriteCmd+0x3e>
	{
		/* Send ACK with the length of the response payload (1 byte for version) */
		voidSendACK(1u);
 800098a:	2001      	movs	r0, #1
 800098c:	f7ff fdce 	bl	800052c <voidSendACK>
	else
	{
		/* Send NACK if CRC verification fails */
		voidSendNACK();
	}
}
 8000990:	e001      	b.n	8000996 <BL_voidHandleMemWriteCmd+0x42>
		voidSendNACK();
 8000992:	f7ff fde3 	bl	800055c <voidSendNACK>
}
 8000996:	bf00      	nop
 8000998:	3718      	adds	r7, #24
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <BL_voidHandleEnRWProtectCmd>:

void BL_voidHandleEnRWProtectCmd(uint8_t* copy_puint8CmdPacket)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b086      	sub	sp, #24
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
	uint8_t Local_uint8CRCStatus;
	uint8_t Local_uint8CmdLen; // this variable to extract command length
	uint32_t Local_uint32HostCRC; // this variable to extract host CRC

	/* Extract command length (first byte includes "Length to follow") */
	Local_uint8CmdLen = copy_puint8CmdPacket[0] + 1;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	3301      	adds	r3, #1
 80009ac:	75fb      	strb	r3, [r7, #23]

	/* Extract CRC from the last 4 bytes of the received packet */
	Local_uint32HostCRC = *((uint32_t*)(copy_puint8CmdPacket + Local_uint8CmdLen - 4));
 80009ae:	7dfb      	ldrb	r3, [r7, #23]
 80009b0:	3b04      	subs	r3, #4
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	4413      	add	r3, r2
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	613b      	str	r3, [r7, #16]

	/* Verify CRC of the received command */
	Local_uint8CRCStatus = uint8VerifyCRC(copy_puint8CmdPacket, (Local_uint8CmdLen - 4), Local_uint32HostCRC);
 80009ba:	7dfb      	ldrb	r3, [r7, #23]
 80009bc:	3b04      	subs	r3, #4
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	4619      	mov	r1, r3
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f7ff fd7f 	bl	80004c8 <uint8VerifyCRC>
 80009ca:	4603      	mov	r3, r0
 80009cc:	73fb      	strb	r3, [r7, #15]

	if(Local_uint8CRCStatus == CRC_SUCCESS)
 80009ce:	7bfb      	ldrb	r3, [r7, #15]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d103      	bne.n	80009dc <BL_voidHandleEnRWProtectCmd+0x3e>
	{
		/* Send ACK with the length of the response payload (1 byte for version) */
		voidSendACK(1u);
 80009d4:	2001      	movs	r0, #1
 80009d6:	f7ff fda9 	bl	800052c <voidSendACK>
	else
	{
		/* Send NACK if CRC verification fails */
		voidSendNACK();
	}
}
 80009da:	e001      	b.n	80009e0 <BL_voidHandleEnRWProtectCmd+0x42>
		voidSendNACK();
 80009dc:	f7ff fdbe 	bl	800055c <voidSendNACK>
}
 80009e0:	bf00      	nop
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <BL_voidHandleMemReadCmd>:

void BL_voidHandleMemReadCmd(uint8_t* copy_puint8CmdPacket)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	uint8_t Local_uint8CRCStatus;
	uint8_t Local_uint8CmdLen; // this variable to extract command length
	uint32_t Local_uint32HostCRC; // this variable to extract host CRC

	/* Extract command length (first byte includes "Length to follow") */
	Local_uint8CmdLen = copy_puint8CmdPacket[0] + 1;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	3301      	adds	r3, #1
 80009f6:	75fb      	strb	r3, [r7, #23]

	/* Extract CRC from the last 4 bytes of the received packet */
	Local_uint32HostCRC = *((uint32_t*)(copy_puint8CmdPacket + Local_uint8CmdLen - 4));
 80009f8:	7dfb      	ldrb	r3, [r7, #23]
 80009fa:	3b04      	subs	r3, #4
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	4413      	add	r3, r2
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	613b      	str	r3, [r7, #16]

	/* Verify CRC of the received command */
	Local_uint8CRCStatus = uint8VerifyCRC(copy_puint8CmdPacket, (Local_uint8CmdLen - 4), Local_uint32HostCRC);
 8000a04:	7dfb      	ldrb	r3, [r7, #23]
 8000a06:	3b04      	subs	r3, #4
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff fd5a 	bl	80004c8 <uint8VerifyCRC>
 8000a14:	4603      	mov	r3, r0
 8000a16:	73fb      	strb	r3, [r7, #15]

	if(Local_uint8CRCStatus == CRC_SUCCESS)
 8000a18:	7bfb      	ldrb	r3, [r7, #15]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d103      	bne.n	8000a26 <BL_voidHandleMemReadCmd+0x3e>
	{
		/* Send ACK with the length of the response payload (1 byte for version) */
		voidSendACK(1u);
 8000a1e:	2001      	movs	r0, #1
 8000a20:	f7ff fd84 	bl	800052c <voidSendACK>
	else
	{
		/* Send NACK if CRC verification fails */
		voidSendNACK();
	}
}
 8000a24:	e001      	b.n	8000a2a <BL_voidHandleMemReadCmd+0x42>
		voidSendNACK();
 8000a26:	f7ff fd99 	bl	800055c <voidSendNACK>
}
 8000a2a:	bf00      	nop
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <BL_voidHandleReadSectorStatusCmd>:

void BL_voidHandleReadSectorStatusCmd(uint8_t* copy_puint8CmdPacket)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b086      	sub	sp, #24
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
	uint8_t Local_uint8CRCStatus;
	uint8_t Local_uint8CmdLen; // this variable to extract command length
	uint32_t Local_uint32HostCRC; // this variable to extract host CRC

	/* Extract command length (first byte includes "Length to follow") */
	Local_uint8CmdLen = copy_puint8CmdPacket[0] + 1;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	75fb      	strb	r3, [r7, #23]

	/* Extract CRC from the last 4 bytes of the received packet */
	Local_uint32HostCRC = *((uint32_t*)(copy_puint8CmdPacket + Local_uint8CmdLen - 4));
 8000a42:	7dfb      	ldrb	r3, [r7, #23]
 8000a44:	3b04      	subs	r3, #4
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	4413      	add	r3, r2
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	613b      	str	r3, [r7, #16]

	/* Verify CRC of the received command */
	Local_uint8CRCStatus = uint8VerifyCRC(copy_puint8CmdPacket, (Local_uint8CmdLen - 4), Local_uint32HostCRC);
 8000a4e:	7dfb      	ldrb	r3, [r7, #23]
 8000a50:	3b04      	subs	r3, #4
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	4619      	mov	r1, r3
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f7ff fd35 	bl	80004c8 <uint8VerifyCRC>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	73fb      	strb	r3, [r7, #15]

	if(Local_uint8CRCStatus == CRC_SUCCESS)
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d103      	bne.n	8000a70 <BL_voidHandleReadSectorStatusCmd+0x3e>
	{
		/* Send ACK with the length of the response payload (1 byte for version) */
		voidSendACK(1u);
 8000a68:	2001      	movs	r0, #1
 8000a6a:	f7ff fd5f 	bl	800052c <voidSendACK>
	else
	{
		/* Send NACK if CRC verification fails */
		voidSendNACK();
	}
}
 8000a6e:	e001      	b.n	8000a74 <BL_voidHandleReadSectorStatusCmd+0x42>
		voidSendNACK();
 8000a70:	f7ff fd74 	bl	800055c <voidSendNACK>
}
 8000a74:	bf00      	nop
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <BL_voidHandleOTPReadCmd>:

void BL_voidHandleOTPReadCmd(uint8_t* copy_puint8CmdPacket)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	uint8_t Local_uint8CRCStatus;
	uint8_t Local_uint8CmdLen; // this variable to extract command length
	uint32_t Local_uint32HostCRC; // this variable to extract host CRC

	/* Extract command length (first byte includes "Length to follow") */
	Local_uint8CmdLen = copy_puint8CmdPacket[0] + 1;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	75fb      	strb	r3, [r7, #23]

	/* Extract CRC from the last 4 bytes of the received packet */
	Local_uint32HostCRC = *((uint32_t*)(copy_puint8CmdPacket + Local_uint8CmdLen - 4));
 8000a8c:	7dfb      	ldrb	r3, [r7, #23]
 8000a8e:	3b04      	subs	r3, #4
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	4413      	add	r3, r2
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	613b      	str	r3, [r7, #16]

	/* Verify CRC of the received command */
	Local_uint8CRCStatus = uint8VerifyCRC(copy_puint8CmdPacket, (Local_uint8CmdLen - 4), Local_uint32HostCRC);
 8000a98:	7dfb      	ldrb	r3, [r7, #23]
 8000a9a:	3b04      	subs	r3, #4
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff fd10 	bl	80004c8 <uint8VerifyCRC>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	73fb      	strb	r3, [r7, #15]

	if(Local_uint8CRCStatus == CRC_SUCCESS)
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d103      	bne.n	8000aba <BL_voidHandleOTPReadCmd+0x3e>
	{
		/* Send ACK with the length of the response payload (1 byte for version) */
		voidSendACK(1u);
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f7ff fd3a 	bl	800052c <voidSendACK>
	else
	{
		/* Send NACK if CRC verification fails */
		voidSendNACK();
	}
}
 8000ab8:	e001      	b.n	8000abe <BL_voidHandleOTPReadCmd+0x42>
		voidSendNACK();
 8000aba:	f7ff fd4f 	bl	800055c <voidSendNACK>
}
 8000abe:	bf00      	nop
 8000ac0:	3718      	adds	r7, #24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <BL_voidHandleDisWRProtectCmd>:

void BL_voidHandleDisWRProtectCmd(uint8_t* copy_puint8CmdPacket)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b086      	sub	sp, #24
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
	uint8_t Local_uint8CRCStatus;
	uint8_t Local_uint8CmdLen; // this variable to extract command length
	uint32_t Local_uint32HostCRC; // this variable to extract host CRC

	/* Extract command length (first byte includes "Length to follow") */
	Local_uint8CmdLen = copy_puint8CmdPacket[0] + 1;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	75fb      	strb	r3, [r7, #23]

	/* Extract CRC from the last 4 bytes of the received packet */
	Local_uint32HostCRC = *((uint32_t*)(copy_puint8CmdPacket + Local_uint8CmdLen - 4));
 8000ad6:	7dfb      	ldrb	r3, [r7, #23]
 8000ad8:	3b04      	subs	r3, #4
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	4413      	add	r3, r2
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	613b      	str	r3, [r7, #16]

	/* Verify CRC of the received command */
	Local_uint8CRCStatus = uint8VerifyCRC(copy_puint8CmdPacket, (Local_uint8CmdLen - 4), Local_uint32HostCRC);
 8000ae2:	7dfb      	ldrb	r3, [r7, #23]
 8000ae4:	3b04      	subs	r3, #4
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	4619      	mov	r1, r3
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff fceb 	bl	80004c8 <uint8VerifyCRC>
 8000af2:	4603      	mov	r3, r0
 8000af4:	73fb      	strb	r3, [r7, #15]

	if(Local_uint8CRCStatus == CRC_SUCCESS)
 8000af6:	7bfb      	ldrb	r3, [r7, #15]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d103      	bne.n	8000b04 <BL_voidHandleDisWRProtectCmd+0x3e>
	{
		/* Send ACK with the length of the response payload (1 byte for version) */
		voidSendACK(1u);
 8000afc:	2001      	movs	r0, #1
 8000afe:	f7ff fd15 	bl	800052c <voidSendACK>
	else
	{
		/* Send NACK if CRC verification fails */
		voidSendNACK();
	}
}
 8000b02:	e001      	b.n	8000b08 <BL_voidHandleDisWRProtectCmd+0x42>
		voidSendNACK();
 8000b04:	f7ff fd2a 	bl	800055c <voidSendNACK>
}
 8000b08:	bf00      	nop
 8000b0a:	3718      	adds	r7, #24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b10:	b5b0      	push	{r4, r5, r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
char HelloBootloader[]= "Hello From Bootloader\r\n" ;
 8000b16:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <main+0x6c>)
 8000b18:	463c      	mov	r4, r7
 8000b1a:	461d      	mov	r5, r3
 8000b1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b20:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b24:	e884 0003 	stmia.w	r4, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b28:	f000 fbd8 	bl	80012dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b2c:	f000 f82c 	bl	8000b88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b30:	f000 f8d2 	bl	8000cd8 <MX_GPIO_Init>
  MX_CRC_Init();
 8000b34:	f000 f892 	bl	8000c5c <MX_CRC_Init>
  MX_USART2_UART_Init();
 8000b38:	f000 f8a4 	bl	8000c84 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
   /*Read the button*/
 if( HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)== GPIO_PIN_SET)
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	4810      	ldr	r0, [pc, #64]	; (8000b80 <main+0x70>)
 8000b40:	f001 f910 	bl	8001d64 <HAL_GPIO_ReadPin>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d102      	bne.n	8000b50 <main+0x40>
 {
	 Bootloader_UartReadData();
 8000b4a:	f000 fa25 	bl	8000f98 <Bootloader_UartReadData>
 8000b4e:	e008      	b.n	8000b62 <main+0x52>
 }else if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)== GPIO_PIN_RESET)
 8000b50:	2101      	movs	r1, #1
 8000b52:	480b      	ldr	r0, [pc, #44]	; (8000b80 <main+0x70>)
 8000b54:	f001 f906 	bl	8001d64 <HAL_GPIO_ReadPin>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d101      	bne.n	8000b62 <main+0x52>
 {
	 Bootloader_JumpToUserApp();
 8000b5e:	f000 fa9d 	bl	800109c <Bootloader_JumpToUserApp>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit(&huart2, (uint8_t*)HelloBootloader, sizeof(HelloBootloader), HAL_MAX_DELAY);
 8000b62:	4639      	mov	r1, r7
 8000b64:	f04f 33ff 	mov.w	r3, #4294967295
 8000b68:	2218      	movs	r2, #24
 8000b6a:	4806      	ldr	r0, [pc, #24]	; (8000b84 <main+0x74>)
 8000b6c:	f001 fddb 	bl	8002726 <HAL_UART_Transmit>
	      HAL_Delay(1000);
 8000b70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b74:	f000 fc24 	bl	80013c0 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, (uint8_t*)HelloBootloader, sizeof(HelloBootloader), HAL_MAX_DELAY);
 8000b78:	e7f3      	b.n	8000b62 <main+0x52>
 8000b7a:	bf00      	nop
 8000b7c:	080031ac 	.word	0x080031ac
 8000b80:	40020000 	.word	0x40020000
 8000b84:	20000030 	.word	0x20000030

08000b88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b094      	sub	sp, #80	; 0x50
 8000b8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8e:	f107 0320 	add.w	r3, r7, #32
 8000b92:	2230      	movs	r2, #48	; 0x30
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f002 faee 	bl	8003178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b9c:	f107 030c 	add.w	r3, r7, #12
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bac:	2300      	movs	r3, #0
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	4b28      	ldr	r3, [pc, #160]	; (8000c54 <SystemClock_Config+0xcc>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	4a27      	ldr	r2, [pc, #156]	; (8000c54 <SystemClock_Config+0xcc>)
 8000bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bba:	6413      	str	r3, [r2, #64]	; 0x40
 8000bbc:	4b25      	ldr	r3, [pc, #148]	; (8000c54 <SystemClock_Config+0xcc>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc8:	2300      	movs	r3, #0
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <SystemClock_Config+0xd0>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a21      	ldr	r2, [pc, #132]	; (8000c58 <SystemClock_Config+0xd0>)
 8000bd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd6:	6013      	str	r3, [r2, #0]
 8000bd8:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <SystemClock_Config+0xd0>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000be4:	2302      	movs	r3, #2
 8000be6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000be8:	2301      	movs	r3, #1
 8000bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bec:	2310      	movs	r3, #16
 8000bee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bf8:	2308      	movs	r3, #8
 8000bfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000bfc:	2332      	movs	r3, #50	; 0x32
 8000bfe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c00:	2304      	movs	r3, #4
 8000c02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c04:	2307      	movs	r3, #7
 8000c06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c08:	f107 0320 	add.w	r3, r7, #32
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f001 f8db 	bl	8001dc8 <HAL_RCC_OscConfig>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c18:	f000 fa58 	bl	80010cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c1c:	230f      	movs	r3, #15
 8000c1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c20:	2302      	movs	r3, #2
 8000c22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c28:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f001 fb34 	bl	80022a8 <HAL_RCC_ClockConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c46:	f000 fa41 	bl	80010cc <Error_Handler>
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	3750      	adds	r7, #80	; 0x50
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40007000 	.word	0x40007000

08000c5c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_CRC_Init+0x20>)
 8000c62:	4a07      	ldr	r2, [pc, #28]	; (8000c80 <MX_CRC_Init+0x24>)
 8000c64:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c66:	4805      	ldr	r0, [pc, #20]	; (8000c7c <MX_CRC_Init+0x20>)
 8000c68:	f000 fcb1 	bl	80015ce <HAL_CRC_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000c72:	f000 fa2b 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000028 	.word	0x20000028
 8000c80:	40023000 	.word	0x40023000

08000c84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000c8a:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <MX_USART2_UART_Init+0x50>)
 8000c8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000c90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000caa:	220c      	movs	r2, #12
 8000cac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cba:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000cbc:	f001 fce6 	bl	800268c <HAL_UART_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cc6:	f000 fa01 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000030 	.word	0x20000030
 8000cd4:	40004400 	.word	0x40004400

08000cd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08c      	sub	sp, #48	; 0x30
 8000cdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61bb      	str	r3, [r7, #24]
 8000cf2:	4ba1      	ldr	r3, [pc, #644]	; (8000f78 <MX_GPIO_Init+0x2a0>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4aa0      	ldr	r2, [pc, #640]	; (8000f78 <MX_GPIO_Init+0x2a0>)
 8000cf8:	f043 0310 	orr.w	r3, r3, #16
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b9e      	ldr	r3, [pc, #632]	; (8000f78 <MX_GPIO_Init+0x2a0>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0310 	and.w	r3, r3, #16
 8000d06:	61bb      	str	r3, [r7, #24]
 8000d08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
 8000d0e:	4b9a      	ldr	r3, [pc, #616]	; (8000f78 <MX_GPIO_Init+0x2a0>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a99      	ldr	r2, [pc, #612]	; (8000f78 <MX_GPIO_Init+0x2a0>)
 8000d14:	f043 0304 	orr.w	r3, r3, #4
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b97      	ldr	r3, [pc, #604]	; (8000f78 <MX_GPIO_Init+0x2a0>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0304 	and.w	r3, r3, #4
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	4b93      	ldr	r3, [pc, #588]	; (8000f78 <MX_GPIO_Init+0x2a0>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a92      	ldr	r2, [pc, #584]	; (8000f78 <MX_GPIO_Init+0x2a0>)
 8000d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b90      	ldr	r3, [pc, #576]	; (8000f78 <MX_GPIO_Init+0x2a0>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	4b8c      	ldr	r3, [pc, #560]	; (8000f78 <MX_GPIO_Init+0x2a0>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a8b      	ldr	r2, [pc, #556]	; (8000f78 <MX_GPIO_Init+0x2a0>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b89      	ldr	r3, [pc, #548]	; (8000f78 <MX_GPIO_Init+0x2a0>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	4b85      	ldr	r3, [pc, #532]	; (8000f78 <MX_GPIO_Init+0x2a0>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a84      	ldr	r2, [pc, #528]	; (8000f78 <MX_GPIO_Init+0x2a0>)
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b82      	ldr	r3, [pc, #520]	; (8000f78 <MX_GPIO_Init+0x2a0>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	4b7e      	ldr	r3, [pc, #504]	; (8000f78 <MX_GPIO_Init+0x2a0>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a7d      	ldr	r2, [pc, #500]	; (8000f78 <MX_GPIO_Init+0x2a0>)
 8000d84:	f043 0308 	orr.w	r3, r3, #8
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b7b      	ldr	r3, [pc, #492]	; (8000f78 <MX_GPIO_Init+0x2a0>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0308 	and.w	r3, r3, #8
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2108      	movs	r1, #8
 8000d9a:	4878      	ldr	r0, [pc, #480]	; (8000f7c <MX_GPIO_Init+0x2a4>)
 8000d9c:	f000 fffa 	bl	8001d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000da0:	2201      	movs	r2, #1
 8000da2:	2101      	movs	r1, #1
 8000da4:	4876      	ldr	r0, [pc, #472]	; (8000f80 <MX_GPIO_Init+0x2a8>)
 8000da6:	f000 fff5 	bl	8001d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000daa:	2200      	movs	r2, #0
 8000dac:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000db0:	4874      	ldr	r0, [pc, #464]	; (8000f84 <MX_GPIO_Init+0x2ac>)
 8000db2:	f000 ffef 	bl	8001d94 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000db6:	2308      	movs	r3, #8
 8000db8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	4619      	mov	r1, r3
 8000dcc:	486b      	ldr	r0, [pc, #428]	; (8000f7c <MX_GPIO_Init+0x2a4>)
 8000dce:	f000 fe2f 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000de2:	f107 031c 	add.w	r3, r7, #28
 8000de6:	4619      	mov	r1, r3
 8000de8:	4865      	ldr	r0, [pc, #404]	; (8000f80 <MX_GPIO_Init+0x2a8>)
 8000dea:	f000 fe21 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000dee:	2308      	movs	r3, #8
 8000df0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dfe:	2305      	movs	r3, #5
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	4619      	mov	r1, r3
 8000e08:	485d      	ldr	r0, [pc, #372]	; (8000f80 <MX_GPIO_Init+0x2a8>)
 8000e0a:	f000 fe11 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e12:	4b5d      	ldr	r3, [pc, #372]	; (8000f88 <MX_GPIO_Init+0x2b0>)
 8000e14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 031c 	add.w	r3, r7, #28
 8000e1e:	4619      	mov	r1, r3
 8000e20:	485a      	ldr	r0, [pc, #360]	; (8000f8c <MX_GPIO_Init+0x2b4>)
 8000e22:	f000 fe05 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e26:	2310      	movs	r3, #16
 8000e28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e36:	2306      	movs	r3, #6
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4852      	ldr	r0, [pc, #328]	; (8000f8c <MX_GPIO_Init+0x2b4>)
 8000e42:	f000 fdf5 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e46:	23e0      	movs	r3, #224	; 0xe0
 8000e48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e56:	2305      	movs	r3, #5
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5a:	f107 031c 	add.w	r3, r7, #28
 8000e5e:	4619      	mov	r1, r3
 8000e60:	484a      	ldr	r0, [pc, #296]	; (8000f8c <MX_GPIO_Init+0x2b4>)
 8000e62:	f000 fde5 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e66:	2304      	movs	r3, #4
 8000e68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e72:	f107 031c 	add.w	r3, r7, #28
 8000e76:	4619      	mov	r1, r3
 8000e78:	4845      	ldr	r0, [pc, #276]	; (8000f90 <MX_GPIO_Init+0x2b8>)
 8000e7a:	f000 fdd9 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e90:	2305      	movs	r3, #5
 8000e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000e94:	f107 031c 	add.w	r3, r7, #28
 8000e98:	4619      	mov	r1, r3
 8000e9a:	483d      	ldr	r0, [pc, #244]	; (8000f90 <MX_GPIO_Init+0x2b8>)
 8000e9c:	f000 fdc8 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ea0:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000ea4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4832      	ldr	r0, [pc, #200]	; (8000f84 <MX_GPIO_Init+0x2ac>)
 8000eba:	f000 fdb9 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ebe:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ec2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ed0:	2306      	movs	r3, #6
 8000ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed4:	f107 031c 	add.w	r3, r7, #28
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4829      	ldr	r0, [pc, #164]	; (8000f80 <MX_GPIO_Init+0x2a8>)
 8000edc:	f000 fda8 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000ee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000eee:	f107 031c 	add.w	r3, r7, #28
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4825      	ldr	r0, [pc, #148]	; (8000f8c <MX_GPIO_Init+0x2b4>)
 8000ef6:	f000 fd9b 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000efa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000efe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f0c:	230a      	movs	r3, #10
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f10:	f107 031c 	add.w	r3, r7, #28
 8000f14:	4619      	mov	r1, r3
 8000f16:	481d      	ldr	r0, [pc, #116]	; (8000f8c <MX_GPIO_Init+0x2b4>)
 8000f18:	f000 fd8a 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000f1c:	2320      	movs	r3, #32
 8000f1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f20:	2300      	movs	r3, #0
 8000f22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4815      	ldr	r0, [pc, #84]	; (8000f84 <MX_GPIO_Init+0x2ac>)
 8000f30:	f000 fd7e 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000f34:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f3a:	2312      	movs	r3, #18
 8000f3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f46:	2304      	movs	r3, #4
 8000f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4a:	f107 031c 	add.w	r3, r7, #28
 8000f4e:	4619      	mov	r1, r3
 8000f50:	480f      	ldr	r0, [pc, #60]	; (8000f90 <MX_GPIO_Init+0x2b8>)
 8000f52:	f000 fd6d 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000f56:	2302      	movs	r3, #2
 8000f58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <MX_GPIO_Init+0x2bc>)
 8000f5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	4619      	mov	r1, r3
 8000f68:	4804      	ldr	r0, [pc, #16]	; (8000f7c <MX_GPIO_Init+0x2a4>)
 8000f6a:	f000 fd61 	bl	8001a30 <HAL_GPIO_Init>

}
 8000f6e:	bf00      	nop
 8000f70:	3730      	adds	r7, #48	; 0x30
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	40020800 	.word	0x40020800
 8000f84:	40020c00 	.word	0x40020c00
 8000f88:	10110000 	.word	0x10110000
 8000f8c:	40020000 	.word	0x40020000
 8000f90:	40020400 	.word	0x40020400
 8000f94:	10120000 	.word	0x10120000

08000f98 <Bootloader_UartReadData>:
 *  1. Reads the first byte, which contains the length of the remaining command.
 *  2. Reads the full command based on the received length.
 *  3. Parses the command and executes the corresponding handler function.
 */
void Bootloader_UartReadData(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b0c0      	sub	sp, #256	; 0x100
 8000f9c:	af00      	add	r7, sp, #0
	/* Buffer to store the received command packet */
	uint8_t Local_uint8CmdPacket[255] ={0};
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	23ff      	movs	r3, #255	; 0xff
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	f002 f8e6 	bl	8003178 <memset>

   /* Infinite loop to keep listening for commands */
	while(1)
	{
       /* Clear the command packet buffer before reading a new command */
		memset(Local_uint8CmdPacket,0,255); // memset(array , value to put , size )
 8000fac:	463b      	mov	r3, r7
 8000fae:	22ff      	movs	r2, #255	; 0xff
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f002 f8e0 	bl	8003178 <memset>
		/*
		        * Step 1: Read the first byte from UART.
		        * This byte contains the "Length to Follow" field, which tells how many bytes
		        * are coming next in the packet.
        */
		HAL_UART_Receive(&huart2, Local_uint8CmdPacket, 1, HAL_MAX_DELAY);
 8000fb8:	4639      	mov	r1, r7
 8000fba:	f04f 33ff 	mov.w	r3, #4294967295
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	4835      	ldr	r0, [pc, #212]	; (8001098 <Bootloader_UartReadData+0x100>)
 8000fc2:	f001 fc49 	bl	8002858 <HAL_UART_Receive>

		/*
		        * Step 2: Read the remaining bytes of the command.
		        * It's size is the previous byte value .
	   */
		HAL_UART_Receive(&huart2, &Local_uint8CmdPacket[1], Local_uint8CmdPacket[0], HAL_MAX_DELAY);
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	463b      	mov	r3, r7
 8000fce:	1c59      	adds	r1, r3, #1
 8000fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd4:	4830      	ldr	r0, [pc, #192]	; (8001098 <Bootloader_UartReadData+0x100>)
 8000fd6:	f001 fc3f 	bl	8002858 <HAL_UART_Receive>

		/*
		        * Step 3: Check the command code (second byte in the packet)
		        * and call the corresponding handler function.
		        */
		switch(Local_uint8CmdPacket[1])     /*this byte includes the command code*/
 8000fda:	463b      	mov	r3, r7
 8000fdc:	785b      	ldrb	r3, [r3, #1]
 8000fde:	3b51      	subs	r3, #81	; 0x51
 8000fe0:	2b0b      	cmp	r3, #11
 8000fe2:	d857      	bhi.n	8001094 <Bootloader_UartReadData+0xfc>
 8000fe4:	a201      	add	r2, pc, #4	; (adr r2, 8000fec <Bootloader_UartReadData+0x54>)
 8000fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fea:	bf00      	nop
 8000fec:	0800101d 	.word	0x0800101d
 8000ff0:	08001027 	.word	0x08001027
 8000ff4:	08001031 	.word	0x08001031
 8000ff8:	0800103b 	.word	0x0800103b
 8000ffc:	08001045 	.word	0x08001045
 8001000:	0800104f 	.word	0x0800104f
 8001004:	08001059 	.word	0x08001059
 8001008:	08001063 	.word	0x08001063
 800100c:	0800106d 	.word	0x0800106d
 8001010:	08001077 	.word	0x08001077
 8001014:	08001081 	.word	0x08001081
 8001018:	0800108b 	.word	0x0800108b
		{
		case BL_GET_VESRION        :BL_voidHandleGetVERCmd(Local_uint8CmdPacket)                  ;        break;
 800101c:	463b      	mov	r3, r7
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fb28 	bl	8000674 <BL_voidHandleGetVERCmd>
 8001024:	e037      	b.n	8001096 <Bootloader_UartReadData+0xfe>
		case BL_GET_HELP           :BL_voidHandleGetHelpCmd(Local_uint8CmdPacket)                 ;        break;
 8001026:	463b      	mov	r3, r7
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fb55 	bl	80006d8 <BL_voidHandleGetHelpCmd>
 800102e:	e032      	b.n	8001096 <Bootloader_UartReadData+0xfe>
		case BL_GET_CID            :BL_voidHandleGetCIDcmd(Local_uint8CmdPacket)                  ;        break;
 8001030:	463b      	mov	r3, r7
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fb88 	bl	8000748 <BL_voidHandleGetCIDcmd>
 8001038:	e02d      	b.n	8001096 <Bootloader_UartReadData+0xfe>
		case BL_GET_RDP_STATUS     :BL_voidHandleGetRDPStatusCmd(Local_uint8CmdPacket)            ;        break;
 800103a:	463b      	mov	r3, r7
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fbbb 	bl	80007b8 <BL_voidHandleGetRDPStatusCmd>
 8001042:	e028      	b.n	8001096 <Bootloader_UartReadData+0xfe>
		case BL_GO_TO_ADDR         :BL_voidHandleGoToAddressCmd(Local_uint8CmdPacket)             ;        break;
 8001044:	463b      	mov	r3, r7
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fbec 	bl	8000824 <BL_voidHandleGoToAddressCmd>
 800104c:	e023      	b.n	8001096 <Bootloader_UartReadData+0xfe>
		case BL_FLASH_ERASE        :BL_voidHandleFlashEraseCmd(Local_uint8CmdPacket)              ;        break;
 800104e:	463b      	mov	r3, r7
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fc35 	bl	80008c0 <BL_voidHandleFlashEraseCmd>
 8001056:	e01e      	b.n	8001096 <Bootloader_UartReadData+0xfe>
		case BL_MEM_WRITE          :BL_voidHandleMemWriteCmd(Local_uint8CmdPacket)                ;        break;
 8001058:	463b      	mov	r3, r7
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fc7a 	bl	8000954 <BL_voidHandleMemWriteCmd>
 8001060:	e019      	b.n	8001096 <Bootloader_UartReadData+0xfe>
		case BL_EN_RW_PROTECT      :BL_voidHandleEnRWProtectCmd(Local_uint8CmdPacket)             ;        break;
 8001062:	463b      	mov	r3, r7
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fc9a 	bl	800099e <BL_voidHandleEnRWProtectCmd>
 800106a:	e014      	b.n	8001096 <Bootloader_UartReadData+0xfe>
		case BL_MEM_READ           :BL_voidHandleMemReadCmd(Local_uint8CmdPacket)                 ;        break;
 800106c:	463b      	mov	r3, r7
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fcba 	bl	80009e8 <BL_voidHandleMemReadCmd>
 8001074:	e00f      	b.n	8001096 <Bootloader_UartReadData+0xfe>
		case BL_READ_SECTOR_STATUS :BL_voidHandleReadSectorStatusCmd(Local_uint8CmdPacket)        ;        break;
 8001076:	463b      	mov	r3, r7
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fcda 	bl	8000a32 <BL_voidHandleReadSectorStatusCmd>
 800107e:	e00a      	b.n	8001096 <Bootloader_UartReadData+0xfe>
		case BL_OTP_READ           :BL_voidHandleOTPReadCmd(Local_uint8CmdPacket)                 ;        break;
 8001080:	463b      	mov	r3, r7
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fcfa 	bl	8000a7c <BL_voidHandleOTPReadCmd>
 8001088:	e005      	b.n	8001096 <Bootloader_UartReadData+0xfe>
		case BL_DIS_WR_PROTECT     :BL_voidHandleDisWRProtectCmd(Local_uint8CmdPacket)            ;        break;
 800108a:	463b      	mov	r3, r7
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fd1a 	bl	8000ac6 <BL_voidHandleDisWRProtectCmd>
 8001092:	e000      	b.n	8001096 <Bootloader_UartReadData+0xfe>

		default : /*Invalid command from host */ break ;
 8001094:	bf00      	nop
		memset(Local_uint8CmdPacket,0,255); // memset(array , value to put , size )
 8001096:	e789      	b.n	8000fac <Bootloader_UartReadData+0x14>
 8001098:	20000030 	.word	0x20000030

0800109c <Bootloader_JumpToUserApp>:
 * This function transfers execution from the Bootloader to the User Application.
 * It achieves this by setting the MSP (Main Stack Pointer) and jumping to the
 * Reset Handler of the user application.
 */
void Bootloader_JumpToUserApp(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
	/*
		     * Step 1: Configure the MSP (Main Stack Pointer) for the User Application.
		     * The MSP value is stored at the first address of the application's Vector Table,
		     * which is located at the base address of FLASH Sector 2.
    */
	Local_uint32MSPVal =  *((volatile uint32_t*)FLASH_SECTOR2_BASE_ADDRESS);
 80010a2:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <Bootloader_JumpToUserApp+0x28>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	60fb      	str	r3, [r7, #12]

	/*
	     * Step 2: Load the User Application MSP value into the MSP register.
	     * This ensures that the stack pointer is correctly set before executing the application.
    */
	__asm volatile("MSR MSP ,%0"::"r"(Local_uint32MSPVal));
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f383 8808 	msr	MSP, r3

	/*
	     * Step 3: Retrieve the Reset Handler address of the User Application.
	     * This is stored at the second entry in the Vector Table (offset +4 from base address).
   */
	ResetHandlerAddress = *((volatile uint32_t*)(FLASH_SECTOR2_BASE_ADDRESS+ 4));
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <Bootloader_JumpToUserApp+0x2c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	60bb      	str	r3, [r7, #8]
	/*
	     * Step 4: Assign the Reset Handler address to the function pointer.
	     * This allows the program to jump to the application by calling this function.
   */
	App_ResetHandle =(void*)ResetHandlerAddress;
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	607b      	str	r3, [r7, #4]

	/*
	     * Step 5: Jump to the User Application's Reset Handler.
	     * This effectively transfers control from the Bootloader to the application.
   */
	App_ResetHandle();
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4798      	blx	r3

}
 80010bc:	bf00      	nop
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	08008000 	.word	0x08008000
 80010c8:	08008004 	.word	0x08008004

080010cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
	...

080010dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <HAL_MspInit+0x4c>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	4a0f      	ldr	r2, [pc, #60]	; (8001128 <HAL_MspInit+0x4c>)
 80010ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f0:	6453      	str	r3, [r2, #68]	; 0x44
 80010f2:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <HAL_MspInit+0x4c>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	603b      	str	r3, [r7, #0]
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <HAL_MspInit+0x4c>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	4a08      	ldr	r2, [pc, #32]	; (8001128 <HAL_MspInit+0x4c>)
 8001108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110c:	6413      	str	r3, [r2, #64]	; 0x40
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_MspInit+0x4c>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800111a:	2007      	movs	r0, #7
 800111c:	f000 fa24 	bl	8001568 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40023800 	.word	0x40023800

0800112c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <HAL_CRC_MspInit+0x3c>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d10d      	bne.n	800115a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_CRC_MspInit+0x40>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a09      	ldr	r2, [pc, #36]	; (800116c <HAL_CRC_MspInit+0x40>)
 8001148:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b07      	ldr	r3, [pc, #28]	; (800116c <HAL_CRC_MspInit+0x40>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800115a:	bf00      	nop
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40023000 	.word	0x40023000
 800116c:	40023800 	.word	0x40023800

08001170 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a19      	ldr	r2, [pc, #100]	; (80011f4 <HAL_UART_MspInit+0x84>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d12b      	bne.n	80011ea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <HAL_UART_MspInit+0x88>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	4a17      	ldr	r2, [pc, #92]	; (80011f8 <HAL_UART_MspInit+0x88>)
 800119c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a0:	6413      	str	r3, [r2, #64]	; 0x40
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <HAL_UART_MspInit+0x88>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <HAL_UART_MspInit+0x88>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a10      	ldr	r2, [pc, #64]	; (80011f8 <HAL_UART_MspInit+0x88>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <HAL_UART_MspInit+0x88>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011ca:	230c      	movs	r3, #12
 80011cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	2302      	movs	r3, #2
 80011d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011da:	2307      	movs	r3, #7
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	4619      	mov	r1, r3
 80011e4:	4805      	ldr	r0, [pc, #20]	; (80011fc <HAL_UART_MspInit+0x8c>)
 80011e6:	f000 fc23 	bl	8001a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011ea:	bf00      	nop
 80011ec:	3728      	adds	r7, #40	; 0x28
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40004400 	.word	0x40004400
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40020000 	.word	0x40020000

08001200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001212:	e7fe      	b.n	8001212 <HardFault_Handler+0x4>

08001214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001218:	e7fe      	b.n	8001218 <MemManage_Handler+0x4>

0800121a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800121e:	e7fe      	b.n	800121e <BusFault_Handler+0x4>

08001220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <UsageFault_Handler+0x4>

08001226 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001254:	f000 f894 	bl	8001380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}

0800125c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <SystemInit+0x28>)
 8001262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001266:	4a07      	ldr	r2, [pc, #28]	; (8001284 <SystemInit+0x28>)
 8001268:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800126c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001270:	4b04      	ldr	r3, [pc, #16]	; (8001284 <SystemInit+0x28>)
 8001272:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001276:	609a      	str	r2, [r3, #8]
#endif
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001288:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012c0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800128c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800128e:	e003      	b.n	8001298 <LoopCopyDataInit>

08001290 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001292:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001294:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001296:	3104      	adds	r1, #4

08001298 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001298:	480b      	ldr	r0, [pc, #44]	; (80012c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800129c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800129e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012a0:	d3f6      	bcc.n	8001290 <CopyDataInit>
  ldr  r2, =_sbss
 80012a2:	4a0b      	ldr	r2, [pc, #44]	; (80012d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012a4:	e002      	b.n	80012ac <LoopFillZerobss>

080012a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012a8:	f842 3b04 	str.w	r3, [r2], #4

080012ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012b0:	d3f9      	bcc.n	80012a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012b2:	f7ff ffd3 	bl	800125c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012b6:	f001 ff3b 	bl	8003130 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ba:	f7ff fc29 	bl	8000b10 <main>
  bx  lr    
 80012be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012c0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80012c4:	080031ec 	.word	0x080031ec
  ldr  r0, =_sdata
 80012c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012cc:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80012d0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80012d4:	20000094 	.word	0x20000094

080012d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d8:	e7fe      	b.n	80012d8 <ADC_IRQHandler>
	...

080012dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012e0:	4b0e      	ldr	r3, [pc, #56]	; (800131c <HAL_Init+0x40>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0d      	ldr	r2, [pc, #52]	; (800131c <HAL_Init+0x40>)
 80012e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012ec:	4b0b      	ldr	r3, [pc, #44]	; (800131c <HAL_Init+0x40>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0a      	ldr	r2, [pc, #40]	; (800131c <HAL_Init+0x40>)
 80012f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <HAL_Init+0x40>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a07      	ldr	r2, [pc, #28]	; (800131c <HAL_Init+0x40>)
 80012fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001302:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001304:	2003      	movs	r0, #3
 8001306:	f000 f92f 	bl	8001568 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800130a:	2000      	movs	r0, #0
 800130c:	f000 f808 	bl	8001320 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001310:	f7ff fee4 	bl	80010dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023c00 	.word	0x40023c00

08001320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_InitTick+0x54>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_InitTick+0x58>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4619      	mov	r1, r3
 8001332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001336:	fbb3 f3f1 	udiv	r3, r3, r1
 800133a:	fbb2 f3f3 	udiv	r3, r2, r3
 800133e:	4618      	mov	r0, r3
 8001340:	f000 f939 	bl	80015b6 <HAL_SYSTICK_Config>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e00e      	b.n	800136c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b0f      	cmp	r3, #15
 8001352:	d80a      	bhi.n	800136a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001354:	2200      	movs	r2, #0
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	f04f 30ff 	mov.w	r0, #4294967295
 800135c:	f000 f90f 	bl	800157e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001360:	4a06      	ldr	r2, [pc, #24]	; (800137c <HAL_InitTick+0x5c>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001366:	2300      	movs	r3, #0
 8001368:	e000      	b.n	800136c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000000 	.word	0x20000000
 8001378:	20000008 	.word	0x20000008
 800137c:	20000004 	.word	0x20000004

08001380 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_IncTick+0x20>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	461a      	mov	r2, r3
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_IncTick+0x24>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4413      	add	r3, r2
 8001390:	4a04      	ldr	r2, [pc, #16]	; (80013a4 <HAL_IncTick+0x24>)
 8001392:	6013      	str	r3, [r2, #0]
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	20000008 	.word	0x20000008
 80013a4:	20000070 	.word	0x20000070

080013a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return uwTick;
 80013ac:	4b03      	ldr	r3, [pc, #12]	; (80013bc <HAL_GetTick+0x14>)
 80013ae:	681b      	ldr	r3, [r3, #0]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	20000070 	.word	0x20000070

080013c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c8:	f7ff ffee 	bl	80013a8 <HAL_GetTick>
 80013cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d8:	d005      	beq.n	80013e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <HAL_Delay+0x40>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	461a      	mov	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4413      	add	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013e6:	bf00      	nop
 80013e8:	f7ff ffde 	bl	80013a8 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d8f7      	bhi.n	80013e8 <HAL_Delay+0x28>
  {
  }
}
 80013f8:	bf00      	nop
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000008 	.word	0x20000008

08001404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001420:	4013      	ands	r3, r2
 8001422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800142c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001436:	4a04      	ldr	r2, [pc, #16]	; (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	60d3      	str	r3, [r2, #12]
}
 800143c:	bf00      	nop
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <__NVIC_GetPriorityGrouping+0x18>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	f003 0307 	and.w	r3, r3, #7
}
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	6039      	str	r1, [r7, #0]
 8001472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001478:	2b00      	cmp	r3, #0
 800147a:	db0a      	blt.n	8001492 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	b2da      	uxtb	r2, r3
 8001480:	490c      	ldr	r1, [pc, #48]	; (80014b4 <__NVIC_SetPriority+0x4c>)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	0112      	lsls	r2, r2, #4
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	440b      	add	r3, r1
 800148c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001490:	e00a      	b.n	80014a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	b2da      	uxtb	r2, r3
 8001496:	4908      	ldr	r1, [pc, #32]	; (80014b8 <__NVIC_SetPriority+0x50>)
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	f003 030f 	and.w	r3, r3, #15
 800149e:	3b04      	subs	r3, #4
 80014a0:	0112      	lsls	r2, r2, #4
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	440b      	add	r3, r1
 80014a6:	761a      	strb	r2, [r3, #24]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000e100 	.word	0xe000e100
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014bc:	b480      	push	{r7}
 80014be:	b089      	sub	sp, #36	; 0x24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f1c3 0307 	rsb	r3, r3, #7
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	bf28      	it	cs
 80014da:	2304      	movcs	r3, #4
 80014dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3304      	adds	r3, #4
 80014e2:	2b06      	cmp	r3, #6
 80014e4:	d902      	bls.n	80014ec <NVIC_EncodePriority+0x30>
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3b03      	subs	r3, #3
 80014ea:	e000      	b.n	80014ee <NVIC_EncodePriority+0x32>
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f0:	f04f 32ff 	mov.w	r2, #4294967295
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43da      	mvns	r2, r3
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	401a      	ands	r2, r3
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001504:	f04f 31ff 	mov.w	r1, #4294967295
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	fa01 f303 	lsl.w	r3, r1, r3
 800150e:	43d9      	mvns	r1, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001514:	4313      	orrs	r3, r2
         );
}
 8001516:	4618      	mov	r0, r3
 8001518:	3724      	adds	r7, #36	; 0x24
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3b01      	subs	r3, #1
 8001530:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001534:	d301      	bcc.n	800153a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001536:	2301      	movs	r3, #1
 8001538:	e00f      	b.n	800155a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153a:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <SysTick_Config+0x40>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3b01      	subs	r3, #1
 8001540:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001542:	210f      	movs	r1, #15
 8001544:	f04f 30ff 	mov.w	r0, #4294967295
 8001548:	f7ff ff8e 	bl	8001468 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <SysTick_Config+0x40>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001552:	4b04      	ldr	r3, [pc, #16]	; (8001564 <SysTick_Config+0x40>)
 8001554:	2207      	movs	r2, #7
 8001556:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	e000e010 	.word	0xe000e010

08001568 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff ff47 	bl	8001404 <__NVIC_SetPriorityGrouping>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800157e:	b580      	push	{r7, lr}
 8001580:	b086      	sub	sp, #24
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
 800158a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001590:	f7ff ff5c 	bl	800144c <__NVIC_GetPriorityGrouping>
 8001594:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	68b9      	ldr	r1, [r7, #8]
 800159a:	6978      	ldr	r0, [r7, #20]
 800159c:	f7ff ff8e 	bl	80014bc <NVIC_EncodePriority>
 80015a0:	4602      	mov	r2, r0
 80015a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a6:	4611      	mov	r1, r2
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff5d 	bl	8001468 <__NVIC_SetPriority>
}
 80015ae:	bf00      	nop
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff ffb0 	bl	8001524 <SysTick_Config>
 80015c4:	4603      	mov	r3, r0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e00e      	b.n	80015fe <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	795b      	ldrb	r3, [r3, #5]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d105      	bne.n	80015f6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff fd9b 	bl	800112c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2201      	movs	r2, #1
 80015fa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001606:	b480      	push	{r7}
 8001608:	b087      	sub	sp, #28
 800160a:	af00      	add	r7, sp, #0
 800160c:	60f8      	str	r0, [r7, #12]
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2202      	movs	r2, #2
 800161a:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	e00a      	b.n	8001638 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	441a      	add	r2, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6812      	ldr	r2, [r2, #0]
 8001630:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	3301      	adds	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	429a      	cmp	r2, r3
 800163e:	d3f0      	bcc.n	8001622 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2201      	movs	r2, #1
 800164c:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800164e:	693b      	ldr	r3, [r7, #16]
}
 8001650:	4618      	mov	r0, r3
 8001652:	371c      	adds	r7, #28
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001666:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <HAL_FLASH_Unlock+0x38>)
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	2b00      	cmp	r3, #0
 800166c:	da0b      	bge.n	8001686 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <HAL_FLASH_Unlock+0x38>)
 8001670:	4a09      	ldr	r2, [pc, #36]	; (8001698 <HAL_FLASH_Unlock+0x3c>)
 8001672:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001674:	4b07      	ldr	r3, [pc, #28]	; (8001694 <HAL_FLASH_Unlock+0x38>)
 8001676:	4a09      	ldr	r2, [pc, #36]	; (800169c <HAL_FLASH_Unlock+0x40>)
 8001678:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_FLASH_Unlock+0x38>)
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	2b00      	cmp	r3, #0
 8001680:	da01      	bge.n	8001686 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001686:	79fb      	ldrb	r3, [r7, #7]
}
 8001688:	4618      	mov	r0, r3
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	40023c00 	.word	0x40023c00
 8001698:	45670123 	.word	0x45670123
 800169c:	cdef89ab 	.word	0xcdef89ab

080016a0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <HAL_FLASH_Lock+0x1c>)
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	4a04      	ldr	r2, [pc, #16]	; (80016bc <HAL_FLASH_Lock+0x1c>)
 80016aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80016ae:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	40023c00 	.word	0x40023c00

080016c0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80016cc:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <FLASH_WaitForLastOperation+0x78>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80016d2:	f7ff fe69 	bl	80013a8 <HAL_GetTick>
 80016d6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80016d8:	e010      	b.n	80016fc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e0:	d00c      	beq.n	80016fc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d007      	beq.n	80016f8 <FLASH_WaitForLastOperation+0x38>
 80016e8:	f7ff fe5e 	bl	80013a8 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d201      	bcs.n	80016fc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e019      	b.n	8001730 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80016fc:	4b0f      	ldr	r3, [pc, #60]	; (800173c <FLASH_WaitForLastOperation+0x7c>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1e8      	bne.n	80016da <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001708:	4b0c      	ldr	r3, [pc, #48]	; (800173c <FLASH_WaitForLastOperation+0x7c>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b00      	cmp	r3, #0
 8001712:	d002      	beq.n	800171a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001714:	4b09      	ldr	r3, [pc, #36]	; (800173c <FLASH_WaitForLastOperation+0x7c>)
 8001716:	2201      	movs	r2, #1
 8001718:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800171a:	4b08      	ldr	r3, [pc, #32]	; (800173c <FLASH_WaitForLastOperation+0x7c>)
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001726:	f000 f80b 	bl	8001740 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e000      	b.n	8001730 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
  
}  
 8001730:	4618      	mov	r0, r3
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000074 	.word	0x20000074
 800173c:	40023c00 	.word	0x40023c00

08001740 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001744:	4b27      	ldr	r3, [pc, #156]	; (80017e4 <FLASH_SetErrorCode+0xa4>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	f003 0310 	and.w	r3, r3, #16
 800174c:	2b00      	cmp	r3, #0
 800174e:	d008      	beq.n	8001762 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001750:	4b25      	ldr	r3, [pc, #148]	; (80017e8 <FLASH_SetErrorCode+0xa8>)
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	f043 0310 	orr.w	r3, r3, #16
 8001758:	4a23      	ldr	r2, [pc, #140]	; (80017e8 <FLASH_SetErrorCode+0xa8>)
 800175a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800175c:	4b21      	ldr	r3, [pc, #132]	; (80017e4 <FLASH_SetErrorCode+0xa4>)
 800175e:	2210      	movs	r2, #16
 8001760:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001762:	4b20      	ldr	r3, [pc, #128]	; (80017e4 <FLASH_SetErrorCode+0xa4>)
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	f003 0320 	and.w	r3, r3, #32
 800176a:	2b00      	cmp	r3, #0
 800176c:	d008      	beq.n	8001780 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800176e:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <FLASH_SetErrorCode+0xa8>)
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	f043 0308 	orr.w	r3, r3, #8
 8001776:	4a1c      	ldr	r2, [pc, #112]	; (80017e8 <FLASH_SetErrorCode+0xa8>)
 8001778:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800177a:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <FLASH_SetErrorCode+0xa4>)
 800177c:	2220      	movs	r2, #32
 800177e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001780:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <FLASH_SetErrorCode+0xa4>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001788:	2b00      	cmp	r3, #0
 800178a:	d008      	beq.n	800179e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800178c:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <FLASH_SetErrorCode+0xa8>)
 800178e:	69db      	ldr	r3, [r3, #28]
 8001790:	f043 0304 	orr.w	r3, r3, #4
 8001794:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <FLASH_SetErrorCode+0xa8>)
 8001796:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <FLASH_SetErrorCode+0xa4>)
 800179a:	2240      	movs	r2, #64	; 0x40
 800179c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800179e:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <FLASH_SetErrorCode+0xa4>)
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d008      	beq.n	80017bc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80017aa:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <FLASH_SetErrorCode+0xa8>)
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	f043 0302 	orr.w	r3, r3, #2
 80017b2:	4a0d      	ldr	r2, [pc, #52]	; (80017e8 <FLASH_SetErrorCode+0xa8>)
 80017b4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80017b6:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <FLASH_SetErrorCode+0xa4>)
 80017b8:	2280      	movs	r2, #128	; 0x80
 80017ba:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80017bc:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <FLASH_SetErrorCode+0xa4>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d008      	beq.n	80017da <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80017c8:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <FLASH_SetErrorCode+0xa8>)
 80017ca:	69db      	ldr	r3, [r3, #28]
 80017cc:	f043 0320 	orr.w	r3, r3, #32
 80017d0:	4a05      	ldr	r2, [pc, #20]	; (80017e8 <FLASH_SetErrorCode+0xa8>)
 80017d2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80017d4:	4b03      	ldr	r3, [pc, #12]	; (80017e4 <FLASH_SetErrorCode+0xa4>)
 80017d6:	2202      	movs	r2, #2
 80017d8:	60da      	str	r2, [r3, #12]
  }
}
 80017da:	bf00      	nop
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	40023c00 	.word	0x40023c00
 80017e8:	20000074 	.word	0x20000074

080017ec <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80017fe:	4b31      	ldr	r3, [pc, #196]	; (80018c4 <HAL_FLASHEx_Erase+0xd8>)
 8001800:	7e1b      	ldrb	r3, [r3, #24]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d101      	bne.n	800180a <HAL_FLASHEx_Erase+0x1e>
 8001806:	2302      	movs	r3, #2
 8001808:	e058      	b.n	80018bc <HAL_FLASHEx_Erase+0xd0>
 800180a:	4b2e      	ldr	r3, [pc, #184]	; (80018c4 <HAL_FLASHEx_Erase+0xd8>)
 800180c:	2201      	movs	r2, #1
 800180e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001810:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001814:	f7ff ff54 	bl	80016c0 <FLASH_WaitForLastOperation>
 8001818:	4603      	mov	r3, r0
 800181a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d148      	bne.n	80018b4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	f04f 32ff 	mov.w	r2, #4294967295
 8001828:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d115      	bne.n	800185e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	b2da      	uxtb	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	4619      	mov	r1, r3
 800183e:	4610      	mov	r0, r2
 8001840:	f000 f844 	bl	80018cc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001844:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001848:	f7ff ff3a 	bl	80016c0 <FLASH_WaitForLastOperation>
 800184c:	4603      	mov	r3, r0
 800184e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001850:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <HAL_FLASHEx_Erase+0xdc>)
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	4a1c      	ldr	r2, [pc, #112]	; (80018c8 <HAL_FLASHEx_Erase+0xdc>)
 8001856:	f023 0304 	bic.w	r3, r3, #4
 800185a:	6113      	str	r3, [r2, #16]
 800185c:	e028      	b.n	80018b0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	e01c      	b.n	80018a0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	b2db      	uxtb	r3, r3
 800186c:	4619      	mov	r1, r3
 800186e:	68b8      	ldr	r0, [r7, #8]
 8001870:	f000 f850 	bl	8001914 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001874:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001878:	f7ff ff22 	bl	80016c0 <FLASH_WaitForLastOperation>
 800187c:	4603      	mov	r3, r0
 800187e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <HAL_FLASHEx_Erase+0xdc>)
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	4a10      	ldr	r2, [pc, #64]	; (80018c8 <HAL_FLASHEx_Erase+0xdc>)
 8001886:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800188a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	68ba      	ldr	r2, [r7, #8]
 8001896:	601a      	str	r2, [r3, #0]
          break;
 8001898:	e00a      	b.n	80018b0 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	3301      	adds	r3, #1
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	4413      	add	r3, r2
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d3da      	bcc.n	8001866 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80018b0:	f000 f878 	bl	80019a4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80018b4:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <HAL_FLASHEx_Erase+0xd8>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	761a      	strb	r2, [r3, #24]

  return status;
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000074 	.word	0x20000074
 80018c8:	40023c00 	.word	0x40023c00

080018cc <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	6039      	str	r1, [r7, #0]
 80018d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80018d8:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <FLASH_MassErase+0x44>)
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	4a0c      	ldr	r2, [pc, #48]	; (8001910 <FLASH_MassErase+0x44>)
 80018de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80018e4:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <FLASH_MassErase+0x44>)
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	4a09      	ldr	r2, [pc, #36]	; (8001910 <FLASH_MassErase+0x44>)
 80018ea:	f043 0304 	orr.w	r3, r3, #4
 80018ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80018f0:	4b07      	ldr	r3, [pc, #28]	; (8001910 <FLASH_MassErase+0x44>)
 80018f2:	691a      	ldr	r2, [r3, #16]
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	021b      	lsls	r3, r3, #8
 80018f8:	4313      	orrs	r3, r2
 80018fa:	4a05      	ldr	r2, [pc, #20]	; (8001910 <FLASH_MassErase+0x44>)
 80018fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001900:	6113      	str	r3, [r2, #16]
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40023c00 	.word	0x40023c00

08001914 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001924:	78fb      	ldrb	r3, [r7, #3]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d102      	bne.n	8001930 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	e010      	b.n	8001952 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001930:	78fb      	ldrb	r3, [r7, #3]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d103      	bne.n	800193e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001936:	f44f 7380 	mov.w	r3, #256	; 0x100
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	e009      	b.n	8001952 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800193e:	78fb      	ldrb	r3, [r7, #3]
 8001940:	2b02      	cmp	r3, #2
 8001942:	d103      	bne.n	800194c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001944:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	e002      	b.n	8001952 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800194c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001950:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001952:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <FLASH_Erase_Sector+0x8c>)
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	4a12      	ldr	r2, [pc, #72]	; (80019a0 <FLASH_Erase_Sector+0x8c>)
 8001958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800195c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <FLASH_Erase_Sector+0x8c>)
 8001960:	691a      	ldr	r2, [r3, #16]
 8001962:	490f      	ldr	r1, [pc, #60]	; (80019a0 <FLASH_Erase_Sector+0x8c>)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4313      	orrs	r3, r2
 8001968:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800196a:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <FLASH_Erase_Sector+0x8c>)
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	4a0c      	ldr	r2, [pc, #48]	; (80019a0 <FLASH_Erase_Sector+0x8c>)
 8001970:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001974:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001976:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <FLASH_Erase_Sector+0x8c>)
 8001978:	691a      	ldr	r2, [r3, #16]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	4313      	orrs	r3, r2
 8001980:	4a07      	ldr	r2, [pc, #28]	; (80019a0 <FLASH_Erase_Sector+0x8c>)
 8001982:	f043 0302 	orr.w	r3, r3, #2
 8001986:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <FLASH_Erase_Sector+0x8c>)
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	4a04      	ldr	r2, [pc, #16]	; (80019a0 <FLASH_Erase_Sector+0x8c>)
 800198e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001992:	6113      	str	r3, [r2, #16]
}
 8001994:	bf00      	nop
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	40023c00 	.word	0x40023c00

080019a4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80019a8:	4b20      	ldr	r3, [pc, #128]	; (8001a2c <FLASH_FlushCaches+0x88>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d017      	beq.n	80019e4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80019b4:	4b1d      	ldr	r3, [pc, #116]	; (8001a2c <FLASH_FlushCaches+0x88>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a1c      	ldr	r2, [pc, #112]	; (8001a2c <FLASH_FlushCaches+0x88>)
 80019ba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80019be:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80019c0:	4b1a      	ldr	r3, [pc, #104]	; (8001a2c <FLASH_FlushCaches+0x88>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a19      	ldr	r2, [pc, #100]	; (8001a2c <FLASH_FlushCaches+0x88>)
 80019c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <FLASH_FlushCaches+0x88>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a16      	ldr	r2, [pc, #88]	; (8001a2c <FLASH_FlushCaches+0x88>)
 80019d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80019d6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019d8:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <FLASH_FlushCaches+0x88>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a13      	ldr	r2, [pc, #76]	; (8001a2c <FLASH_FlushCaches+0x88>)
 80019de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e2:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80019e4:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <FLASH_FlushCaches+0x88>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d017      	beq.n	8001a20 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80019f0:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <FLASH_FlushCaches+0x88>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a0d      	ldr	r2, [pc, #52]	; (8001a2c <FLASH_FlushCaches+0x88>)
 80019f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019fa:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <FLASH_FlushCaches+0x88>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <FLASH_FlushCaches+0x88>)
 8001a02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <FLASH_FlushCaches+0x88>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a07      	ldr	r2, [pc, #28]	; (8001a2c <FLASH_FlushCaches+0x88>)
 8001a0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a12:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <FLASH_FlushCaches+0x88>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a04      	ldr	r2, [pc, #16]	; (8001a2c <FLASH_FlushCaches+0x88>)
 8001a1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a1e:	6013      	str	r3, [r2, #0]
  }
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40023c00 	.word	0x40023c00

08001a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b089      	sub	sp, #36	; 0x24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
 8001a4a:	e16b      	b.n	8001d24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	f040 815a 	bne.w	8001d1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d00b      	beq.n	8001a8a <HAL_GPIO_Init+0x5a>
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d007      	beq.n	8001a8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a7e:	2b11      	cmp	r3, #17
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b12      	cmp	r3, #18
 8001a88:	d130      	bne.n	8001aec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	2203      	movs	r2, #3
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	68da      	ldr	r2, [r3, #12]
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	091b      	lsrs	r3, r3, #4
 8001ad6:	f003 0201 	and.w	r2, r3, #1
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	2203      	movs	r2, #3
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d003      	beq.n	8001b2c <HAL_GPIO_Init+0xfc>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b12      	cmp	r3, #18
 8001b2a:	d123      	bne.n	8001b74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	08da      	lsrs	r2, r3, #3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3208      	adds	r2, #8
 8001b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	220f      	movs	r2, #15
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	691a      	ldr	r2, [r3, #16]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	08da      	lsrs	r2, r3, #3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3208      	adds	r2, #8
 8001b6e:	69b9      	ldr	r1, [r7, #24]
 8001b70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	2203      	movs	r2, #3
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 0203 	and.w	r2, r3, #3
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f000 80b4 	beq.w	8001d1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	4b5f      	ldr	r3, [pc, #380]	; (8001d38 <HAL_GPIO_Init+0x308>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	4a5e      	ldr	r2, [pc, #376]	; (8001d38 <HAL_GPIO_Init+0x308>)
 8001bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bc6:	4b5c      	ldr	r3, [pc, #368]	; (8001d38 <HAL_GPIO_Init+0x308>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bd2:	4a5a      	ldr	r2, [pc, #360]	; (8001d3c <HAL_GPIO_Init+0x30c>)
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	089b      	lsrs	r3, r3, #2
 8001bd8:	3302      	adds	r3, #2
 8001bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	220f      	movs	r2, #15
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a51      	ldr	r2, [pc, #324]	; (8001d40 <HAL_GPIO_Init+0x310>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d02b      	beq.n	8001c56 <HAL_GPIO_Init+0x226>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a50      	ldr	r2, [pc, #320]	; (8001d44 <HAL_GPIO_Init+0x314>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d025      	beq.n	8001c52 <HAL_GPIO_Init+0x222>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a4f      	ldr	r2, [pc, #316]	; (8001d48 <HAL_GPIO_Init+0x318>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d01f      	beq.n	8001c4e <HAL_GPIO_Init+0x21e>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a4e      	ldr	r2, [pc, #312]	; (8001d4c <HAL_GPIO_Init+0x31c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d019      	beq.n	8001c4a <HAL_GPIO_Init+0x21a>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a4d      	ldr	r2, [pc, #308]	; (8001d50 <HAL_GPIO_Init+0x320>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d013      	beq.n	8001c46 <HAL_GPIO_Init+0x216>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a4c      	ldr	r2, [pc, #304]	; (8001d54 <HAL_GPIO_Init+0x324>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d00d      	beq.n	8001c42 <HAL_GPIO_Init+0x212>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a4b      	ldr	r2, [pc, #300]	; (8001d58 <HAL_GPIO_Init+0x328>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d007      	beq.n	8001c3e <HAL_GPIO_Init+0x20e>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a4a      	ldr	r2, [pc, #296]	; (8001d5c <HAL_GPIO_Init+0x32c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d101      	bne.n	8001c3a <HAL_GPIO_Init+0x20a>
 8001c36:	2307      	movs	r3, #7
 8001c38:	e00e      	b.n	8001c58 <HAL_GPIO_Init+0x228>
 8001c3a:	2308      	movs	r3, #8
 8001c3c:	e00c      	b.n	8001c58 <HAL_GPIO_Init+0x228>
 8001c3e:	2306      	movs	r3, #6
 8001c40:	e00a      	b.n	8001c58 <HAL_GPIO_Init+0x228>
 8001c42:	2305      	movs	r3, #5
 8001c44:	e008      	b.n	8001c58 <HAL_GPIO_Init+0x228>
 8001c46:	2304      	movs	r3, #4
 8001c48:	e006      	b.n	8001c58 <HAL_GPIO_Init+0x228>
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e004      	b.n	8001c58 <HAL_GPIO_Init+0x228>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e002      	b.n	8001c58 <HAL_GPIO_Init+0x228>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <HAL_GPIO_Init+0x228>
 8001c56:	2300      	movs	r3, #0
 8001c58:	69fa      	ldr	r2, [r7, #28]
 8001c5a:	f002 0203 	and.w	r2, r2, #3
 8001c5e:	0092      	lsls	r2, r2, #2
 8001c60:	4093      	lsls	r3, r2
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c68:	4934      	ldr	r1, [pc, #208]	; (8001d3c <HAL_GPIO_Init+0x30c>)
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	089b      	lsrs	r3, r3, #2
 8001c6e:	3302      	adds	r3, #2
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c76:	4b3a      	ldr	r3, [pc, #232]	; (8001d60 <HAL_GPIO_Init+0x330>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c9a:	4a31      	ldr	r2, [pc, #196]	; (8001d60 <HAL_GPIO_Init+0x330>)
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ca0:	4b2f      	ldr	r3, [pc, #188]	; (8001d60 <HAL_GPIO_Init+0x330>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cc4:	4a26      	ldr	r2, [pc, #152]	; (8001d60 <HAL_GPIO_Init+0x330>)
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cca:	4b25      	ldr	r3, [pc, #148]	; (8001d60 <HAL_GPIO_Init+0x330>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cee:	4a1c      	ldr	r2, [pc, #112]	; (8001d60 <HAL_GPIO_Init+0x330>)
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cf4:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <HAL_GPIO_Init+0x330>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d18:	4a11      	ldr	r2, [pc, #68]	; (8001d60 <HAL_GPIO_Init+0x330>)
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3301      	adds	r3, #1
 8001d22:	61fb      	str	r3, [r7, #28]
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	2b0f      	cmp	r3, #15
 8001d28:	f67f ae90 	bls.w	8001a4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	3724      	adds	r7, #36	; 0x24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40013800 	.word	0x40013800
 8001d40:	40020000 	.word	0x40020000
 8001d44:	40020400 	.word	0x40020400
 8001d48:	40020800 	.word	0x40020800
 8001d4c:	40020c00 	.word	0x40020c00
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40021400 	.word	0x40021400
 8001d58:	40021800 	.word	0x40021800
 8001d5c:	40021c00 	.word	0x40021c00
 8001d60:	40013c00 	.word	0x40013c00

08001d64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691a      	ldr	r2, [r3, #16]
 8001d74:	887b      	ldrh	r3, [r7, #2]
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d002      	beq.n	8001d82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	73fb      	strb	r3, [r7, #15]
 8001d80:	e001      	b.n	8001d86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d82:	2300      	movs	r3, #0
 8001d84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	807b      	strh	r3, [r7, #2]
 8001da0:	4613      	mov	r3, r2
 8001da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da4:	787b      	ldrb	r3, [r7, #1]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001daa:	887a      	ldrh	r2, [r7, #2]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001db0:	e003      	b.n	8001dba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001db2:	887b      	ldrh	r3, [r7, #2]
 8001db4:	041a      	lsls	r2, r3, #16
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	619a      	str	r2, [r3, #24]
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
	...

08001dc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e25b      	b.n	8002292 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d075      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001de6:	4ba3      	ldr	r3, [pc, #652]	; (8002074 <HAL_RCC_OscConfig+0x2ac>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 030c 	and.w	r3, r3, #12
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d00c      	beq.n	8001e0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001df2:	4ba0      	ldr	r3, [pc, #640]	; (8002074 <HAL_RCC_OscConfig+0x2ac>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dfa:	2b08      	cmp	r3, #8
 8001dfc:	d112      	bne.n	8001e24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dfe:	4b9d      	ldr	r3, [pc, #628]	; (8002074 <HAL_RCC_OscConfig+0x2ac>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e0a:	d10b      	bne.n	8001e24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0c:	4b99      	ldr	r3, [pc, #612]	; (8002074 <HAL_RCC_OscConfig+0x2ac>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d05b      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x108>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d157      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e236      	b.n	8002292 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e2c:	d106      	bne.n	8001e3c <HAL_RCC_OscConfig+0x74>
 8001e2e:	4b91      	ldr	r3, [pc, #580]	; (8002074 <HAL_RCC_OscConfig+0x2ac>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a90      	ldr	r2, [pc, #576]	; (8002074 <HAL_RCC_OscConfig+0x2ac>)
 8001e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	e01d      	b.n	8001e78 <HAL_RCC_OscConfig+0xb0>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e44:	d10c      	bne.n	8001e60 <HAL_RCC_OscConfig+0x98>
 8001e46:	4b8b      	ldr	r3, [pc, #556]	; (8002074 <HAL_RCC_OscConfig+0x2ac>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a8a      	ldr	r2, [pc, #552]	; (8002074 <HAL_RCC_OscConfig+0x2ac>)
 8001e4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	4b88      	ldr	r3, [pc, #544]	; (8002074 <HAL_RCC_OscConfig+0x2ac>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a87      	ldr	r2, [pc, #540]	; (8002074 <HAL_RCC_OscConfig+0x2ac>)
 8001e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	e00b      	b.n	8001e78 <HAL_RCC_OscConfig+0xb0>
 8001e60:	4b84      	ldr	r3, [pc, #528]	; (8002074 <HAL_RCC_OscConfig+0x2ac>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a83      	ldr	r2, [pc, #524]	; (8002074 <HAL_RCC_OscConfig+0x2ac>)
 8001e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	4b81      	ldr	r3, [pc, #516]	; (8002074 <HAL_RCC_OscConfig+0x2ac>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a80      	ldr	r2, [pc, #512]	; (8002074 <HAL_RCC_OscConfig+0x2ac>)
 8001e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d013      	beq.n	8001ea8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e80:	f7ff fa92 	bl	80013a8 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e88:	f7ff fa8e 	bl	80013a8 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b64      	cmp	r3, #100	; 0x64
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e1fb      	b.n	8002292 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9a:	4b76      	ldr	r3, [pc, #472]	; (8002074 <HAL_RCC_OscConfig+0x2ac>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0f0      	beq.n	8001e88 <HAL_RCC_OscConfig+0xc0>
 8001ea6:	e014      	b.n	8001ed2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea8:	f7ff fa7e 	bl	80013a8 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eb0:	f7ff fa7a 	bl	80013a8 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b64      	cmp	r3, #100	; 0x64
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e1e7      	b.n	8002292 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ec2:	4b6c      	ldr	r3, [pc, #432]	; (8002074 <HAL_RCC_OscConfig+0x2ac>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0xe8>
 8001ece:	e000      	b.n	8001ed2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d063      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ede:	4b65      	ldr	r3, [pc, #404]	; (8002074 <HAL_RCC_OscConfig+0x2ac>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 030c 	and.w	r3, r3, #12
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00b      	beq.n	8001f02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eea:	4b62      	ldr	r3, [pc, #392]	; (8002074 <HAL_RCC_OscConfig+0x2ac>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ef2:	2b08      	cmp	r3, #8
 8001ef4:	d11c      	bne.n	8001f30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ef6:	4b5f      	ldr	r3, [pc, #380]	; (8002074 <HAL_RCC_OscConfig+0x2ac>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d116      	bne.n	8001f30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f02:	4b5c      	ldr	r3, [pc, #368]	; (8002074 <HAL_RCC_OscConfig+0x2ac>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d005      	beq.n	8001f1a <HAL_RCC_OscConfig+0x152>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d001      	beq.n	8001f1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e1bb      	b.n	8002292 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1a:	4b56      	ldr	r3, [pc, #344]	; (8002074 <HAL_RCC_OscConfig+0x2ac>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	4952      	ldr	r1, [pc, #328]	; (8002074 <HAL_RCC_OscConfig+0x2ac>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2e:	e03a      	b.n	8001fa6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d020      	beq.n	8001f7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f38:	4b4f      	ldr	r3, [pc, #316]	; (8002078 <HAL_RCC_OscConfig+0x2b0>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3e:	f7ff fa33 	bl	80013a8 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f46:	f7ff fa2f 	bl	80013a8 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e19c      	b.n	8002292 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f58:	4b46      	ldr	r3, [pc, #280]	; (8002074 <HAL_RCC_OscConfig+0x2ac>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0f0      	beq.n	8001f46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f64:	4b43      	ldr	r3, [pc, #268]	; (8002074 <HAL_RCC_OscConfig+0x2ac>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4940      	ldr	r1, [pc, #256]	; (8002074 <HAL_RCC_OscConfig+0x2ac>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	600b      	str	r3, [r1, #0]
 8001f78:	e015      	b.n	8001fa6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f7a:	4b3f      	ldr	r3, [pc, #252]	; (8002078 <HAL_RCC_OscConfig+0x2b0>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f80:	f7ff fa12 	bl	80013a8 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f88:	f7ff fa0e 	bl	80013a8 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e17b      	b.n	8002292 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9a:	4b36      	ldr	r3, [pc, #216]	; (8002074 <HAL_RCC_OscConfig+0x2ac>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d030      	beq.n	8002014 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d016      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fba:	4b30      	ldr	r3, [pc, #192]	; (800207c <HAL_RCC_OscConfig+0x2b4>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc0:	f7ff f9f2 	bl	80013a8 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fc8:	f7ff f9ee 	bl	80013a8 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e15b      	b.n	8002292 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fda:	4b26      	ldr	r3, [pc, #152]	; (8002074 <HAL_RCC_OscConfig+0x2ac>)
 8001fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0f0      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x200>
 8001fe6:	e015      	b.n	8002014 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fe8:	4b24      	ldr	r3, [pc, #144]	; (800207c <HAL_RCC_OscConfig+0x2b4>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fee:	f7ff f9db 	bl	80013a8 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ff6:	f7ff f9d7 	bl	80013a8 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e144      	b.n	8002292 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002008:	4b1a      	ldr	r3, [pc, #104]	; (8002074 <HAL_RCC_OscConfig+0x2ac>)
 800200a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1f0      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 80a0 	beq.w	8002162 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002022:	2300      	movs	r3, #0
 8002024:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002026:	4b13      	ldr	r3, [pc, #76]	; (8002074 <HAL_RCC_OscConfig+0x2ac>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10f      	bne.n	8002052 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <HAL_RCC_OscConfig+0x2ac>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	4a0e      	ldr	r2, [pc, #56]	; (8002074 <HAL_RCC_OscConfig+0x2ac>)
 800203c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002040:	6413      	str	r3, [r2, #64]	; 0x40
 8002042:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <HAL_RCC_OscConfig+0x2ac>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800204e:	2301      	movs	r3, #1
 8002050:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002052:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <HAL_RCC_OscConfig+0x2b8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205a:	2b00      	cmp	r3, #0
 800205c:	d121      	bne.n	80020a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800205e:	4b08      	ldr	r3, [pc, #32]	; (8002080 <HAL_RCC_OscConfig+0x2b8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a07      	ldr	r2, [pc, #28]	; (8002080 <HAL_RCC_OscConfig+0x2b8>)
 8002064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002068:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800206a:	f7ff f99d 	bl	80013a8 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002070:	e011      	b.n	8002096 <HAL_RCC_OscConfig+0x2ce>
 8002072:	bf00      	nop
 8002074:	40023800 	.word	0x40023800
 8002078:	42470000 	.word	0x42470000
 800207c:	42470e80 	.word	0x42470e80
 8002080:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002084:	f7ff f990 	bl	80013a8 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e0fd      	b.n	8002292 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002096:	4b81      	ldr	r3, [pc, #516]	; (800229c <HAL_RCC_OscConfig+0x4d4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f0      	beq.n	8002084 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d106      	bne.n	80020b8 <HAL_RCC_OscConfig+0x2f0>
 80020aa:	4b7d      	ldr	r3, [pc, #500]	; (80022a0 <HAL_RCC_OscConfig+0x4d8>)
 80020ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ae:	4a7c      	ldr	r2, [pc, #496]	; (80022a0 <HAL_RCC_OscConfig+0x4d8>)
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	6713      	str	r3, [r2, #112]	; 0x70
 80020b6:	e01c      	b.n	80020f2 <HAL_RCC_OscConfig+0x32a>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b05      	cmp	r3, #5
 80020be:	d10c      	bne.n	80020da <HAL_RCC_OscConfig+0x312>
 80020c0:	4b77      	ldr	r3, [pc, #476]	; (80022a0 <HAL_RCC_OscConfig+0x4d8>)
 80020c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c4:	4a76      	ldr	r2, [pc, #472]	; (80022a0 <HAL_RCC_OscConfig+0x4d8>)
 80020c6:	f043 0304 	orr.w	r3, r3, #4
 80020ca:	6713      	str	r3, [r2, #112]	; 0x70
 80020cc:	4b74      	ldr	r3, [pc, #464]	; (80022a0 <HAL_RCC_OscConfig+0x4d8>)
 80020ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d0:	4a73      	ldr	r2, [pc, #460]	; (80022a0 <HAL_RCC_OscConfig+0x4d8>)
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	6713      	str	r3, [r2, #112]	; 0x70
 80020d8:	e00b      	b.n	80020f2 <HAL_RCC_OscConfig+0x32a>
 80020da:	4b71      	ldr	r3, [pc, #452]	; (80022a0 <HAL_RCC_OscConfig+0x4d8>)
 80020dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020de:	4a70      	ldr	r2, [pc, #448]	; (80022a0 <HAL_RCC_OscConfig+0x4d8>)
 80020e0:	f023 0301 	bic.w	r3, r3, #1
 80020e4:	6713      	str	r3, [r2, #112]	; 0x70
 80020e6:	4b6e      	ldr	r3, [pc, #440]	; (80022a0 <HAL_RCC_OscConfig+0x4d8>)
 80020e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ea:	4a6d      	ldr	r2, [pc, #436]	; (80022a0 <HAL_RCC_OscConfig+0x4d8>)
 80020ec:	f023 0304 	bic.w	r3, r3, #4
 80020f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d015      	beq.n	8002126 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fa:	f7ff f955 	bl	80013a8 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002100:	e00a      	b.n	8002118 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002102:	f7ff f951 	bl	80013a8 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002110:	4293      	cmp	r3, r2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e0bc      	b.n	8002292 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002118:	4b61      	ldr	r3, [pc, #388]	; (80022a0 <HAL_RCC_OscConfig+0x4d8>)
 800211a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0ee      	beq.n	8002102 <HAL_RCC_OscConfig+0x33a>
 8002124:	e014      	b.n	8002150 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002126:	f7ff f93f 	bl	80013a8 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800212c:	e00a      	b.n	8002144 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800212e:	f7ff f93b 	bl	80013a8 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	f241 3288 	movw	r2, #5000	; 0x1388
 800213c:	4293      	cmp	r3, r2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e0a6      	b.n	8002292 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002144:	4b56      	ldr	r3, [pc, #344]	; (80022a0 <HAL_RCC_OscConfig+0x4d8>)
 8002146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1ee      	bne.n	800212e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002150:	7dfb      	ldrb	r3, [r7, #23]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d105      	bne.n	8002162 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002156:	4b52      	ldr	r3, [pc, #328]	; (80022a0 <HAL_RCC_OscConfig+0x4d8>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	4a51      	ldr	r2, [pc, #324]	; (80022a0 <HAL_RCC_OscConfig+0x4d8>)
 800215c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002160:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 8092 	beq.w	8002290 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800216c:	4b4c      	ldr	r3, [pc, #304]	; (80022a0 <HAL_RCC_OscConfig+0x4d8>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 030c 	and.w	r3, r3, #12
 8002174:	2b08      	cmp	r3, #8
 8002176:	d05c      	beq.n	8002232 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	2b02      	cmp	r3, #2
 800217e:	d141      	bne.n	8002204 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002180:	4b48      	ldr	r3, [pc, #288]	; (80022a4 <HAL_RCC_OscConfig+0x4dc>)
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002186:	f7ff f90f 	bl	80013a8 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800218e:	f7ff f90b 	bl	80013a8 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e078      	b.n	8002292 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a0:	4b3f      	ldr	r3, [pc, #252]	; (80022a0 <HAL_RCC_OscConfig+0x4d8>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1f0      	bne.n	800218e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69da      	ldr	r2, [r3, #28]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	431a      	orrs	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	019b      	lsls	r3, r3, #6
 80021bc:	431a      	orrs	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c2:	085b      	lsrs	r3, r3, #1
 80021c4:	3b01      	subs	r3, #1
 80021c6:	041b      	lsls	r3, r3, #16
 80021c8:	431a      	orrs	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ce:	061b      	lsls	r3, r3, #24
 80021d0:	4933      	ldr	r1, [pc, #204]	; (80022a0 <HAL_RCC_OscConfig+0x4d8>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021d6:	4b33      	ldr	r3, [pc, #204]	; (80022a4 <HAL_RCC_OscConfig+0x4dc>)
 80021d8:	2201      	movs	r2, #1
 80021da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021dc:	f7ff f8e4 	bl	80013a8 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e4:	f7ff f8e0 	bl	80013a8 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e04d      	b.n	8002292 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f6:	4b2a      	ldr	r3, [pc, #168]	; (80022a0 <HAL_RCC_OscConfig+0x4d8>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0f0      	beq.n	80021e4 <HAL_RCC_OscConfig+0x41c>
 8002202:	e045      	b.n	8002290 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002204:	4b27      	ldr	r3, [pc, #156]	; (80022a4 <HAL_RCC_OscConfig+0x4dc>)
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220a:	f7ff f8cd 	bl	80013a8 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002212:	f7ff f8c9 	bl	80013a8 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e036      	b.n	8002292 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002224:	4b1e      	ldr	r3, [pc, #120]	; (80022a0 <HAL_RCC_OscConfig+0x4d8>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f0      	bne.n	8002212 <HAL_RCC_OscConfig+0x44a>
 8002230:	e02e      	b.n	8002290 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d101      	bne.n	800223e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e029      	b.n	8002292 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800223e:	4b18      	ldr	r3, [pc, #96]	; (80022a0 <HAL_RCC_OscConfig+0x4d8>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	429a      	cmp	r2, r3
 8002250:	d11c      	bne.n	800228c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800225c:	429a      	cmp	r2, r3
 800225e:	d115      	bne.n	800228c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002266:	4013      	ands	r3, r2
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800226c:	4293      	cmp	r3, r2
 800226e:	d10d      	bne.n	800228c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800227a:	429a      	cmp	r2, r3
 800227c:	d106      	bne.n	800228c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002288:	429a      	cmp	r2, r3
 800228a:	d001      	beq.n	8002290 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e000      	b.n	8002292 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40007000 	.word	0x40007000
 80022a0:	40023800 	.word	0x40023800
 80022a4:	42470060 	.word	0x42470060

080022a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0cc      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022bc:	4b68      	ldr	r3, [pc, #416]	; (8002460 <HAL_RCC_ClockConfig+0x1b8>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 030f 	and.w	r3, r3, #15
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d90c      	bls.n	80022e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ca:	4b65      	ldr	r3, [pc, #404]	; (8002460 <HAL_RCC_ClockConfig+0x1b8>)
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d2:	4b63      	ldr	r3, [pc, #396]	; (8002460 <HAL_RCC_ClockConfig+0x1b8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d001      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0b8      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d020      	beq.n	8002332 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d005      	beq.n	8002308 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022fc:	4b59      	ldr	r3, [pc, #356]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	4a58      	ldr	r2, [pc, #352]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002302:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002306:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0308 	and.w	r3, r3, #8
 8002310:	2b00      	cmp	r3, #0
 8002312:	d005      	beq.n	8002320 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002314:	4b53      	ldr	r3, [pc, #332]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	4a52      	ldr	r2, [pc, #328]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 800231a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800231e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002320:	4b50      	ldr	r3, [pc, #320]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	494d      	ldr	r1, [pc, #308]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	4313      	orrs	r3, r2
 8002330:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d044      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d107      	bne.n	8002356 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002346:	4b47      	ldr	r3, [pc, #284]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d119      	bne.n	8002386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e07f      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b02      	cmp	r3, #2
 800235c:	d003      	beq.n	8002366 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002362:	2b03      	cmp	r3, #3
 8002364:	d107      	bne.n	8002376 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002366:	4b3f      	ldr	r3, [pc, #252]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d109      	bne.n	8002386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e06f      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002376:	4b3b      	ldr	r3, [pc, #236]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e067      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002386:	4b37      	ldr	r3, [pc, #220]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f023 0203 	bic.w	r2, r3, #3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	4934      	ldr	r1, [pc, #208]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002394:	4313      	orrs	r3, r2
 8002396:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002398:	f7ff f806 	bl	80013a8 <HAL_GetTick>
 800239c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239e:	e00a      	b.n	80023b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a0:	f7ff f802 	bl	80013a8 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e04f      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b6:	4b2b      	ldr	r3, [pc, #172]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 020c 	and.w	r2, r3, #12
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d1eb      	bne.n	80023a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023c8:	4b25      	ldr	r3, [pc, #148]	; (8002460 <HAL_RCC_ClockConfig+0x1b8>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 030f 	and.w	r3, r3, #15
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d20c      	bcs.n	80023f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d6:	4b22      	ldr	r3, [pc, #136]	; (8002460 <HAL_RCC_ClockConfig+0x1b8>)
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023de:	4b20      	ldr	r3, [pc, #128]	; (8002460 <HAL_RCC_ClockConfig+0x1b8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d001      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e032      	b.n	8002456 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d008      	beq.n	800240e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023fc:	4b19      	ldr	r3, [pc, #100]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	4916      	ldr	r1, [pc, #88]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	4313      	orrs	r3, r2
 800240c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	2b00      	cmp	r3, #0
 8002418:	d009      	beq.n	800242e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800241a:	4b12      	ldr	r3, [pc, #72]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	490e      	ldr	r1, [pc, #56]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	4313      	orrs	r3, r2
 800242c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800242e:	f000 f821 	bl	8002474 <HAL_RCC_GetSysClockFreq>
 8002432:	4601      	mov	r1, r0
 8002434:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	091b      	lsrs	r3, r3, #4
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <HAL_RCC_ClockConfig+0x1c0>)
 8002440:	5cd3      	ldrb	r3, [r2, r3]
 8002442:	fa21 f303 	lsr.w	r3, r1, r3
 8002446:	4a09      	ldr	r2, [pc, #36]	; (800246c <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800244a:	4b09      	ldr	r3, [pc, #36]	; (8002470 <HAL_RCC_ClockConfig+0x1c8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe ff66 	bl	8001320 <HAL_InitTick>

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40023c00 	.word	0x40023c00
 8002464:	40023800 	.word	0x40023800
 8002468:	080031c4 	.word	0x080031c4
 800246c:	20000000 	.word	0x20000000
 8002470:	20000004 	.word	0x20000004

08002474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800247a:	2300      	movs	r3, #0
 800247c:	607b      	str	r3, [r7, #4]
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	2300      	movs	r3, #0
 8002484:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002486:	2300      	movs	r3, #0
 8002488:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800248a:	4b63      	ldr	r3, [pc, #396]	; (8002618 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 030c 	and.w	r3, r3, #12
 8002492:	2b04      	cmp	r3, #4
 8002494:	d007      	beq.n	80024a6 <HAL_RCC_GetSysClockFreq+0x32>
 8002496:	2b08      	cmp	r3, #8
 8002498:	d008      	beq.n	80024ac <HAL_RCC_GetSysClockFreq+0x38>
 800249a:	2b00      	cmp	r3, #0
 800249c:	f040 80b4 	bne.w	8002608 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024a0:	4b5e      	ldr	r3, [pc, #376]	; (800261c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80024a2:	60bb      	str	r3, [r7, #8]
       break;
 80024a4:	e0b3      	b.n	800260e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024a6:	4b5e      	ldr	r3, [pc, #376]	; (8002620 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80024a8:	60bb      	str	r3, [r7, #8]
      break;
 80024aa:	e0b0      	b.n	800260e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024ac:	4b5a      	ldr	r3, [pc, #360]	; (8002618 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024b4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024b6:	4b58      	ldr	r3, [pc, #352]	; (8002618 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d04a      	beq.n	8002558 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024c2:	4b55      	ldr	r3, [pc, #340]	; (8002618 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	099b      	lsrs	r3, r3, #6
 80024c8:	f04f 0400 	mov.w	r4, #0
 80024cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80024d0:	f04f 0200 	mov.w	r2, #0
 80024d4:	ea03 0501 	and.w	r5, r3, r1
 80024d8:	ea04 0602 	and.w	r6, r4, r2
 80024dc:	4629      	mov	r1, r5
 80024de:	4632      	mov	r2, r6
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	f04f 0400 	mov.w	r4, #0
 80024e8:	0154      	lsls	r4, r2, #5
 80024ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80024ee:	014b      	lsls	r3, r1, #5
 80024f0:	4619      	mov	r1, r3
 80024f2:	4622      	mov	r2, r4
 80024f4:	1b49      	subs	r1, r1, r5
 80024f6:	eb62 0206 	sbc.w	r2, r2, r6
 80024fa:	f04f 0300 	mov.w	r3, #0
 80024fe:	f04f 0400 	mov.w	r4, #0
 8002502:	0194      	lsls	r4, r2, #6
 8002504:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002508:	018b      	lsls	r3, r1, #6
 800250a:	1a5b      	subs	r3, r3, r1
 800250c:	eb64 0402 	sbc.w	r4, r4, r2
 8002510:	f04f 0100 	mov.w	r1, #0
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	00e2      	lsls	r2, r4, #3
 800251a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800251e:	00d9      	lsls	r1, r3, #3
 8002520:	460b      	mov	r3, r1
 8002522:	4614      	mov	r4, r2
 8002524:	195b      	adds	r3, r3, r5
 8002526:	eb44 0406 	adc.w	r4, r4, r6
 800252a:	f04f 0100 	mov.w	r1, #0
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	0262      	lsls	r2, r4, #9
 8002534:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002538:	0259      	lsls	r1, r3, #9
 800253a:	460b      	mov	r3, r1
 800253c:	4614      	mov	r4, r2
 800253e:	4618      	mov	r0, r3
 8002540:	4621      	mov	r1, r4
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f04f 0400 	mov.w	r4, #0
 8002548:	461a      	mov	r2, r3
 800254a:	4623      	mov	r3, r4
 800254c:	f7fd fe3c 	bl	80001c8 <__aeabi_uldivmod>
 8002550:	4603      	mov	r3, r0
 8002552:	460c      	mov	r4, r1
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	e049      	b.n	80025ec <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002558:	4b2f      	ldr	r3, [pc, #188]	; (8002618 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	099b      	lsrs	r3, r3, #6
 800255e:	f04f 0400 	mov.w	r4, #0
 8002562:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	ea03 0501 	and.w	r5, r3, r1
 800256e:	ea04 0602 	and.w	r6, r4, r2
 8002572:	4629      	mov	r1, r5
 8002574:	4632      	mov	r2, r6
 8002576:	f04f 0300 	mov.w	r3, #0
 800257a:	f04f 0400 	mov.w	r4, #0
 800257e:	0154      	lsls	r4, r2, #5
 8002580:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002584:	014b      	lsls	r3, r1, #5
 8002586:	4619      	mov	r1, r3
 8002588:	4622      	mov	r2, r4
 800258a:	1b49      	subs	r1, r1, r5
 800258c:	eb62 0206 	sbc.w	r2, r2, r6
 8002590:	f04f 0300 	mov.w	r3, #0
 8002594:	f04f 0400 	mov.w	r4, #0
 8002598:	0194      	lsls	r4, r2, #6
 800259a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800259e:	018b      	lsls	r3, r1, #6
 80025a0:	1a5b      	subs	r3, r3, r1
 80025a2:	eb64 0402 	sbc.w	r4, r4, r2
 80025a6:	f04f 0100 	mov.w	r1, #0
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	00e2      	lsls	r2, r4, #3
 80025b0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80025b4:	00d9      	lsls	r1, r3, #3
 80025b6:	460b      	mov	r3, r1
 80025b8:	4614      	mov	r4, r2
 80025ba:	195b      	adds	r3, r3, r5
 80025bc:	eb44 0406 	adc.w	r4, r4, r6
 80025c0:	f04f 0100 	mov.w	r1, #0
 80025c4:	f04f 0200 	mov.w	r2, #0
 80025c8:	02a2      	lsls	r2, r4, #10
 80025ca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80025ce:	0299      	lsls	r1, r3, #10
 80025d0:	460b      	mov	r3, r1
 80025d2:	4614      	mov	r4, r2
 80025d4:	4618      	mov	r0, r3
 80025d6:	4621      	mov	r1, r4
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f04f 0400 	mov.w	r4, #0
 80025de:	461a      	mov	r2, r3
 80025e0:	4623      	mov	r3, r4
 80025e2:	f7fd fdf1 	bl	80001c8 <__aeabi_uldivmod>
 80025e6:	4603      	mov	r3, r0
 80025e8:	460c      	mov	r4, r1
 80025ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025ec:	4b0a      	ldr	r3, [pc, #40]	; (8002618 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	0c1b      	lsrs	r3, r3, #16
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	3301      	adds	r3, #1
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	fbb2 f3f3 	udiv	r3, r2, r3
 8002604:	60bb      	str	r3, [r7, #8]
      break;
 8002606:	e002      	b.n	800260e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002608:	4b04      	ldr	r3, [pc, #16]	; (800261c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800260a:	60bb      	str	r3, [r7, #8]
      break;
 800260c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800260e:	68bb      	ldr	r3, [r7, #8]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002618:	40023800 	.word	0x40023800
 800261c:	00f42400 	.word	0x00f42400
 8002620:	007a1200 	.word	0x007a1200

08002624 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002628:	4b03      	ldr	r3, [pc, #12]	; (8002638 <HAL_RCC_GetHCLKFreq+0x14>)
 800262a:	681b      	ldr	r3, [r3, #0]
}
 800262c:	4618      	mov	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	20000000 	.word	0x20000000

0800263c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002640:	f7ff fff0 	bl	8002624 <HAL_RCC_GetHCLKFreq>
 8002644:	4601      	mov	r1, r0
 8002646:	4b05      	ldr	r3, [pc, #20]	; (800265c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	0a9b      	lsrs	r3, r3, #10
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	4a03      	ldr	r2, [pc, #12]	; (8002660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002652:	5cd3      	ldrb	r3, [r2, r3]
 8002654:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002658:	4618      	mov	r0, r3
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40023800 	.word	0x40023800
 8002660:	080031d4 	.word	0x080031d4

08002664 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002668:	f7ff ffdc 	bl	8002624 <HAL_RCC_GetHCLKFreq>
 800266c:	4601      	mov	r1, r0
 800266e:	4b05      	ldr	r3, [pc, #20]	; (8002684 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	0b5b      	lsrs	r3, r3, #13
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	4a03      	ldr	r2, [pc, #12]	; (8002688 <HAL_RCC_GetPCLK2Freq+0x24>)
 800267a:	5cd3      	ldrb	r3, [r2, r3]
 800267c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002680:	4618      	mov	r0, r3
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40023800 	.word	0x40023800
 8002688:	080031d4 	.word	0x080031d4

0800268c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e03f      	b.n	800271e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d106      	bne.n	80026b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7fe fd5c 	bl	8001170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2224      	movs	r2, #36	; 0x24
 80026bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f9b1 	bl	8002a38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	691a      	ldr	r2, [r3, #16]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695a      	ldr	r2, [r3, #20]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002704:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2220      	movs	r2, #32
 8002710:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2220      	movs	r2, #32
 8002718:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b088      	sub	sp, #32
 800272a:	af02      	add	r7, sp, #8
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	603b      	str	r3, [r7, #0]
 8002732:	4613      	mov	r3, r2
 8002734:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b20      	cmp	r3, #32
 8002744:	f040 8083 	bne.w	800284e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d002      	beq.n	8002754 <HAL_UART_Transmit+0x2e>
 800274e:	88fb      	ldrh	r3, [r7, #6]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e07b      	b.n	8002850 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800275e:	2b01      	cmp	r3, #1
 8002760:	d101      	bne.n	8002766 <HAL_UART_Transmit+0x40>
 8002762:	2302      	movs	r3, #2
 8002764:	e074      	b.n	8002850 <HAL_UART_Transmit+0x12a>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2221      	movs	r2, #33	; 0x21
 8002778:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800277c:	f7fe fe14 	bl	80013a8 <HAL_GetTick>
 8002780:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	88fa      	ldrh	r2, [r7, #6]
 8002786:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	88fa      	ldrh	r2, [r7, #6]
 800278c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002796:	e042      	b.n	800281e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800279c:	b29b      	uxth	r3, r3
 800279e:	3b01      	subs	r3, #1
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ae:	d122      	bne.n	80027f6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	2200      	movs	r2, #0
 80027b8:	2180      	movs	r1, #128	; 0x80
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 f8f2 	bl	80029a4 <UART_WaitOnFlagUntilTimeout>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e042      	b.n	8002850 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027dc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d103      	bne.n	80027ee <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	3302      	adds	r3, #2
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	e017      	b.n	800281e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	3301      	adds	r3, #1
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	e013      	b.n	800281e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	2200      	movs	r2, #0
 80027fe:	2180      	movs	r1, #128	; 0x80
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 f8cf 	bl	80029a4 <UART_WaitOnFlagUntilTimeout>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e01f      	b.n	8002850 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	1c5a      	adds	r2, r3, #1
 8002814:	60ba      	str	r2, [r7, #8]
 8002816:	781a      	ldrb	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002822:	b29b      	uxth	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1b7      	bne.n	8002798 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	2200      	movs	r2, #0
 8002830:	2140      	movs	r1, #64	; 0x40
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 f8b6 	bl	80029a4 <UART_WaitOnFlagUntilTimeout>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e006      	b.n	8002850 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2220      	movs	r2, #32
 8002846:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	e000      	b.n	8002850 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800284e:	2302      	movs	r3, #2
  }
}
 8002850:	4618      	mov	r0, r3
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b088      	sub	sp, #32
 800285c:	af02      	add	r7, sp, #8
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	4613      	mov	r3, r2
 8002866:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b20      	cmp	r3, #32
 8002876:	f040 8090 	bne.w	800299a <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d002      	beq.n	8002886 <HAL_UART_Receive+0x2e>
 8002880:	88fb      	ldrh	r3, [r7, #6]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e088      	b.n	800299c <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_UART_Receive+0x40>
 8002894:	2302      	movs	r3, #2
 8002896:	e081      	b.n	800299c <HAL_UART_Receive+0x144>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2222      	movs	r2, #34	; 0x22
 80028aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80028ae:	f7fe fd7b 	bl	80013a8 <HAL_GetTick>
 80028b2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	88fa      	ldrh	r2, [r7, #6]
 80028b8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	88fa      	ldrh	r2, [r7, #6]
 80028be:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80028c8:	e05c      	b.n	8002984 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e0:	d12b      	bne.n	800293a <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	2200      	movs	r2, #0
 80028ea:	2120      	movs	r1, #32
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 f859 	bl	80029a4 <UART_WaitOnFlagUntilTimeout>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e04f      	b.n	800299c <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10c      	bne.n	8002922 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	b29b      	uxth	r3, r3
 8002910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002914:	b29a      	uxth	r2, r3
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	3302      	adds	r3, #2
 800291e:	60bb      	str	r3, [r7, #8]
 8002920:	e030      	b.n	8002984 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	b29b      	uxth	r3, r3
 800292a:	b2db      	uxtb	r3, r3
 800292c:	b29a      	uxth	r2, r3
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	3301      	adds	r3, #1
 8002936:	60bb      	str	r3, [r7, #8]
 8002938:	e024      	b.n	8002984 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2200      	movs	r2, #0
 8002942:	2120      	movs	r1, #32
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 f82d 	bl	80029a4 <UART_WaitOnFlagUntilTimeout>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e023      	b.n	800299c <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d108      	bne.n	800296e <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6859      	ldr	r1, [r3, #4]
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	1c5a      	adds	r2, r3, #1
 8002966:	60ba      	str	r2, [r7, #8]
 8002968:	b2ca      	uxtb	r2, r1
 800296a:	701a      	strb	r2, [r3, #0]
 800296c:	e00a      	b.n	8002984 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	b2da      	uxtb	r2, r3
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	1c59      	adds	r1, r3, #1
 800297a:	60b9      	str	r1, [r7, #8]
 800297c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002988:	b29b      	uxth	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d19d      	bne.n	80028ca <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2220      	movs	r2, #32
 8002992:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8002996:	2300      	movs	r3, #0
 8002998:	e000      	b.n	800299c <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800299a:	2302      	movs	r3, #2
  }
}
 800299c:	4618      	mov	r0, r3
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	603b      	str	r3, [r7, #0]
 80029b0:	4613      	mov	r3, r2
 80029b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029b4:	e02c      	b.n	8002a10 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029bc:	d028      	beq.n	8002a10 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d007      	beq.n	80029d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80029c4:	f7fe fcf0 	bl	80013a8 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d21d      	bcs.n	8002a10 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68da      	ldr	r2, [r3, #12]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80029e2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695a      	ldr	r2, [r3, #20]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0201 	bic.w	r2, r2, #1
 80029f2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2220      	movs	r2, #32
 80029f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2220      	movs	r2, #32
 8002a00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e00f      	b.n	8002a30 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	bf0c      	ite	eq
 8002a20:	2301      	moveq	r3, #1
 8002a22:	2300      	movne	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	461a      	mov	r2, r3
 8002a28:	79fb      	ldrb	r3, [r7, #7]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d0c3      	beq.n	80029b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a3c:	b085      	sub	sp, #20
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	431a      	orrs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	69db      	ldr	r3, [r3, #28]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002a7a:	f023 030c 	bic.w	r3, r3, #12
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6812      	ldr	r2, [r2, #0]
 8002a82:	68f9      	ldr	r1, [r7, #12]
 8002a84:	430b      	orrs	r3, r1
 8002a86:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699a      	ldr	r2, [r3, #24]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aa6:	f040 818b 	bne.w	8002dc0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4ac1      	ldr	r2, [pc, #772]	; (8002db4 <UART_SetConfig+0x37c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d005      	beq.n	8002ac0 <UART_SetConfig+0x88>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4abf      	ldr	r2, [pc, #764]	; (8002db8 <UART_SetConfig+0x380>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	f040 80bd 	bne.w	8002c3a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ac0:	f7ff fdd0 	bl	8002664 <HAL_RCC_GetPCLK2Freq>
 8002ac4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	461d      	mov	r5, r3
 8002aca:	f04f 0600 	mov.w	r6, #0
 8002ace:	46a8      	mov	r8, r5
 8002ad0:	46b1      	mov	r9, r6
 8002ad2:	eb18 0308 	adds.w	r3, r8, r8
 8002ad6:	eb49 0409 	adc.w	r4, r9, r9
 8002ada:	4698      	mov	r8, r3
 8002adc:	46a1      	mov	r9, r4
 8002ade:	eb18 0805 	adds.w	r8, r8, r5
 8002ae2:	eb49 0906 	adc.w	r9, r9, r6
 8002ae6:	f04f 0100 	mov.w	r1, #0
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002af2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002af6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002afa:	4688      	mov	r8, r1
 8002afc:	4691      	mov	r9, r2
 8002afe:	eb18 0005 	adds.w	r0, r8, r5
 8002b02:	eb49 0106 	adc.w	r1, r9, r6
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	461d      	mov	r5, r3
 8002b0c:	f04f 0600 	mov.w	r6, #0
 8002b10:	196b      	adds	r3, r5, r5
 8002b12:	eb46 0406 	adc.w	r4, r6, r6
 8002b16:	461a      	mov	r2, r3
 8002b18:	4623      	mov	r3, r4
 8002b1a:	f7fd fb55 	bl	80001c8 <__aeabi_uldivmod>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	460c      	mov	r4, r1
 8002b22:	461a      	mov	r2, r3
 8002b24:	4ba5      	ldr	r3, [pc, #660]	; (8002dbc <UART_SetConfig+0x384>)
 8002b26:	fba3 2302 	umull	r2, r3, r3, r2
 8002b2a:	095b      	lsrs	r3, r3, #5
 8002b2c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	461d      	mov	r5, r3
 8002b34:	f04f 0600 	mov.w	r6, #0
 8002b38:	46a9      	mov	r9, r5
 8002b3a:	46b2      	mov	sl, r6
 8002b3c:	eb19 0309 	adds.w	r3, r9, r9
 8002b40:	eb4a 040a 	adc.w	r4, sl, sl
 8002b44:	4699      	mov	r9, r3
 8002b46:	46a2      	mov	sl, r4
 8002b48:	eb19 0905 	adds.w	r9, r9, r5
 8002b4c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002b50:	f04f 0100 	mov.w	r1, #0
 8002b54:	f04f 0200 	mov.w	r2, #0
 8002b58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b64:	4689      	mov	r9, r1
 8002b66:	4692      	mov	sl, r2
 8002b68:	eb19 0005 	adds.w	r0, r9, r5
 8002b6c:	eb4a 0106 	adc.w	r1, sl, r6
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	461d      	mov	r5, r3
 8002b76:	f04f 0600 	mov.w	r6, #0
 8002b7a:	196b      	adds	r3, r5, r5
 8002b7c:	eb46 0406 	adc.w	r4, r6, r6
 8002b80:	461a      	mov	r2, r3
 8002b82:	4623      	mov	r3, r4
 8002b84:	f7fd fb20 	bl	80001c8 <__aeabi_uldivmod>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	460c      	mov	r4, r1
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4b8b      	ldr	r3, [pc, #556]	; (8002dbc <UART_SetConfig+0x384>)
 8002b90:	fba3 1302 	umull	r1, r3, r3, r2
 8002b94:	095b      	lsrs	r3, r3, #5
 8002b96:	2164      	movs	r1, #100	; 0x64
 8002b98:	fb01 f303 	mul.w	r3, r1, r3
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	3332      	adds	r3, #50	; 0x32
 8002ba2:	4a86      	ldr	r2, [pc, #536]	; (8002dbc <UART_SetConfig+0x384>)
 8002ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba8:	095b      	lsrs	r3, r3, #5
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002bb0:	4498      	add	r8, r3
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	461d      	mov	r5, r3
 8002bb6:	f04f 0600 	mov.w	r6, #0
 8002bba:	46a9      	mov	r9, r5
 8002bbc:	46b2      	mov	sl, r6
 8002bbe:	eb19 0309 	adds.w	r3, r9, r9
 8002bc2:	eb4a 040a 	adc.w	r4, sl, sl
 8002bc6:	4699      	mov	r9, r3
 8002bc8:	46a2      	mov	sl, r4
 8002bca:	eb19 0905 	adds.w	r9, r9, r5
 8002bce:	eb4a 0a06 	adc.w	sl, sl, r6
 8002bd2:	f04f 0100 	mov.w	r1, #0
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bde:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002be2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002be6:	4689      	mov	r9, r1
 8002be8:	4692      	mov	sl, r2
 8002bea:	eb19 0005 	adds.w	r0, r9, r5
 8002bee:	eb4a 0106 	adc.w	r1, sl, r6
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	461d      	mov	r5, r3
 8002bf8:	f04f 0600 	mov.w	r6, #0
 8002bfc:	196b      	adds	r3, r5, r5
 8002bfe:	eb46 0406 	adc.w	r4, r6, r6
 8002c02:	461a      	mov	r2, r3
 8002c04:	4623      	mov	r3, r4
 8002c06:	f7fd fadf 	bl	80001c8 <__aeabi_uldivmod>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	460c      	mov	r4, r1
 8002c0e:	461a      	mov	r2, r3
 8002c10:	4b6a      	ldr	r3, [pc, #424]	; (8002dbc <UART_SetConfig+0x384>)
 8002c12:	fba3 1302 	umull	r1, r3, r3, r2
 8002c16:	095b      	lsrs	r3, r3, #5
 8002c18:	2164      	movs	r1, #100	; 0x64
 8002c1a:	fb01 f303 	mul.w	r3, r1, r3
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	3332      	adds	r3, #50	; 0x32
 8002c24:	4a65      	ldr	r2, [pc, #404]	; (8002dbc <UART_SetConfig+0x384>)
 8002c26:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2a:	095b      	lsrs	r3, r3, #5
 8002c2c:	f003 0207 	and.w	r2, r3, #7
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4442      	add	r2, r8
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	e26f      	b.n	800311a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c3a:	f7ff fcff 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 8002c3e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	461d      	mov	r5, r3
 8002c44:	f04f 0600 	mov.w	r6, #0
 8002c48:	46a8      	mov	r8, r5
 8002c4a:	46b1      	mov	r9, r6
 8002c4c:	eb18 0308 	adds.w	r3, r8, r8
 8002c50:	eb49 0409 	adc.w	r4, r9, r9
 8002c54:	4698      	mov	r8, r3
 8002c56:	46a1      	mov	r9, r4
 8002c58:	eb18 0805 	adds.w	r8, r8, r5
 8002c5c:	eb49 0906 	adc.w	r9, r9, r6
 8002c60:	f04f 0100 	mov.w	r1, #0
 8002c64:	f04f 0200 	mov.w	r2, #0
 8002c68:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002c6c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002c70:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002c74:	4688      	mov	r8, r1
 8002c76:	4691      	mov	r9, r2
 8002c78:	eb18 0005 	adds.w	r0, r8, r5
 8002c7c:	eb49 0106 	adc.w	r1, r9, r6
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	461d      	mov	r5, r3
 8002c86:	f04f 0600 	mov.w	r6, #0
 8002c8a:	196b      	adds	r3, r5, r5
 8002c8c:	eb46 0406 	adc.w	r4, r6, r6
 8002c90:	461a      	mov	r2, r3
 8002c92:	4623      	mov	r3, r4
 8002c94:	f7fd fa98 	bl	80001c8 <__aeabi_uldivmod>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	460c      	mov	r4, r1
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4b47      	ldr	r3, [pc, #284]	; (8002dbc <UART_SetConfig+0x384>)
 8002ca0:	fba3 2302 	umull	r2, r3, r3, r2
 8002ca4:	095b      	lsrs	r3, r3, #5
 8002ca6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	461d      	mov	r5, r3
 8002cae:	f04f 0600 	mov.w	r6, #0
 8002cb2:	46a9      	mov	r9, r5
 8002cb4:	46b2      	mov	sl, r6
 8002cb6:	eb19 0309 	adds.w	r3, r9, r9
 8002cba:	eb4a 040a 	adc.w	r4, sl, sl
 8002cbe:	4699      	mov	r9, r3
 8002cc0:	46a2      	mov	sl, r4
 8002cc2:	eb19 0905 	adds.w	r9, r9, r5
 8002cc6:	eb4a 0a06 	adc.w	sl, sl, r6
 8002cca:	f04f 0100 	mov.w	r1, #0
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cd6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002cda:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002cde:	4689      	mov	r9, r1
 8002ce0:	4692      	mov	sl, r2
 8002ce2:	eb19 0005 	adds.w	r0, r9, r5
 8002ce6:	eb4a 0106 	adc.w	r1, sl, r6
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	461d      	mov	r5, r3
 8002cf0:	f04f 0600 	mov.w	r6, #0
 8002cf4:	196b      	adds	r3, r5, r5
 8002cf6:	eb46 0406 	adc.w	r4, r6, r6
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	4623      	mov	r3, r4
 8002cfe:	f7fd fa63 	bl	80001c8 <__aeabi_uldivmod>
 8002d02:	4603      	mov	r3, r0
 8002d04:	460c      	mov	r4, r1
 8002d06:	461a      	mov	r2, r3
 8002d08:	4b2c      	ldr	r3, [pc, #176]	; (8002dbc <UART_SetConfig+0x384>)
 8002d0a:	fba3 1302 	umull	r1, r3, r3, r2
 8002d0e:	095b      	lsrs	r3, r3, #5
 8002d10:	2164      	movs	r1, #100	; 0x64
 8002d12:	fb01 f303 	mul.w	r3, r1, r3
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	3332      	adds	r3, #50	; 0x32
 8002d1c:	4a27      	ldr	r2, [pc, #156]	; (8002dbc <UART_SetConfig+0x384>)
 8002d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d22:	095b      	lsrs	r3, r3, #5
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d2a:	4498      	add	r8, r3
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	461d      	mov	r5, r3
 8002d30:	f04f 0600 	mov.w	r6, #0
 8002d34:	46a9      	mov	r9, r5
 8002d36:	46b2      	mov	sl, r6
 8002d38:	eb19 0309 	adds.w	r3, r9, r9
 8002d3c:	eb4a 040a 	adc.w	r4, sl, sl
 8002d40:	4699      	mov	r9, r3
 8002d42:	46a2      	mov	sl, r4
 8002d44:	eb19 0905 	adds.w	r9, r9, r5
 8002d48:	eb4a 0a06 	adc.w	sl, sl, r6
 8002d4c:	f04f 0100 	mov.w	r1, #0
 8002d50:	f04f 0200 	mov.w	r2, #0
 8002d54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d60:	4689      	mov	r9, r1
 8002d62:	4692      	mov	sl, r2
 8002d64:	eb19 0005 	adds.w	r0, r9, r5
 8002d68:	eb4a 0106 	adc.w	r1, sl, r6
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	461d      	mov	r5, r3
 8002d72:	f04f 0600 	mov.w	r6, #0
 8002d76:	196b      	adds	r3, r5, r5
 8002d78:	eb46 0406 	adc.w	r4, r6, r6
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4623      	mov	r3, r4
 8002d80:	f7fd fa22 	bl	80001c8 <__aeabi_uldivmod>
 8002d84:	4603      	mov	r3, r0
 8002d86:	460c      	mov	r4, r1
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <UART_SetConfig+0x384>)
 8002d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d90:	095b      	lsrs	r3, r3, #5
 8002d92:	2164      	movs	r1, #100	; 0x64
 8002d94:	fb01 f303 	mul.w	r3, r1, r3
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	3332      	adds	r3, #50	; 0x32
 8002d9e:	4a07      	ldr	r2, [pc, #28]	; (8002dbc <UART_SetConfig+0x384>)
 8002da0:	fba2 2303 	umull	r2, r3, r2, r3
 8002da4:	095b      	lsrs	r3, r3, #5
 8002da6:	f003 0207 	and.w	r2, r3, #7
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4442      	add	r2, r8
 8002db0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002db2:	e1b2      	b.n	800311a <UART_SetConfig+0x6e2>
 8002db4:	40011000 	.word	0x40011000
 8002db8:	40011400 	.word	0x40011400
 8002dbc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4ad7      	ldr	r2, [pc, #860]	; (8003124 <UART_SetConfig+0x6ec>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d005      	beq.n	8002dd6 <UART_SetConfig+0x39e>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4ad6      	ldr	r2, [pc, #856]	; (8003128 <UART_SetConfig+0x6f0>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	f040 80d1 	bne.w	8002f78 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002dd6:	f7ff fc45 	bl	8002664 <HAL_RCC_GetPCLK2Freq>
 8002dda:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	469a      	mov	sl, r3
 8002de0:	f04f 0b00 	mov.w	fp, #0
 8002de4:	46d0      	mov	r8, sl
 8002de6:	46d9      	mov	r9, fp
 8002de8:	eb18 0308 	adds.w	r3, r8, r8
 8002dec:	eb49 0409 	adc.w	r4, r9, r9
 8002df0:	4698      	mov	r8, r3
 8002df2:	46a1      	mov	r9, r4
 8002df4:	eb18 080a 	adds.w	r8, r8, sl
 8002df8:	eb49 090b 	adc.w	r9, r9, fp
 8002dfc:	f04f 0100 	mov.w	r1, #0
 8002e00:	f04f 0200 	mov.w	r2, #0
 8002e04:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e08:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e0c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e10:	4688      	mov	r8, r1
 8002e12:	4691      	mov	r9, r2
 8002e14:	eb1a 0508 	adds.w	r5, sl, r8
 8002e18:	eb4b 0609 	adc.w	r6, fp, r9
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	4619      	mov	r1, r3
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	f04f 0300 	mov.w	r3, #0
 8002e2a:	f04f 0400 	mov.w	r4, #0
 8002e2e:	0094      	lsls	r4, r2, #2
 8002e30:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e34:	008b      	lsls	r3, r1, #2
 8002e36:	461a      	mov	r2, r3
 8002e38:	4623      	mov	r3, r4
 8002e3a:	4628      	mov	r0, r5
 8002e3c:	4631      	mov	r1, r6
 8002e3e:	f7fd f9c3 	bl	80001c8 <__aeabi_uldivmod>
 8002e42:	4603      	mov	r3, r0
 8002e44:	460c      	mov	r4, r1
 8002e46:	461a      	mov	r2, r3
 8002e48:	4bb8      	ldr	r3, [pc, #736]	; (800312c <UART_SetConfig+0x6f4>)
 8002e4a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e4e:	095b      	lsrs	r3, r3, #5
 8002e50:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	469b      	mov	fp, r3
 8002e58:	f04f 0c00 	mov.w	ip, #0
 8002e5c:	46d9      	mov	r9, fp
 8002e5e:	46e2      	mov	sl, ip
 8002e60:	eb19 0309 	adds.w	r3, r9, r9
 8002e64:	eb4a 040a 	adc.w	r4, sl, sl
 8002e68:	4699      	mov	r9, r3
 8002e6a:	46a2      	mov	sl, r4
 8002e6c:	eb19 090b 	adds.w	r9, r9, fp
 8002e70:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002e74:	f04f 0100 	mov.w	r1, #0
 8002e78:	f04f 0200 	mov.w	r2, #0
 8002e7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e88:	4689      	mov	r9, r1
 8002e8a:	4692      	mov	sl, r2
 8002e8c:	eb1b 0509 	adds.w	r5, fp, r9
 8002e90:	eb4c 060a 	adc.w	r6, ip, sl
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	4619      	mov	r1, r3
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	f04f 0400 	mov.w	r4, #0
 8002ea6:	0094      	lsls	r4, r2, #2
 8002ea8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002eac:	008b      	lsls	r3, r1, #2
 8002eae:	461a      	mov	r2, r3
 8002eb0:	4623      	mov	r3, r4
 8002eb2:	4628      	mov	r0, r5
 8002eb4:	4631      	mov	r1, r6
 8002eb6:	f7fd f987 	bl	80001c8 <__aeabi_uldivmod>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	460c      	mov	r4, r1
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	4b9a      	ldr	r3, [pc, #616]	; (800312c <UART_SetConfig+0x6f4>)
 8002ec2:	fba3 1302 	umull	r1, r3, r3, r2
 8002ec6:	095b      	lsrs	r3, r3, #5
 8002ec8:	2164      	movs	r1, #100	; 0x64
 8002eca:	fb01 f303 	mul.w	r3, r1, r3
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	011b      	lsls	r3, r3, #4
 8002ed2:	3332      	adds	r3, #50	; 0x32
 8002ed4:	4a95      	ldr	r2, [pc, #596]	; (800312c <UART_SetConfig+0x6f4>)
 8002ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ee0:	4498      	add	r8, r3
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	469b      	mov	fp, r3
 8002ee6:	f04f 0c00 	mov.w	ip, #0
 8002eea:	46d9      	mov	r9, fp
 8002eec:	46e2      	mov	sl, ip
 8002eee:	eb19 0309 	adds.w	r3, r9, r9
 8002ef2:	eb4a 040a 	adc.w	r4, sl, sl
 8002ef6:	4699      	mov	r9, r3
 8002ef8:	46a2      	mov	sl, r4
 8002efa:	eb19 090b 	adds.w	r9, r9, fp
 8002efe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002f02:	f04f 0100 	mov.w	r1, #0
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f0e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f12:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f16:	4689      	mov	r9, r1
 8002f18:	4692      	mov	sl, r2
 8002f1a:	eb1b 0509 	adds.w	r5, fp, r9
 8002f1e:	eb4c 060a 	adc.w	r6, ip, sl
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	4619      	mov	r1, r3
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	f04f 0300 	mov.w	r3, #0
 8002f30:	f04f 0400 	mov.w	r4, #0
 8002f34:	0094      	lsls	r4, r2, #2
 8002f36:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f3a:	008b      	lsls	r3, r1, #2
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4623      	mov	r3, r4
 8002f40:	4628      	mov	r0, r5
 8002f42:	4631      	mov	r1, r6
 8002f44:	f7fd f940 	bl	80001c8 <__aeabi_uldivmod>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	460c      	mov	r4, r1
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	4b77      	ldr	r3, [pc, #476]	; (800312c <UART_SetConfig+0x6f4>)
 8002f50:	fba3 1302 	umull	r1, r3, r3, r2
 8002f54:	095b      	lsrs	r3, r3, #5
 8002f56:	2164      	movs	r1, #100	; 0x64
 8002f58:	fb01 f303 	mul.w	r3, r1, r3
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	011b      	lsls	r3, r3, #4
 8002f60:	3332      	adds	r3, #50	; 0x32
 8002f62:	4a72      	ldr	r2, [pc, #456]	; (800312c <UART_SetConfig+0x6f4>)
 8002f64:	fba2 2303 	umull	r2, r3, r2, r3
 8002f68:	095b      	lsrs	r3, r3, #5
 8002f6a:	f003 020f 	and.w	r2, r3, #15
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4442      	add	r2, r8
 8002f74:	609a      	str	r2, [r3, #8]
 8002f76:	e0d0      	b.n	800311a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f78:	f7ff fb60 	bl	800263c <HAL_RCC_GetPCLK1Freq>
 8002f7c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	469a      	mov	sl, r3
 8002f82:	f04f 0b00 	mov.w	fp, #0
 8002f86:	46d0      	mov	r8, sl
 8002f88:	46d9      	mov	r9, fp
 8002f8a:	eb18 0308 	adds.w	r3, r8, r8
 8002f8e:	eb49 0409 	adc.w	r4, r9, r9
 8002f92:	4698      	mov	r8, r3
 8002f94:	46a1      	mov	r9, r4
 8002f96:	eb18 080a 	adds.w	r8, r8, sl
 8002f9a:	eb49 090b 	adc.w	r9, r9, fp
 8002f9e:	f04f 0100 	mov.w	r1, #0
 8002fa2:	f04f 0200 	mov.w	r2, #0
 8002fa6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002faa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002fae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002fb2:	4688      	mov	r8, r1
 8002fb4:	4691      	mov	r9, r2
 8002fb6:	eb1a 0508 	adds.w	r5, sl, r8
 8002fba:	eb4b 0609 	adc.w	r6, fp, r9
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	f04f 0300 	mov.w	r3, #0
 8002fcc:	f04f 0400 	mov.w	r4, #0
 8002fd0:	0094      	lsls	r4, r2, #2
 8002fd2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002fd6:	008b      	lsls	r3, r1, #2
 8002fd8:	461a      	mov	r2, r3
 8002fda:	4623      	mov	r3, r4
 8002fdc:	4628      	mov	r0, r5
 8002fde:	4631      	mov	r1, r6
 8002fe0:	f7fd f8f2 	bl	80001c8 <__aeabi_uldivmod>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	460c      	mov	r4, r1
 8002fe8:	461a      	mov	r2, r3
 8002fea:	4b50      	ldr	r3, [pc, #320]	; (800312c <UART_SetConfig+0x6f4>)
 8002fec:	fba3 2302 	umull	r2, r3, r3, r2
 8002ff0:	095b      	lsrs	r3, r3, #5
 8002ff2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	469b      	mov	fp, r3
 8002ffa:	f04f 0c00 	mov.w	ip, #0
 8002ffe:	46d9      	mov	r9, fp
 8003000:	46e2      	mov	sl, ip
 8003002:	eb19 0309 	adds.w	r3, r9, r9
 8003006:	eb4a 040a 	adc.w	r4, sl, sl
 800300a:	4699      	mov	r9, r3
 800300c:	46a2      	mov	sl, r4
 800300e:	eb19 090b 	adds.w	r9, r9, fp
 8003012:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003016:	f04f 0100 	mov.w	r1, #0
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003022:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003026:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800302a:	4689      	mov	r9, r1
 800302c:	4692      	mov	sl, r2
 800302e:	eb1b 0509 	adds.w	r5, fp, r9
 8003032:	eb4c 060a 	adc.w	r6, ip, sl
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	4619      	mov	r1, r3
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	f04f 0300 	mov.w	r3, #0
 8003044:	f04f 0400 	mov.w	r4, #0
 8003048:	0094      	lsls	r4, r2, #2
 800304a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800304e:	008b      	lsls	r3, r1, #2
 8003050:	461a      	mov	r2, r3
 8003052:	4623      	mov	r3, r4
 8003054:	4628      	mov	r0, r5
 8003056:	4631      	mov	r1, r6
 8003058:	f7fd f8b6 	bl	80001c8 <__aeabi_uldivmod>
 800305c:	4603      	mov	r3, r0
 800305e:	460c      	mov	r4, r1
 8003060:	461a      	mov	r2, r3
 8003062:	4b32      	ldr	r3, [pc, #200]	; (800312c <UART_SetConfig+0x6f4>)
 8003064:	fba3 1302 	umull	r1, r3, r3, r2
 8003068:	095b      	lsrs	r3, r3, #5
 800306a:	2164      	movs	r1, #100	; 0x64
 800306c:	fb01 f303 	mul.w	r3, r1, r3
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	011b      	lsls	r3, r3, #4
 8003074:	3332      	adds	r3, #50	; 0x32
 8003076:	4a2d      	ldr	r2, [pc, #180]	; (800312c <UART_SetConfig+0x6f4>)
 8003078:	fba2 2303 	umull	r2, r3, r2, r3
 800307c:	095b      	lsrs	r3, r3, #5
 800307e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003082:	4498      	add	r8, r3
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	469b      	mov	fp, r3
 8003088:	f04f 0c00 	mov.w	ip, #0
 800308c:	46d9      	mov	r9, fp
 800308e:	46e2      	mov	sl, ip
 8003090:	eb19 0309 	adds.w	r3, r9, r9
 8003094:	eb4a 040a 	adc.w	r4, sl, sl
 8003098:	4699      	mov	r9, r3
 800309a:	46a2      	mov	sl, r4
 800309c:	eb19 090b 	adds.w	r9, r9, fp
 80030a0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80030a4:	f04f 0100 	mov.w	r1, #0
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030b8:	4689      	mov	r9, r1
 80030ba:	4692      	mov	sl, r2
 80030bc:	eb1b 0509 	adds.w	r5, fp, r9
 80030c0:	eb4c 060a 	adc.w	r6, ip, sl
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	4619      	mov	r1, r3
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	f04f 0400 	mov.w	r4, #0
 80030d6:	0094      	lsls	r4, r2, #2
 80030d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80030dc:	008b      	lsls	r3, r1, #2
 80030de:	461a      	mov	r2, r3
 80030e0:	4623      	mov	r3, r4
 80030e2:	4628      	mov	r0, r5
 80030e4:	4631      	mov	r1, r6
 80030e6:	f7fd f86f 	bl	80001c8 <__aeabi_uldivmod>
 80030ea:	4603      	mov	r3, r0
 80030ec:	460c      	mov	r4, r1
 80030ee:	461a      	mov	r2, r3
 80030f0:	4b0e      	ldr	r3, [pc, #56]	; (800312c <UART_SetConfig+0x6f4>)
 80030f2:	fba3 1302 	umull	r1, r3, r3, r2
 80030f6:	095b      	lsrs	r3, r3, #5
 80030f8:	2164      	movs	r1, #100	; 0x64
 80030fa:	fb01 f303 	mul.w	r3, r1, r3
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	3332      	adds	r3, #50	; 0x32
 8003104:	4a09      	ldr	r2, [pc, #36]	; (800312c <UART_SetConfig+0x6f4>)
 8003106:	fba2 2303 	umull	r2, r3, r2, r3
 800310a:	095b      	lsrs	r3, r3, #5
 800310c:	f003 020f 	and.w	r2, r3, #15
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4442      	add	r2, r8
 8003116:	609a      	str	r2, [r3, #8]
}
 8003118:	e7ff      	b.n	800311a <UART_SetConfig+0x6e2>
 800311a:	bf00      	nop
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003124:	40011000 	.word	0x40011000
 8003128:	40011400 	.word	0x40011400
 800312c:	51eb851f 	.word	0x51eb851f

08003130 <__libc_init_array>:
 8003130:	b570      	push	{r4, r5, r6, lr}
 8003132:	4e0d      	ldr	r6, [pc, #52]	; (8003168 <__libc_init_array+0x38>)
 8003134:	4c0d      	ldr	r4, [pc, #52]	; (800316c <__libc_init_array+0x3c>)
 8003136:	1ba4      	subs	r4, r4, r6
 8003138:	10a4      	asrs	r4, r4, #2
 800313a:	2500      	movs	r5, #0
 800313c:	42a5      	cmp	r5, r4
 800313e:	d109      	bne.n	8003154 <__libc_init_array+0x24>
 8003140:	4e0b      	ldr	r6, [pc, #44]	; (8003170 <__libc_init_array+0x40>)
 8003142:	4c0c      	ldr	r4, [pc, #48]	; (8003174 <__libc_init_array+0x44>)
 8003144:	f000 f820 	bl	8003188 <_init>
 8003148:	1ba4      	subs	r4, r4, r6
 800314a:	10a4      	asrs	r4, r4, #2
 800314c:	2500      	movs	r5, #0
 800314e:	42a5      	cmp	r5, r4
 8003150:	d105      	bne.n	800315e <__libc_init_array+0x2e>
 8003152:	bd70      	pop	{r4, r5, r6, pc}
 8003154:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003158:	4798      	blx	r3
 800315a:	3501      	adds	r5, #1
 800315c:	e7ee      	b.n	800313c <__libc_init_array+0xc>
 800315e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003162:	4798      	blx	r3
 8003164:	3501      	adds	r5, #1
 8003166:	e7f2      	b.n	800314e <__libc_init_array+0x1e>
 8003168:	080031e4 	.word	0x080031e4
 800316c:	080031e4 	.word	0x080031e4
 8003170:	080031e4 	.word	0x080031e4
 8003174:	080031e8 	.word	0x080031e8

08003178 <memset>:
 8003178:	4402      	add	r2, r0
 800317a:	4603      	mov	r3, r0
 800317c:	4293      	cmp	r3, r2
 800317e:	d100      	bne.n	8003182 <memset+0xa>
 8003180:	4770      	bx	lr
 8003182:	f803 1b01 	strb.w	r1, [r3], #1
 8003186:	e7f9      	b.n	800317c <memset+0x4>

08003188 <_init>:
 8003188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800318a:	bf00      	nop
 800318c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800318e:	bc08      	pop	{r3}
 8003190:	469e      	mov	lr, r3
 8003192:	4770      	bx	lr

08003194 <_fini>:
 8003194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003196:	bf00      	nop
 8003198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800319a:	bc08      	pop	{r3}
 800319c:	469e      	mov	lr, r3
 800319e:	4770      	bx	lr
