
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027f8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002980  08002980  00012980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029b0  080029b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080029b0  080029b0  000129b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080029b8  080029b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029b8  080029b8  000129b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029bc  080029bc  000129bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080029c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  080029cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  080029cc  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007746  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014e7  00000000  00000000  00027782  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006e0  00000000  00000000  00028c70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000628  00000000  00000000  00029350  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020ad5  00000000  00000000  00029978  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000062e2  00000000  00000000  0004a44d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c29f5  00000000  00000000  0005072f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00113124  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001afc  00000000  00000000  001131a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002968 	.word	0x08002968

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002968 	.word	0x08002968

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <uint8VerifyCRC>:
 *         - CRC_FAIL    (if calculated CRC does not match)
 */


static uint8_t uint8VerifyCRC(uint8_t* copy_puint8dataArr,uint8_t copy_uint8Length,uint32_t copy_uint32HostCRC)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	460b      	mov	r3, r1
 80004d2:	607a      	str	r2, [r7, #4]
 80004d4:	72fb      	strb	r3, [r7, #11]

	 /*
	     * Step 1: Compute the CRC for the given data.
	     * The function iterates through each byte of the data array, accumulating the CRC value.
	     */
	for(Local_uint8Iterator = 0 ; Local_uint8Iterator < copy_uint8Length; Local_uint8Iterator++)
 80004d6:	2300      	movs	r3, #0
 80004d8:	77fb      	strb	r3, [r7, #31]
 80004da:	e00f      	b.n	80004fc <uint8VerifyCRC+0x34>
	{
		/* Load the current byte from the data array into a temporary variable */
		Local_uint32Temp = copy_puint8dataArr[Local_uint8Iterator];
 80004dc:	7ffb      	ldrb	r3, [r7, #31]
 80004de:	68fa      	ldr	r2, [r7, #12]
 80004e0:	4413      	add	r3, r2
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	617b      	str	r3, [r7, #20]

		 /* Accumulate the CRC for the current byte */
		Local_uint8AccCRC = HAL_CRC_Accumulate(&hcrc, &Local_uint32Temp, 1);
 80004e6:	f107 0314 	add.w	r3, r7, #20
 80004ea:	2201      	movs	r2, #1
 80004ec:	4619      	mov	r1, r3
 80004ee:	480e      	ldr	r0, [pc, #56]	; (8000528 <uint8VerifyCRC+0x60>)
 80004f0:	f000 fe63 	bl	80011ba <HAL_CRC_Accumulate>
 80004f4:	61b8      	str	r0, [r7, #24]
	for(Local_uint8Iterator = 0 ; Local_uint8Iterator < copy_uint8Length; Local_uint8Iterator++)
 80004f6:	7ffb      	ldrb	r3, [r7, #31]
 80004f8:	3301      	adds	r3, #1
 80004fa:	77fb      	strb	r3, [r7, #31]
 80004fc:	7ffa      	ldrb	r2, [r7, #31]
 80004fe:	7afb      	ldrb	r3, [r7, #11]
 8000500:	429a      	cmp	r2, r3
 8000502:	d3eb      	bcc.n	80004dc <uint8VerifyCRC+0x14>

	/*
	     * Step 2: Reset the CRC calculation unit.
	     * This ensures that every time this function is called, it starts calculation from the beginning.
	 */
	__HAL_CRC_RESET_HANDLE_STATE(&hcrc);
 8000504:	4b08      	ldr	r3, [pc, #32]	; (8000528 <uint8VerifyCRC+0x60>)
 8000506:	2200      	movs	r2, #0
 8000508:	715a      	strb	r2, [r3, #5]

	/*
	     * Step 3: Compare the computed CRC with the expected CRC from the Host.
	     * If they match, the CRC check is successful; otherwise, it fails.
	*/
	if(Local_uint8AccCRC == copy_uint32HostCRC)
 800050a:	69ba      	ldr	r2, [r7, #24]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	429a      	cmp	r2, r3
 8000510:	d102      	bne.n	8000518 <uint8VerifyCRC+0x50>
	{
		Local_uint8CRCStatus = CRC_SUCCESS ;   /* CRC verification passed */
 8000512:	2301      	movs	r3, #1
 8000514:	77bb      	strb	r3, [r7, #30]
 8000516:	e001      	b.n	800051c <uint8VerifyCRC+0x54>
	}else
	{
		Local_uint8CRCStatus = CRC_FAIL ;     /* CRC verification failed */
 8000518:	2300      	movs	r3, #0
 800051a:	77bb      	strb	r3, [r7, #30]
	}

	/* Step 4: Return the verification result (CRC_SUCCESS or CRC_FAIL) */
	return Local_uint8CRCStatus  ;
 800051c:	7fbb      	ldrb	r3, [r7, #30]
}
 800051e:	4618      	mov	r0, r3
 8000520:	3720      	adds	r7, #32
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000028 	.word	0x20000028

0800052c <voidSendACK>:
 *     [1] -> Length of the response data that follows
 * - It then transmits this buffer over UART to notify the Host.
 */

static void voidSendACK(uint8_t copy_uint8ReplyeLngth)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
    /* Buffer to hold the ACK response and the length of the following response */
    uint8_t Local_uint8AckBuffer[2] = {BL_ACK, copy_uint8ReplyeLngth};
 8000536:	23a5      	movs	r3, #165	; 0xa5
 8000538:	733b      	strb	r3, [r7, #12]
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	737b      	strb	r3, [r7, #13]

    /* Send ACK response via UART */
    HAL_UART_Transmit(&huart2, Local_uint8AckBuffer, 2, HAL_MAX_DELAY);
 800053e:	f107 010c 	add.w	r1, r7, #12
 8000542:	f04f 33ff 	mov.w	r3, #4294967295
 8000546:	2202      	movs	r2, #2
 8000548:	4803      	ldr	r0, [pc, #12]	; (8000558 <voidSendACK+0x2c>)
 800054a:	f001 fcdc 	bl	8001f06 <HAL_UART_Transmit>
}
 800054e:	bf00      	nop
 8000550:	3710      	adds	r7, #16
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	20000030 	.word	0x20000030

0800055c <voidSendNACK>:
 * - The function prepares a single-byte buffer containing BL_NACK.
 * - It then transmits this NACK response over UART to notify the Host of the failure.
 */

static void voidSendNACK(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
    /* Buffer holding the NACK response */
    uint8_t Local_uint8NAck = BL_NACK;
 8000562:	237f      	movs	r3, #127	; 0x7f
 8000564:	71fb      	strb	r3, [r7, #7]

    /* Send NACK response via UART */
    HAL_UART_Transmit(&huart2, &Local_uint8NAck, 1, HAL_MAX_DELAY);
 8000566:	1df9      	adds	r1, r7, #7
 8000568:	f04f 33ff 	mov.w	r3, #4294967295
 800056c:	2201      	movs	r2, #1
 800056e:	4803      	ldr	r0, [pc, #12]	; (800057c <voidSendNACK+0x20>)
 8000570:	f001 fcc9 	bl	8001f06 <HAL_UART_Transmit>
}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000030 	.word	0x20000030

08000580 <BL_voidHandleGetVERCmd>:
 * Return:
 * -------
 * @return None.
 */
void BL_voidHandleGetVERCmd(uint8_t* copy_puint8CmdPacket)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
    uint8_t Local_uint8BLVersion, Local_uint8CRCStatus;
    uint8_t Local_uint8CmdLen; // this variabke to extract command length
    uint32_t Local_uint32HostCRC; // this variable to extract host CRC

    /* Extract command length (first byte includes "Length to follow") */
    Local_uint8CmdLen = copy_puint8CmdPacket[0] + 1;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	3301      	adds	r3, #1
 800058e:	75fb      	strb	r3, [r7, #23]

    /* Extract CRC from the last 4 bytes of the received packet */
    Local_uint32HostCRC = *((uint32_t*)(copy_puint8CmdPacket + Local_uint8CmdLen - 4));
 8000590:	7dfb      	ldrb	r3, [r7, #23]
 8000592:	3b04      	subs	r3, #4
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	4413      	add	r3, r2
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	613b      	str	r3, [r7, #16]

    /* Verify CRC of the received command */
    Local_uint8CRCStatus = uint8VerifyCRC(copy_puint8CmdPacket, (Local_uint8CmdLen - 4), Local_uint32HostCRC);
 800059c:	7dfb      	ldrb	r3, [r7, #23]
 800059e:	3b04      	subs	r3, #4
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	693a      	ldr	r2, [r7, #16]
 80005a4:	4619      	mov	r1, r3
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f7ff ff8e 	bl	80004c8 <uint8VerifyCRC>
 80005ac:	4603      	mov	r3, r0
 80005ae:	73fb      	strb	r3, [r7, #15]

    if (Local_uint8CRCStatus == CRC_SUCCESS)
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d10d      	bne.n	80005d2 <BL_voidHandleGetVERCmd+0x52>
    {
        /* Send ACK with the length of the response payload (1 byte for version) */
        voidSendACK(1u);
 80005b6:	2001      	movs	r0, #1
 80005b8:	f7ff ffb8 	bl	800052c <voidSendACK>

        /* Send the bootloader version */
        Local_uint8BLVersion = BL_VERSION;
 80005bc:	2301      	movs	r3, #1
 80005be:	73bb      	strb	r3, [r7, #14]
        HAL_UART_Transmit(&huart2, &Local_uint8BLVersion, 1, HAL_MAX_DELAY);
 80005c0:	f107 010e 	add.w	r1, r7, #14
 80005c4:	f04f 33ff 	mov.w	r3, #4294967295
 80005c8:	2201      	movs	r2, #1
 80005ca:	4805      	ldr	r0, [pc, #20]	; (80005e0 <BL_voidHandleGetVERCmd+0x60>)
 80005cc:	f001 fc9b 	bl	8001f06 <HAL_UART_Transmit>
    else
    {
        /* Send NACK if CRC verification fails */
        voidSendNACK();
    }
}
 80005d0:	e001      	b.n	80005d6 <BL_voidHandleGetVERCmd+0x56>
        voidSendNACK();
 80005d2:	f7ff ffc3 	bl	800055c <voidSendNACK>
}
 80005d6:	bf00      	nop
 80005d8:	3718      	adds	r7, #24
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000030 	.word	0x20000030

080005e4 <BL_voidHandleGetHelpCmd>:


void BL_voidHandleGetHelpCmd(uint8_t* copy_puint8CmdPacket)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]

}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <BL_voidHandleGetCIDcmd>:

void BL_voidHandleGetCIDcmd(uint8_t* copy_puint8CmdPacket)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]

}
 8000600:	bf00      	nop
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <BL_voidHandleGetRDPStatusCmd>:


void BL_voidHandleGetRDPStatusCmd(uint8_t* copy_puint8CmdPacket)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]

}
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr

08000620 <BL_voidHandleGoToAddressCmd>:

void BL_voidHandleGoToAddressCmd(uint8_t* copy_puint8CmdPacket)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]

}
 8000628:	bf00      	nop
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr

08000634 <BL_voidHandleFlashEraseCmd>:

void BL_voidHandleFlashEraseCmd(uint8_t* copy_puint8CmdPacket)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]

}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <BL_voidHandleMemWriteCmd>:

void BL_voidHandleMemWriteCmd(uint8_t* copy_puint8CmdPacket)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

}
 8000650:	bf00      	nop
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr

0800065c <BL_voidHandleEnRWProtectCmd>:

void BL_voidHandleEnRWProtectCmd(uint8_t* copy_puint8CmdPacket)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]

}
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <BL_voidHandleMemReadCmd>:

void BL_voidHandleMemReadCmd(uint8_t* copy_puint8CmdPacket)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]

}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <BL_voidHandleReadSectorStatusCmd>:

void BL_voidHandleReadSectorStatusCmd(uint8_t* copy_puint8CmdPacket)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]

}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <BL_voidHandleOTPReadCmd>:

void BL_voidHandleOTPReadCmd(uint8_t* copy_puint8CmdPacket)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]

}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <BL_voidHandleDisWRProtectCmd>:

void BL_voidHandleDisWRProtectCmd(uint8_t* copy_puint8CmdPacket)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

}
 80006b4:	bf00      	nop
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b5b0      	push	{r4, r5, r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
char HelloBootloader[]= "Hello From Bootloader\r\n" ;
 80006c6:	4b19      	ldr	r3, [pc, #100]	; (800072c <main+0x6c>)
 80006c8:	463c      	mov	r4, r7
 80006ca:	461d      	mov	r5, r3
 80006cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006d4:	e884 0003 	stmia.w	r4, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d8:	f000 fbda 	bl	8000e90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006dc:	f000 f82c 	bl	8000738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e0:	f000 f8d2 	bl	8000888 <MX_GPIO_Init>
  MX_CRC_Init();
 80006e4:	f000 f892 	bl	800080c <MX_CRC_Init>
  MX_USART2_UART_Init();
 80006e8:	f000 f8a4 	bl	8000834 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
   /*Read the button*/
 if( HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)== GPIO_PIN_RESET)
 80006ec:	2101      	movs	r1, #1
 80006ee:	4810      	ldr	r0, [pc, #64]	; (8000730 <main+0x70>)
 80006f0:	f000 ff28 	bl	8001544 <HAL_GPIO_ReadPin>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d102      	bne.n	8000700 <main+0x40>
 {
	 Bootloader_UartReadData();
 80006fa:	f000 fa25 	bl	8000b48 <Bootloader_UartReadData>
 80006fe:	e008      	b.n	8000712 <main+0x52>
 }else if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)== GPIO_PIN_SET)
 8000700:	2101      	movs	r1, #1
 8000702:	480b      	ldr	r0, [pc, #44]	; (8000730 <main+0x70>)
 8000704:	f000 ff1e 	bl	8001544 <HAL_GPIO_ReadPin>
 8000708:	4603      	mov	r3, r0
 800070a:	2b01      	cmp	r3, #1
 800070c:	d101      	bne.n	8000712 <main+0x52>
 {
	 Bootloader_JumpToUserApp();
 800070e:	f000 fa9f 	bl	8000c50 <Bootloader_JumpToUserApp>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit(&huart2, (uint8_t*)HelloBootloader, sizeof(HelloBootloader), HAL_MAX_DELAY);
 8000712:	4639      	mov	r1, r7
 8000714:	f04f 33ff 	mov.w	r3, #4294967295
 8000718:	2218      	movs	r2, #24
 800071a:	4806      	ldr	r0, [pc, #24]	; (8000734 <main+0x74>)
 800071c:	f001 fbf3 	bl	8001f06 <HAL_UART_Transmit>
	      HAL_Delay(1000);
 8000720:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000724:	f000 fc26 	bl	8000f74 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, (uint8_t*)HelloBootloader, sizeof(HelloBootloader), HAL_MAX_DELAY);
 8000728:	e7f3      	b.n	8000712 <main+0x52>
 800072a:	bf00      	nop
 800072c:	08002980 	.word	0x08002980
 8000730:	40020000 	.word	0x40020000
 8000734:	20000030 	.word	0x20000030

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b094      	sub	sp, #80	; 0x50
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 0320 	add.w	r3, r7, #32
 8000742:	2230      	movs	r2, #48	; 0x30
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f002 f906 	bl	8002958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	4b28      	ldr	r3, [pc, #160]	; (8000804 <SystemClock_Config+0xcc>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000764:	4a27      	ldr	r2, [pc, #156]	; (8000804 <SystemClock_Config+0xcc>)
 8000766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076a:	6413      	str	r3, [r2, #64]	; 0x40
 800076c:	4b25      	ldr	r3, [pc, #148]	; (8000804 <SystemClock_Config+0xcc>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000778:	2300      	movs	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	4b22      	ldr	r3, [pc, #136]	; (8000808 <SystemClock_Config+0xd0>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a21      	ldr	r2, [pc, #132]	; (8000808 <SystemClock_Config+0xd0>)
 8000782:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000786:	6013      	str	r3, [r2, #0]
 8000788:	4b1f      	ldr	r3, [pc, #124]	; (8000808 <SystemClock_Config+0xd0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000794:	2302      	movs	r3, #2
 8000796:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000798:	2301      	movs	r3, #1
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800079c:	2310      	movs	r3, #16
 800079e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a0:	2302      	movs	r3, #2
 80007a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a4:	2300      	movs	r3, #0
 80007a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007a8:	2308      	movs	r3, #8
 80007aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80007ac:	2332      	movs	r3, #50	; 0x32
 80007ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007b0:	2304      	movs	r3, #4
 80007b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007b4:	2307      	movs	r3, #7
 80007b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b8:	f107 0320 	add.w	r3, r7, #32
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 fef3 	bl	80015a8 <HAL_RCC_OscConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007c8:	f000 fa5a 	bl	8000c80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007cc:	230f      	movs	r3, #15
 80007ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d0:	2302      	movs	r3, #2
 80007d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f001 f94c 	bl	8001a88 <HAL_RCC_ClockConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007f6:	f000 fa43 	bl	8000c80 <Error_Handler>
  }
}
 80007fa:	bf00      	nop
 80007fc:	3750      	adds	r7, #80	; 0x50
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40007000 	.word	0x40007000

0800080c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_CRC_Init+0x20>)
 8000812:	4a07      	ldr	r2, [pc, #28]	; (8000830 <MX_CRC_Init+0x24>)
 8000814:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_CRC_Init+0x20>)
 8000818:	f000 fcb3 	bl	8001182 <HAL_CRC_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000822:	f000 fa2d 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000028 	.word	0x20000028
 8000830:	40023000 	.word	0x40023000

08000834 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 800083a:	4a12      	ldr	r2, [pc, #72]	; (8000884 <MX_USART2_UART_Init+0x50>)
 800083c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 8000840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000844:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 800086c:	f001 fafe 	bl	8001e6c <HAL_UART_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000876:	f000 fa03 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000030 	.word	0x20000030
 8000884:	40004400 	.word	0x40004400

08000888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08c      	sub	sp, #48	; 0x30
 800088c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	61bb      	str	r3, [r7, #24]
 80008a2:	4ba1      	ldr	r3, [pc, #644]	; (8000b28 <MX_GPIO_Init+0x2a0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4aa0      	ldr	r2, [pc, #640]	; (8000b28 <MX_GPIO_Init+0x2a0>)
 80008a8:	f043 0310 	orr.w	r3, r3, #16
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b9e      	ldr	r3, [pc, #632]	; (8000b28 <MX_GPIO_Init+0x2a0>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0310 	and.w	r3, r3, #16
 80008b6:	61bb      	str	r3, [r7, #24]
 80008b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
 80008be:	4b9a      	ldr	r3, [pc, #616]	; (8000b28 <MX_GPIO_Init+0x2a0>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a99      	ldr	r2, [pc, #612]	; (8000b28 <MX_GPIO_Init+0x2a0>)
 80008c4:	f043 0304 	orr.w	r3, r3, #4
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b97      	ldr	r3, [pc, #604]	; (8000b28 <MX_GPIO_Init+0x2a0>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0304 	and.w	r3, r3, #4
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	4b93      	ldr	r3, [pc, #588]	; (8000b28 <MX_GPIO_Init+0x2a0>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a92      	ldr	r2, [pc, #584]	; (8000b28 <MX_GPIO_Init+0x2a0>)
 80008e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b90      	ldr	r3, [pc, #576]	; (8000b28 <MX_GPIO_Init+0x2a0>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	4b8c      	ldr	r3, [pc, #560]	; (8000b28 <MX_GPIO_Init+0x2a0>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a8b      	ldr	r2, [pc, #556]	; (8000b28 <MX_GPIO_Init+0x2a0>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b89      	ldr	r3, [pc, #548]	; (8000b28 <MX_GPIO_Init+0x2a0>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	4b85      	ldr	r3, [pc, #532]	; (8000b28 <MX_GPIO_Init+0x2a0>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a84      	ldr	r2, [pc, #528]	; (8000b28 <MX_GPIO_Init+0x2a0>)
 8000918:	f043 0302 	orr.w	r3, r3, #2
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b82      	ldr	r3, [pc, #520]	; (8000b28 <MX_GPIO_Init+0x2a0>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b7e      	ldr	r3, [pc, #504]	; (8000b28 <MX_GPIO_Init+0x2a0>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a7d      	ldr	r2, [pc, #500]	; (8000b28 <MX_GPIO_Init+0x2a0>)
 8000934:	f043 0308 	orr.w	r3, r3, #8
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b7b      	ldr	r3, [pc, #492]	; (8000b28 <MX_GPIO_Init+0x2a0>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0308 	and.w	r3, r3, #8
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	2108      	movs	r1, #8
 800094a:	4878      	ldr	r0, [pc, #480]	; (8000b2c <MX_GPIO_Init+0x2a4>)
 800094c:	f000 fe12 	bl	8001574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000950:	2201      	movs	r2, #1
 8000952:	2101      	movs	r1, #1
 8000954:	4876      	ldr	r0, [pc, #472]	; (8000b30 <MX_GPIO_Init+0x2a8>)
 8000956:	f000 fe0d 	bl	8001574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800095a:	2200      	movs	r2, #0
 800095c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000960:	4874      	ldr	r0, [pc, #464]	; (8000b34 <MX_GPIO_Init+0x2ac>)
 8000962:	f000 fe07 	bl	8001574 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000966:	2308      	movs	r3, #8
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096a:	2301      	movs	r3, #1
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	486b      	ldr	r0, [pc, #428]	; (8000b2c <MX_GPIO_Init+0x2a4>)
 800097e:	f000 fc47 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000982:	2301      	movs	r3, #1
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	4865      	ldr	r0, [pc, #404]	; (8000b30 <MX_GPIO_Init+0x2a8>)
 800099a:	f000 fc39 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800099e:	2308      	movs	r3, #8
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ae:	2305      	movs	r3, #5
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	485d      	ldr	r0, [pc, #372]	; (8000b30 <MX_GPIO_Init+0x2a8>)
 80009ba:	f000 fc29 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009be:	2301      	movs	r3, #1
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009c2:	4b5d      	ldr	r3, [pc, #372]	; (8000b38 <MX_GPIO_Init+0x2b0>)
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	485a      	ldr	r0, [pc, #360]	; (8000b3c <MX_GPIO_Init+0x2b4>)
 80009d2:	f000 fc1d 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80009d6:	2310      	movs	r3, #16
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009e6:	2306      	movs	r3, #6
 80009e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	4852      	ldr	r0, [pc, #328]	; (8000b3c <MX_GPIO_Init+0x2b4>)
 80009f2:	f000 fc0d 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80009f6:	23e0      	movs	r3, #224	; 0xe0
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a06:	2305      	movs	r3, #5
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	484a      	ldr	r0, [pc, #296]	; (8000b3c <MX_GPIO_Init+0x2b4>)
 8000a12:	f000 fbfd 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a16:	2304      	movs	r3, #4
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	4619      	mov	r1, r3
 8000a28:	4845      	ldr	r0, [pc, #276]	; (8000b40 <MX_GPIO_Init+0x2b8>)
 8000a2a:	f000 fbf1 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a34:	2302      	movs	r3, #2
 8000a36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a40:	2305      	movs	r3, #5
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4619      	mov	r1, r3
 8000a4a:	483d      	ldr	r0, [pc, #244]	; (8000b40 <MX_GPIO_Init+0x2b8>)
 8000a4c:	f000 fbe0 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a50:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a54:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a56:	2301      	movs	r3, #1
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	4832      	ldr	r0, [pc, #200]	; (8000b34 <MX_GPIO_Init+0x2ac>)
 8000a6a:	f000 fbd1 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a6e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a80:	2306      	movs	r3, #6
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4829      	ldr	r0, [pc, #164]	; (8000b30 <MX_GPIO_Init+0x2a8>)
 8000a8c:	f000 fbc0 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 031c 	add.w	r3, r7, #28
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4825      	ldr	r0, [pc, #148]	; (8000b3c <MX_GPIO_Init+0x2b4>)
 8000aa6:	f000 fbb3 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000aaa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000abc:	230a      	movs	r3, #10
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	481d      	ldr	r0, [pc, #116]	; (8000b3c <MX_GPIO_Init+0x2b4>)
 8000ac8:	f000 fba2 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000acc:	2320      	movs	r3, #32
 8000ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4619      	mov	r1, r3
 8000ade:	4815      	ldr	r0, [pc, #84]	; (8000b34 <MX_GPIO_Init+0x2ac>)
 8000ae0:	f000 fb96 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ae4:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aea:	2312      	movs	r3, #18
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000af6:	2304      	movs	r3, #4
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	480f      	ldr	r0, [pc, #60]	; (8000b40 <MX_GPIO_Init+0x2b8>)
 8000b02:	f000 fb85 	bl	8001210 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b06:	2302      	movs	r3, #2
 8000b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_GPIO_Init+0x2bc>)
 8000b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	4619      	mov	r1, r3
 8000b18:	4804      	ldr	r0, [pc, #16]	; (8000b2c <MX_GPIO_Init+0x2a4>)
 8000b1a:	f000 fb79 	bl	8001210 <HAL_GPIO_Init>

}
 8000b1e:	bf00      	nop
 8000b20:	3730      	adds	r7, #48	; 0x30
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	40020800 	.word	0x40020800
 8000b34:	40020c00 	.word	0x40020c00
 8000b38:	10110000 	.word	0x10110000
 8000b3c:	40020000 	.word	0x40020000
 8000b40:	40020400 	.word	0x40020400
 8000b44:	10120000 	.word	0x10120000

08000b48 <Bootloader_UartReadData>:
 *  1. Reads the first byte, which contains the length of the remaining command.
 *  2. Reads the full command based on the received length.
 *  3. Parses the command and executes the corresponding handler function.
 */
void Bootloader_UartReadData(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b0c0      	sub	sp, #256	; 0x100
 8000b4c:	af00      	add	r7, sp, #0
	/* Buffer to store the received command packet */
	uint8_t Local_uint8CmdPacket[255] ={0};
 8000b4e:	463b      	mov	r3, r7
 8000b50:	4618      	mov	r0, r3
 8000b52:	23ff      	movs	r3, #255	; 0xff
 8000b54:	461a      	mov	r2, r3
 8000b56:	2100      	movs	r1, #0
 8000b58:	f001 fefe 	bl	8002958 <memset>

   /* Infinite loop to keep listening for commands */
	while(1)
	{
       /* Clear the command packet buffer before reading a new command */
		memset(Local_uint8CmdPacket,0,255); // memset(array , value to put , size )
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	22ff      	movs	r2, #255	; 0xff
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f001 fef8 	bl	8002958 <memset>
		/*
		        * Step 1: Read the first byte from UART.
		        * This byte contains the "Length to Follow" field, which tells how many bytes
		        * are coming next in the packet.
        */
		HAL_UART_Receive(&huart2, Local_uint8CmdPacket, 1, HAL_MAX_DELAY);
 8000b68:	4639      	mov	r1, r7
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6e:	2201      	movs	r2, #1
 8000b70:	4836      	ldr	r0, [pc, #216]	; (8000c4c <Bootloader_UartReadData+0x104>)
 8000b72:	f001 fa61 	bl	8002038 <HAL_UART_Receive>

		/*
		        * Step 2: Read the remaining bytes of the command.
		        * It's size is the previous byte value .
	   */
		HAL_UART_Receive(&huart2, &Local_uint8CmdPacket[1], Local_uint8CmdPacket[0], HAL_MAX_DELAY);
 8000b76:	463b      	mov	r3, r7
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	463b      	mov	r3, r7
 8000b7e:	1c59      	adds	r1, r3, #1
 8000b80:	f04f 33ff 	mov.w	r3, #4294967295
 8000b84:	4831      	ldr	r0, [pc, #196]	; (8000c4c <Bootloader_UartReadData+0x104>)
 8000b86:	f001 fa57 	bl	8002038 <HAL_UART_Receive>

		/*
		        * Step 3: Check the command code (second byte in the packet)
		        * and call the corresponding handler function.
		        */
		switch(Local_uint8CmdPacket[1])     /*this byte includes the command code*/
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	785b      	ldrb	r3, [r3, #1]
 8000b8e:	3b51      	subs	r3, #81	; 0x51
 8000b90:	2b0c      	cmp	r3, #12
 8000b92:	d859      	bhi.n	8000c48 <Bootloader_UartReadData+0x100>
 8000b94:	a201      	add	r2, pc, #4	; (adr r2, 8000b9c <Bootloader_UartReadData+0x54>)
 8000b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b9a:	bf00      	nop
 8000b9c:	08000bd1 	.word	0x08000bd1
 8000ba0:	08000bdb 	.word	0x08000bdb
 8000ba4:	08000be5 	.word	0x08000be5
 8000ba8:	08000bef 	.word	0x08000bef
 8000bac:	08000bf9 	.word	0x08000bf9
 8000bb0:	08000c03 	.word	0x08000c03
 8000bb4:	08000c0d 	.word	0x08000c0d
 8000bb8:	08000c17 	.word	0x08000c17
 8000bbc:	08000c49 	.word	0x08000c49
 8000bc0:	08000c21 	.word	0x08000c21
 8000bc4:	08000c2b 	.word	0x08000c2b
 8000bc8:	08000c35 	.word	0x08000c35
 8000bcc:	08000c3f 	.word	0x08000c3f
		{
		case BL_GET_VESRION        :BL_voidHandleGetVERCmd(Local_uint8CmdPacket)                  ;        break;
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fcd4 	bl	8000580 <BL_voidHandleGetVERCmd>
 8000bd8:	e037      	b.n	8000c4a <Bootloader_UartReadData+0x102>
		case BL_GET_HELP           :BL_voidHandleGetHelpCmd(Local_uint8CmdPacket)                 ;        break;
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fd01 	bl	80005e4 <BL_voidHandleGetHelpCmd>
 8000be2:	e032      	b.n	8000c4a <Bootloader_UartReadData+0x102>
		case BL_GET_CID            :BL_voidHandleGetCIDcmd(Local_uint8CmdPacket)                  ;        break;
 8000be4:	463b      	mov	r3, r7
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff fd06 	bl	80005f8 <BL_voidHandleGetCIDcmd>
 8000bec:	e02d      	b.n	8000c4a <Bootloader_UartReadData+0x102>
		case BL_GET_RDP_STATUS     :BL_voidHandleGetRDPStatusCmd(Local_uint8CmdPacket)            ;        break;
 8000bee:	463b      	mov	r3, r7
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fd0b 	bl	800060c <BL_voidHandleGetRDPStatusCmd>
 8000bf6:	e028      	b.n	8000c4a <Bootloader_UartReadData+0x102>
		case BL_GO_TO_ADDR         :BL_voidHandleGoToAddressCmd(Local_uint8CmdPacket)             ;        break;
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fd10 	bl	8000620 <BL_voidHandleGoToAddressCmd>
 8000c00:	e023      	b.n	8000c4a <Bootloader_UartReadData+0x102>
		case BL_FLASH_ERASE        :BL_voidHandleFlashEraseCmd(Local_uint8CmdPacket)              ;        break;
 8000c02:	463b      	mov	r3, r7
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fd15 	bl	8000634 <BL_voidHandleFlashEraseCmd>
 8000c0a:	e01e      	b.n	8000c4a <Bootloader_UartReadData+0x102>
		case BL_MEM_WRITE          :BL_voidHandleMemWriteCmd(Local_uint8CmdPacket)                ;        break;
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fd1a 	bl	8000648 <BL_voidHandleMemWriteCmd>
 8000c14:	e019      	b.n	8000c4a <Bootloader_UartReadData+0x102>
		case BL_EN_RW_PROTECT      :BL_voidHandleEnRWProtectCmd(Local_uint8CmdPacket)             ;        break;
 8000c16:	463b      	mov	r3, r7
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fd1f 	bl	800065c <BL_voidHandleEnRWProtectCmd>
 8000c1e:	e014      	b.n	8000c4a <Bootloader_UartReadData+0x102>
		case BL_MEM_READ           :BL_voidHandleMemReadCmd(Local_uint8CmdPacket)                 ;        break;
 8000c20:	463b      	mov	r3, r7
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fd24 	bl	8000670 <BL_voidHandleMemReadCmd>
 8000c28:	e00f      	b.n	8000c4a <Bootloader_UartReadData+0x102>
		case BL_READ_SECTOR_STATUS :BL_voidHandleReadSectorStatusCmd(Local_uint8CmdPacket)        ;        break;
 8000c2a:	463b      	mov	r3, r7
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fd29 	bl	8000684 <BL_voidHandleReadSectorStatusCmd>
 8000c32:	e00a      	b.n	8000c4a <Bootloader_UartReadData+0x102>
		case BL_OTP_READ           :BL_voidHandleOTPReadCmd(Local_uint8CmdPacket)                 ;        break;
 8000c34:	463b      	mov	r3, r7
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fd2e 	bl	8000698 <BL_voidHandleOTPReadCmd>
 8000c3c:	e005      	b.n	8000c4a <Bootloader_UartReadData+0x102>
		case BL_DIS_WR_PROTECT     :BL_voidHandleDisWRProtectCmd(Local_uint8CmdPacket)            ;        break;
 8000c3e:	463b      	mov	r3, r7
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fd33 	bl	80006ac <BL_voidHandleDisWRProtectCmd>
 8000c46:	e000      	b.n	8000c4a <Bootloader_UartReadData+0x102>

		default : /*Invalid command from host */ break ;
 8000c48:	bf00      	nop
		memset(Local_uint8CmdPacket,0,255); // memset(array , value to put , size )
 8000c4a:	e787      	b.n	8000b5c <Bootloader_UartReadData+0x14>
 8000c4c:	20000030 	.word	0x20000030

08000c50 <Bootloader_JumpToUserApp>:
 * This function transfers execution from the Bootloader to the User Application.
 * It achieves this by setting the MSP (Main Stack Pointer) and jumping to the
 * Reset Handler of the user application.
 */
void Bootloader_JumpToUserApp(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
	/*
		     * Step 1: Configure the MSP (Main Stack Pointer) for the User Application.
		     * The MSP value is stored at the first address of the application's Vector Table,
		     * which is located at the base address of FLASH Sector 2.
    */
	Local_uint32MSPVal =  *((volatile uint32_t*)FLASH_SECTOR2_BASE_ADDRESS);
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <Bootloader_JumpToUserApp+0x28>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	60fb      	str	r3, [r7, #12]

	/*
	     * Step 2: Load the User Application MSP value into the MSP register.
	     * This ensures that the stack pointer is correctly set before executing the application.
    */
	__asm volatile("MSR MSP ,%0"::"r"(Local_uint32MSPVal));
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f383 8808 	msr	MSP, r3

	/*
	     * Step 3: Retrieve the Reset Handler address of the User Application.
	     * This is stored at the second entry in the Vector Table (offset +4 from base address).
   */
	ResetHandlerAddress = *((volatile uint32_t*)(FLASH_SECTOR2_BASE_ADDRESS+ 4));
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <Bootloader_JumpToUserApp+0x2c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	60bb      	str	r3, [r7, #8]
	/*
	     * Step 4: Assign the Reset Handler address to the function pointer.
	     * This allows the program to jump to the application by calling this function.
   */
	App_ResetHandle =(void*)ResetHandlerAddress;
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	607b      	str	r3, [r7, #4]

	/*
	     * Step 5: Jump to the User Application's Reset Handler.
	     * This effectively transfers control from the Bootloader to the application.
   */
	App_ResetHandle();
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4798      	blx	r3

}
 8000c70:	bf00      	nop
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	08008000 	.word	0x08008000
 8000c7c:	08008004 	.word	0x08008004

08000c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <HAL_MspInit+0x4c>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	4a0f      	ldr	r2, [pc, #60]	; (8000cdc <HAL_MspInit+0x4c>)
 8000ca0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <HAL_MspInit+0x4c>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	603b      	str	r3, [r7, #0]
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <HAL_MspInit+0x4c>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	4a08      	ldr	r2, [pc, #32]	; (8000cdc <HAL_MspInit+0x4c>)
 8000cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_MspInit+0x4c>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cce:	2007      	movs	r0, #7
 8000cd0:	f000 fa24 	bl	800111c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40023800 	.word	0x40023800

08000ce0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0b      	ldr	r2, [pc, #44]	; (8000d1c <HAL_CRC_MspInit+0x3c>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d10d      	bne.n	8000d0e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <HAL_CRC_MspInit+0x40>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a09      	ldr	r2, [pc, #36]	; (8000d20 <HAL_CRC_MspInit+0x40>)
 8000cfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <HAL_CRC_MspInit+0x40>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000d0e:	bf00      	nop
 8000d10:	3714      	adds	r7, #20
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	40023000 	.word	0x40023000
 8000d20:	40023800 	.word	0x40023800

08000d24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	; 0x28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a19      	ldr	r2, [pc, #100]	; (8000da8 <HAL_UART_MspInit+0x84>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d12b      	bne.n	8000d9e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	4b18      	ldr	r3, [pc, #96]	; (8000dac <HAL_UART_MspInit+0x88>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	4a17      	ldr	r2, [pc, #92]	; (8000dac <HAL_UART_MspInit+0x88>)
 8000d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d54:	6413      	str	r3, [r2, #64]	; 0x40
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <HAL_UART_MspInit+0x88>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <HAL_UART_MspInit+0x88>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a10      	ldr	r2, [pc, #64]	; (8000dac <HAL_UART_MspInit+0x88>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <HAL_UART_MspInit+0x88>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d7e:	230c      	movs	r3, #12
 8000d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d8e:	2307      	movs	r3, #7
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	4619      	mov	r1, r3
 8000d98:	4805      	ldr	r0, [pc, #20]	; (8000db0 <HAL_UART_MspInit+0x8c>)
 8000d9a:	f000 fa39 	bl	8001210 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d9e:	bf00      	nop
 8000da0:	3728      	adds	r7, #40	; 0x28
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40004400 	.word	0x40004400
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020000 	.word	0x40020000

08000db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <HardFault_Handler+0x4>

08000dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <MemManage_Handler+0x4>

08000dce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <BusFault_Handler+0x4>

08000dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <UsageFault_Handler+0x4>

08000dda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e08:	f000 f894 	bl	8000f34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <SystemInit+0x28>)
 8000e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1a:	4a07      	ldr	r2, [pc, #28]	; (8000e38 <SystemInit+0x28>)
 8000e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e24:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <SystemInit+0x28>)
 8000e26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e2a:	609a      	str	r2, [r3, #8]
#endif
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e74 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e42:	e003      	b.n	8000e4c <LoopCopyDataInit>

08000e44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e4a:	3104      	adds	r1, #4

08000e4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e4c:	480b      	ldr	r0, [pc, #44]	; (8000e7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e54:	d3f6      	bcc.n	8000e44 <CopyDataInit>
  ldr  r2, =_sbss
 8000e56:	4a0b      	ldr	r2, [pc, #44]	; (8000e84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e58:	e002      	b.n	8000e60 <LoopFillZerobss>

08000e5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e5c:	f842 3b04 	str.w	r3, [r2], #4

08000e60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e64:	d3f9      	bcc.n	8000e5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e66:	f7ff ffd3 	bl	8000e10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e6a:	f001 fd51 	bl	8002910 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e6e:	f7ff fc27 	bl	80006c0 <main>
  bx  lr    
 8000e72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e74:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e78:	080029c0 	.word	0x080029c0
  ldr  r0, =_sdata
 8000e7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e80:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000e84:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000e88:	20000074 	.word	0x20000074

08000e8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e8c:	e7fe      	b.n	8000e8c <ADC_IRQHandler>
	...

08000e90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e94:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0d      	ldr	r2, [pc, #52]	; (8000ed0 <HAL_Init+0x40>)
 8000e9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <HAL_Init+0x40>)
 8000ea6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <HAL_Init+0x40>)
 8000eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb8:	2003      	movs	r0, #3
 8000eba:	f000 f92f 	bl	800111c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	f000 f808 	bl	8000ed4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec4:	f7ff fee4 	bl	8000c90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40023c00 	.word	0x40023c00

08000ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <HAL_InitTick+0x54>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <HAL_InitTick+0x58>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 f939 	bl	800116a <HAL_SYSTICK_Config>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e00e      	b.n	8000f20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b0f      	cmp	r3, #15
 8000f06:	d80a      	bhi.n	8000f1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	6879      	ldr	r1, [r7, #4]
 8000f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f10:	f000 f90f 	bl	8001132 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f14:	4a06      	ldr	r2, [pc, #24]	; (8000f30 <HAL_InitTick+0x5c>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	e000      	b.n	8000f20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	20000008 	.word	0x20000008
 8000f30:	20000004 	.word	0x20000004

08000f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_IncTick+0x20>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_IncTick+0x24>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4413      	add	r3, r2
 8000f44:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <HAL_IncTick+0x24>)
 8000f46:	6013      	str	r3, [r2, #0]
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000008 	.word	0x20000008
 8000f58:	20000070 	.word	0x20000070

08000f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <HAL_GetTick+0x14>)
 8000f62:	681b      	ldr	r3, [r3, #0]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000070 	.word	0x20000070

08000f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f7c:	f7ff ffee 	bl	8000f5c <HAL_GetTick>
 8000f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f8c:	d005      	beq.n	8000f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <HAL_Delay+0x40>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4413      	add	r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f9a:	bf00      	nop
 8000f9c:	f7ff ffde 	bl	8000f5c <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d8f7      	bhi.n	8000f9c <HAL_Delay+0x28>
  {
  }
}
 8000fac:	bf00      	nop
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000008 	.word	0x20000008

08000fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fea:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	60d3      	str	r3, [r2, #12]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <__NVIC_GetPriorityGrouping+0x18>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	0a1b      	lsrs	r3, r3, #8
 800100a:	f003 0307 	and.w	r3, r3, #7
}
 800100e:	4618      	mov	r0, r3
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	2b00      	cmp	r3, #0
 800102e:	db0a      	blt.n	8001046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	b2da      	uxtb	r2, r3
 8001034:	490c      	ldr	r1, [pc, #48]	; (8001068 <__NVIC_SetPriority+0x4c>)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	0112      	lsls	r2, r2, #4
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	440b      	add	r3, r1
 8001040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001044:	e00a      	b.n	800105c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4908      	ldr	r1, [pc, #32]	; (800106c <__NVIC_SetPriority+0x50>)
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	f003 030f 	and.w	r3, r3, #15
 8001052:	3b04      	subs	r3, #4
 8001054:	0112      	lsls	r2, r2, #4
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	440b      	add	r3, r1
 800105a:	761a      	strb	r2, [r3, #24]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000e100 	.word	0xe000e100
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001070:	b480      	push	{r7}
 8001072:	b089      	sub	sp, #36	; 0x24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f1c3 0307 	rsb	r3, r3, #7
 800108a:	2b04      	cmp	r3, #4
 800108c:	bf28      	it	cs
 800108e:	2304      	movcs	r3, #4
 8001090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3304      	adds	r3, #4
 8001096:	2b06      	cmp	r3, #6
 8001098:	d902      	bls.n	80010a0 <NVIC_EncodePriority+0x30>
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3b03      	subs	r3, #3
 800109e:	e000      	b.n	80010a2 <NVIC_EncodePriority+0x32>
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	f04f 32ff 	mov.w	r2, #4294967295
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43da      	mvns	r2, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	401a      	ands	r2, r3
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b8:	f04f 31ff 	mov.w	r1, #4294967295
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	fa01 f303 	lsl.w	r3, r1, r3
 80010c2:	43d9      	mvns	r1, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	4313      	orrs	r3, r2
         );
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3724      	adds	r7, #36	; 0x24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
	...

080010d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e8:	d301      	bcc.n	80010ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00f      	b.n	800110e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ee:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <SysTick_Config+0x40>)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f6:	210f      	movs	r1, #15
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295
 80010fc:	f7ff ff8e 	bl	800101c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <SysTick_Config+0x40>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001106:	4b04      	ldr	r3, [pc, #16]	; (8001118 <SysTick_Config+0x40>)
 8001108:	2207      	movs	r2, #7
 800110a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	e000e010 	.word	0xe000e010

0800111c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ff47 	bl	8000fb8 <__NVIC_SetPriorityGrouping>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001132:	b580      	push	{r7, lr}
 8001134:	b086      	sub	sp, #24
 8001136:	af00      	add	r7, sp, #0
 8001138:	4603      	mov	r3, r0
 800113a:	60b9      	str	r1, [r7, #8]
 800113c:	607a      	str	r2, [r7, #4]
 800113e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001144:	f7ff ff5c 	bl	8001000 <__NVIC_GetPriorityGrouping>
 8001148:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	68b9      	ldr	r1, [r7, #8]
 800114e:	6978      	ldr	r0, [r7, #20]
 8001150:	f7ff ff8e 	bl	8001070 <NVIC_EncodePriority>
 8001154:	4602      	mov	r2, r0
 8001156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115a:	4611      	mov	r1, r2
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff5d 	bl	800101c <__NVIC_SetPriority>
}
 8001162:	bf00      	nop
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ffb0 	bl	80010d8 <SysTick_Config>
 8001178:	4603      	mov	r3, r0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d101      	bne.n	8001194 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e00e      	b.n	80011b2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	795b      	ldrb	r3, [r3, #5]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d105      	bne.n	80011aa <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff fd9b 	bl	8000ce0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2201      	movs	r2, #1
 80011ae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b087      	sub	sp, #28
 80011be:	af00      	add	r7, sp, #0
 80011c0:	60f8      	str	r0, [r7, #12]
 80011c2:	60b9      	str	r1, [r7, #8]
 80011c4:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2202      	movs	r2, #2
 80011ce:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	e00a      	b.n	80011ec <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	441a      	add	r2, r3
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	6812      	ldr	r2, [r2, #0]
 80011e4:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	3301      	adds	r3, #1
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d3f0      	bcc.n	80011d6 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2201      	movs	r2, #1
 8001200:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001202:	693b      	ldr	r3, [r7, #16]
}
 8001204:	4618      	mov	r0, r3
 8001206:	371c      	adds	r7, #28
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001210:	b480      	push	{r7}
 8001212:	b089      	sub	sp, #36	; 0x24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
 800122a:	e16b      	b.n	8001504 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800122c:	2201      	movs	r2, #1
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	429a      	cmp	r2, r3
 8001246:	f040 815a 	bne.w	80014fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d00b      	beq.n	800126a <HAL_GPIO_Init+0x5a>
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2b02      	cmp	r3, #2
 8001258:	d007      	beq.n	800126a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800125e:	2b11      	cmp	r3, #17
 8001260:	d003      	beq.n	800126a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b12      	cmp	r3, #18
 8001268:	d130      	bne.n	80012cc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	2203      	movs	r2, #3
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	68da      	ldr	r2, [r3, #12]
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012a0:	2201      	movs	r2, #1
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	091b      	lsrs	r3, r3, #4
 80012b6:	f003 0201 	and.w	r2, r3, #1
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	2203      	movs	r2, #3
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2b02      	cmp	r3, #2
 8001302:	d003      	beq.n	800130c <HAL_GPIO_Init+0xfc>
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b12      	cmp	r3, #18
 800130a:	d123      	bne.n	8001354 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	08da      	lsrs	r2, r3, #3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3208      	adds	r2, #8
 8001314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001318:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	220f      	movs	r2, #15
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	691a      	ldr	r2, [r3, #16]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	08da      	lsrs	r2, r3, #3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	3208      	adds	r2, #8
 800134e:	69b9      	ldr	r1, [r7, #24]
 8001350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	2203      	movs	r2, #3
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0203 	and.w	r2, r3, #3
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001390:	2b00      	cmp	r3, #0
 8001392:	f000 80b4 	beq.w	80014fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	4b5f      	ldr	r3, [pc, #380]	; (8001518 <HAL_GPIO_Init+0x308>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	4a5e      	ldr	r2, [pc, #376]	; (8001518 <HAL_GPIO_Init+0x308>)
 80013a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a4:	6453      	str	r3, [r2, #68]	; 0x44
 80013a6:	4b5c      	ldr	r3, [pc, #368]	; (8001518 <HAL_GPIO_Init+0x308>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013b2:	4a5a      	ldr	r2, [pc, #360]	; (800151c <HAL_GPIO_Init+0x30c>)
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	089b      	lsrs	r3, r3, #2
 80013b8:	3302      	adds	r3, #2
 80013ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f003 0303 	and.w	r3, r3, #3
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	220f      	movs	r2, #15
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4013      	ands	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a51      	ldr	r2, [pc, #324]	; (8001520 <HAL_GPIO_Init+0x310>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d02b      	beq.n	8001436 <HAL_GPIO_Init+0x226>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a50      	ldr	r2, [pc, #320]	; (8001524 <HAL_GPIO_Init+0x314>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d025      	beq.n	8001432 <HAL_GPIO_Init+0x222>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a4f      	ldr	r2, [pc, #316]	; (8001528 <HAL_GPIO_Init+0x318>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d01f      	beq.n	800142e <HAL_GPIO_Init+0x21e>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a4e      	ldr	r2, [pc, #312]	; (800152c <HAL_GPIO_Init+0x31c>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d019      	beq.n	800142a <HAL_GPIO_Init+0x21a>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a4d      	ldr	r2, [pc, #308]	; (8001530 <HAL_GPIO_Init+0x320>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d013      	beq.n	8001426 <HAL_GPIO_Init+0x216>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a4c      	ldr	r2, [pc, #304]	; (8001534 <HAL_GPIO_Init+0x324>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d00d      	beq.n	8001422 <HAL_GPIO_Init+0x212>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a4b      	ldr	r2, [pc, #300]	; (8001538 <HAL_GPIO_Init+0x328>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d007      	beq.n	800141e <HAL_GPIO_Init+0x20e>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a4a      	ldr	r2, [pc, #296]	; (800153c <HAL_GPIO_Init+0x32c>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d101      	bne.n	800141a <HAL_GPIO_Init+0x20a>
 8001416:	2307      	movs	r3, #7
 8001418:	e00e      	b.n	8001438 <HAL_GPIO_Init+0x228>
 800141a:	2308      	movs	r3, #8
 800141c:	e00c      	b.n	8001438 <HAL_GPIO_Init+0x228>
 800141e:	2306      	movs	r3, #6
 8001420:	e00a      	b.n	8001438 <HAL_GPIO_Init+0x228>
 8001422:	2305      	movs	r3, #5
 8001424:	e008      	b.n	8001438 <HAL_GPIO_Init+0x228>
 8001426:	2304      	movs	r3, #4
 8001428:	e006      	b.n	8001438 <HAL_GPIO_Init+0x228>
 800142a:	2303      	movs	r3, #3
 800142c:	e004      	b.n	8001438 <HAL_GPIO_Init+0x228>
 800142e:	2302      	movs	r3, #2
 8001430:	e002      	b.n	8001438 <HAL_GPIO_Init+0x228>
 8001432:	2301      	movs	r3, #1
 8001434:	e000      	b.n	8001438 <HAL_GPIO_Init+0x228>
 8001436:	2300      	movs	r3, #0
 8001438:	69fa      	ldr	r2, [r7, #28]
 800143a:	f002 0203 	and.w	r2, r2, #3
 800143e:	0092      	lsls	r2, r2, #2
 8001440:	4093      	lsls	r3, r2
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001448:	4934      	ldr	r1, [pc, #208]	; (800151c <HAL_GPIO_Init+0x30c>)
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	089b      	lsrs	r3, r3, #2
 800144e:	3302      	adds	r3, #2
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001456:	4b3a      	ldr	r3, [pc, #232]	; (8001540 <HAL_GPIO_Init+0x330>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	43db      	mvns	r3, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800147a:	4a31      	ldr	r2, [pc, #196]	; (8001540 <HAL_GPIO_Init+0x330>)
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001480:	4b2f      	ldr	r3, [pc, #188]	; (8001540 <HAL_GPIO_Init+0x330>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014a4:	4a26      	ldr	r2, [pc, #152]	; (8001540 <HAL_GPIO_Init+0x330>)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014aa:	4b25      	ldr	r3, [pc, #148]	; (8001540 <HAL_GPIO_Init+0x330>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4013      	ands	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ce:	4a1c      	ldr	r2, [pc, #112]	; (8001540 <HAL_GPIO_Init+0x330>)
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014d4:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <HAL_GPIO_Init+0x330>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014f8:	4a11      	ldr	r2, [pc, #68]	; (8001540 <HAL_GPIO_Init+0x330>)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3301      	adds	r3, #1
 8001502:	61fb      	str	r3, [r7, #28]
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	2b0f      	cmp	r3, #15
 8001508:	f67f ae90 	bls.w	800122c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800150c:	bf00      	nop
 800150e:	3724      	adds	r7, #36	; 0x24
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	40023800 	.word	0x40023800
 800151c:	40013800 	.word	0x40013800
 8001520:	40020000 	.word	0x40020000
 8001524:	40020400 	.word	0x40020400
 8001528:	40020800 	.word	0x40020800
 800152c:	40020c00 	.word	0x40020c00
 8001530:	40021000 	.word	0x40021000
 8001534:	40021400 	.word	0x40021400
 8001538:	40021800 	.word	0x40021800
 800153c:	40021c00 	.word	0x40021c00
 8001540:	40013c00 	.word	0x40013c00

08001544 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691a      	ldr	r2, [r3, #16]
 8001554:	887b      	ldrh	r3, [r7, #2]
 8001556:	4013      	ands	r3, r2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d002      	beq.n	8001562 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800155c:	2301      	movs	r3, #1
 800155e:	73fb      	strb	r3, [r7, #15]
 8001560:	e001      	b.n	8001566 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001566:	7bfb      	ldrb	r3, [r7, #15]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	807b      	strh	r3, [r7, #2]
 8001580:	4613      	mov	r3, r2
 8001582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001584:	787b      	ldrb	r3, [r7, #1]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800158a:	887a      	ldrh	r2, [r7, #2]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001590:	e003      	b.n	800159a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001592:	887b      	ldrh	r3, [r7, #2]
 8001594:	041a      	lsls	r2, r3, #16
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	619a      	str	r2, [r3, #24]
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e25b      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d075      	beq.n	80016b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015c6:	4ba3      	ldr	r3, [pc, #652]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 030c 	and.w	r3, r3, #12
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	d00c      	beq.n	80015ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015d2:	4ba0      	ldr	r3, [pc, #640]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d112      	bne.n	8001604 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015de:	4b9d      	ldr	r3, [pc, #628]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015ea:	d10b      	bne.n	8001604 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ec:	4b99      	ldr	r3, [pc, #612]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d05b      	beq.n	80016b0 <HAL_RCC_OscConfig+0x108>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d157      	bne.n	80016b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e236      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800160c:	d106      	bne.n	800161c <HAL_RCC_OscConfig+0x74>
 800160e:	4b91      	ldr	r3, [pc, #580]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a90      	ldr	r2, [pc, #576]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	e01d      	b.n	8001658 <HAL_RCC_OscConfig+0xb0>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001624:	d10c      	bne.n	8001640 <HAL_RCC_OscConfig+0x98>
 8001626:	4b8b      	ldr	r3, [pc, #556]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a8a      	ldr	r2, [pc, #552]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 800162c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	4b88      	ldr	r3, [pc, #544]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a87      	ldr	r2, [pc, #540]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	e00b      	b.n	8001658 <HAL_RCC_OscConfig+0xb0>
 8001640:	4b84      	ldr	r3, [pc, #528]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a83      	ldr	r2, [pc, #524]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	4b81      	ldr	r3, [pc, #516]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a80      	ldr	r2, [pc, #512]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001656:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d013      	beq.n	8001688 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001660:	f7ff fc7c 	bl	8000f5c <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001668:	f7ff fc78 	bl	8000f5c <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b64      	cmp	r3, #100	; 0x64
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e1fb      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167a:	4b76      	ldr	r3, [pc, #472]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f0      	beq.n	8001668 <HAL_RCC_OscConfig+0xc0>
 8001686:	e014      	b.n	80016b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff fc68 	bl	8000f5c <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001690:	f7ff fc64 	bl	8000f5c <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b64      	cmp	r3, #100	; 0x64
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e1e7      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a2:	4b6c      	ldr	r3, [pc, #432]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0xe8>
 80016ae:	e000      	b.n	80016b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d063      	beq.n	8001786 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016be:	4b65      	ldr	r3, [pc, #404]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 030c 	and.w	r3, r3, #12
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00b      	beq.n	80016e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ca:	4b62      	ldr	r3, [pc, #392]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016d2:	2b08      	cmp	r3, #8
 80016d4:	d11c      	bne.n	8001710 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016d6:	4b5f      	ldr	r3, [pc, #380]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d116      	bne.n	8001710 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e2:	4b5c      	ldr	r3, [pc, #368]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d005      	beq.n	80016fa <HAL_RCC_OscConfig+0x152>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d001      	beq.n	80016fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e1bb      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fa:	4b56      	ldr	r3, [pc, #344]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	4952      	ldr	r1, [pc, #328]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 800170a:	4313      	orrs	r3, r2
 800170c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800170e:	e03a      	b.n	8001786 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d020      	beq.n	800175a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001718:	4b4f      	ldr	r3, [pc, #316]	; (8001858 <HAL_RCC_OscConfig+0x2b0>)
 800171a:	2201      	movs	r2, #1
 800171c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171e:	f7ff fc1d 	bl	8000f5c <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001726:	f7ff fc19 	bl	8000f5c <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e19c      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001738:	4b46      	ldr	r3, [pc, #280]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0f0      	beq.n	8001726 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001744:	4b43      	ldr	r3, [pc, #268]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	4940      	ldr	r1, [pc, #256]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001754:	4313      	orrs	r3, r2
 8001756:	600b      	str	r3, [r1, #0]
 8001758:	e015      	b.n	8001786 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800175a:	4b3f      	ldr	r3, [pc, #252]	; (8001858 <HAL_RCC_OscConfig+0x2b0>)
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001760:	f7ff fbfc 	bl	8000f5c <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001768:	f7ff fbf8 	bl	8000f5c <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e17b      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800177a:	4b36      	ldr	r3, [pc, #216]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f0      	bne.n	8001768 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	2b00      	cmp	r3, #0
 8001790:	d030      	beq.n	80017f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d016      	beq.n	80017c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800179a:	4b30      	ldr	r3, [pc, #192]	; (800185c <HAL_RCC_OscConfig+0x2b4>)
 800179c:	2201      	movs	r2, #1
 800179e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a0:	f7ff fbdc 	bl	8000f5c <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017a8:	f7ff fbd8 	bl	8000f5c <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e15b      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ba:	4b26      	ldr	r3, [pc, #152]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 80017bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0f0      	beq.n	80017a8 <HAL_RCC_OscConfig+0x200>
 80017c6:	e015      	b.n	80017f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017c8:	4b24      	ldr	r3, [pc, #144]	; (800185c <HAL_RCC_OscConfig+0x2b4>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ce:	f7ff fbc5 	bl	8000f5c <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017d6:	f7ff fbc1 	bl	8000f5c <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e144      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e8:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 80017ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1f0      	bne.n	80017d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 80a0 	beq.w	8001942 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001802:	2300      	movs	r3, #0
 8001804:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001806:	4b13      	ldr	r3, [pc, #76]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d10f      	bne.n	8001832 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	4a0e      	ldr	r2, [pc, #56]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 800181c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001820:	6413      	str	r3, [r2, #64]	; 0x40
 8001822:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <HAL_RCC_OscConfig+0x2ac>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800182e:	2301      	movs	r3, #1
 8001830:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <HAL_RCC_OscConfig+0x2b8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183a:	2b00      	cmp	r3, #0
 800183c:	d121      	bne.n	8001882 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800183e:	4b08      	ldr	r3, [pc, #32]	; (8001860 <HAL_RCC_OscConfig+0x2b8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a07      	ldr	r2, [pc, #28]	; (8001860 <HAL_RCC_OscConfig+0x2b8>)
 8001844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800184a:	f7ff fb87 	bl	8000f5c <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001850:	e011      	b.n	8001876 <HAL_RCC_OscConfig+0x2ce>
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800
 8001858:	42470000 	.word	0x42470000
 800185c:	42470e80 	.word	0x42470e80
 8001860:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001864:	f7ff fb7a 	bl	8000f5c <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e0fd      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001876:	4b81      	ldr	r3, [pc, #516]	; (8001a7c <HAL_RCC_OscConfig+0x4d4>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0f0      	beq.n	8001864 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d106      	bne.n	8001898 <HAL_RCC_OscConfig+0x2f0>
 800188a:	4b7d      	ldr	r3, [pc, #500]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 800188c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188e:	4a7c      	ldr	r2, [pc, #496]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6713      	str	r3, [r2, #112]	; 0x70
 8001896:	e01c      	b.n	80018d2 <HAL_RCC_OscConfig+0x32a>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	2b05      	cmp	r3, #5
 800189e:	d10c      	bne.n	80018ba <HAL_RCC_OscConfig+0x312>
 80018a0:	4b77      	ldr	r3, [pc, #476]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 80018a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a4:	4a76      	ldr	r2, [pc, #472]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 80018a6:	f043 0304 	orr.w	r3, r3, #4
 80018aa:	6713      	str	r3, [r2, #112]	; 0x70
 80018ac:	4b74      	ldr	r3, [pc, #464]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 80018ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b0:	4a73      	ldr	r2, [pc, #460]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	6713      	str	r3, [r2, #112]	; 0x70
 80018b8:	e00b      	b.n	80018d2 <HAL_RCC_OscConfig+0x32a>
 80018ba:	4b71      	ldr	r3, [pc, #452]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 80018bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018be:	4a70      	ldr	r2, [pc, #448]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 80018c0:	f023 0301 	bic.w	r3, r3, #1
 80018c4:	6713      	str	r3, [r2, #112]	; 0x70
 80018c6:	4b6e      	ldr	r3, [pc, #440]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 80018c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ca:	4a6d      	ldr	r2, [pc, #436]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 80018cc:	f023 0304 	bic.w	r3, r3, #4
 80018d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d015      	beq.n	8001906 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018da:	f7ff fb3f 	bl	8000f5c <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e0:	e00a      	b.n	80018f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e2:	f7ff fb3b 	bl	8000f5c <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e0bc      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f8:	4b61      	ldr	r3, [pc, #388]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 80018fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0ee      	beq.n	80018e2 <HAL_RCC_OscConfig+0x33a>
 8001904:	e014      	b.n	8001930 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001906:	f7ff fb29 	bl	8000f5c <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800190c:	e00a      	b.n	8001924 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800190e:	f7ff fb25 	bl	8000f5c <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	f241 3288 	movw	r2, #5000	; 0x1388
 800191c:	4293      	cmp	r3, r2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e0a6      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001924:	4b56      	ldr	r3, [pc, #344]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 8001926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1ee      	bne.n	800190e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001930:	7dfb      	ldrb	r3, [r7, #23]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d105      	bne.n	8001942 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001936:	4b52      	ldr	r3, [pc, #328]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	4a51      	ldr	r2, [pc, #324]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 800193c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001940:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	2b00      	cmp	r3, #0
 8001948:	f000 8092 	beq.w	8001a70 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800194c:	4b4c      	ldr	r3, [pc, #304]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 030c 	and.w	r3, r3, #12
 8001954:	2b08      	cmp	r3, #8
 8001956:	d05c      	beq.n	8001a12 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	2b02      	cmp	r3, #2
 800195e:	d141      	bne.n	80019e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001960:	4b48      	ldr	r3, [pc, #288]	; (8001a84 <HAL_RCC_OscConfig+0x4dc>)
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001966:	f7ff faf9 	bl	8000f5c <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800196e:	f7ff faf5 	bl	8000f5c <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e078      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001980:	4b3f      	ldr	r3, [pc, #252]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1f0      	bne.n	800196e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69da      	ldr	r2, [r3, #28]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	431a      	orrs	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	019b      	lsls	r3, r3, #6
 800199c:	431a      	orrs	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a2:	085b      	lsrs	r3, r3, #1
 80019a4:	3b01      	subs	r3, #1
 80019a6:	041b      	lsls	r3, r3, #16
 80019a8:	431a      	orrs	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ae:	061b      	lsls	r3, r3, #24
 80019b0:	4933      	ldr	r1, [pc, #204]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b6:	4b33      	ldr	r3, [pc, #204]	; (8001a84 <HAL_RCC_OscConfig+0x4dc>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019bc:	f7ff face 	bl	8000f5c <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c4:	f7ff faca 	bl	8000f5c <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e04d      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d6:	4b2a      	ldr	r3, [pc, #168]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0x41c>
 80019e2:	e045      	b.n	8001a70 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e4:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <HAL_RCC_OscConfig+0x4dc>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ea:	f7ff fab7 	bl	8000f5c <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f2:	f7ff fab3 	bl	8000f5c <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e036      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a04:	4b1e      	ldr	r3, [pc, #120]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1f0      	bne.n	80019f2 <HAL_RCC_OscConfig+0x44a>
 8001a10:	e02e      	b.n	8001a70 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d101      	bne.n	8001a1e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e029      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a1e:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <HAL_RCC_OscConfig+0x4d8>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d11c      	bne.n	8001a6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d115      	bne.n	8001a6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a46:	4013      	ands	r3, r2
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d10d      	bne.n	8001a6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d106      	bne.n	8001a6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d001      	beq.n	8001a70 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e000      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40007000 	.word	0x40007000
 8001a80:	40023800 	.word	0x40023800
 8001a84:	42470060 	.word	0x42470060

08001a88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e0cc      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a9c:	4b68      	ldr	r3, [pc, #416]	; (8001c40 <HAL_RCC_ClockConfig+0x1b8>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 030f 	and.w	r3, r3, #15
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d90c      	bls.n	8001ac4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aaa:	4b65      	ldr	r3, [pc, #404]	; (8001c40 <HAL_RCC_ClockConfig+0x1b8>)
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab2:	4b63      	ldr	r3, [pc, #396]	; (8001c40 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d001      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e0b8      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d020      	beq.n	8001b12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d005      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001adc:	4b59      	ldr	r3, [pc, #356]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	4a58      	ldr	r2, [pc, #352]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ae6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001af4:	4b53      	ldr	r3, [pc, #332]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	4a52      	ldr	r2, [pc, #328]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001afe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b00:	4b50      	ldr	r3, [pc, #320]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	494d      	ldr	r1, [pc, #308]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d044      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d107      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b26:	4b47      	ldr	r3, [pc, #284]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d119      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e07f      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d003      	beq.n	8001b46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b42:	2b03      	cmp	r3, #3
 8001b44:	d107      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b46:	4b3f      	ldr	r3, [pc, #252]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d109      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e06f      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b56:	4b3b      	ldr	r3, [pc, #236]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e067      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b66:	4b37      	ldr	r3, [pc, #220]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f023 0203 	bic.w	r2, r3, #3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	4934      	ldr	r1, [pc, #208]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b78:	f7ff f9f0 	bl	8000f5c <HAL_GetTick>
 8001b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7e:	e00a      	b.n	8001b96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b80:	f7ff f9ec 	bl	8000f5c <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e04f      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b96:	4b2b      	ldr	r3, [pc, #172]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 020c 	and.w	r2, r3, #12
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d1eb      	bne.n	8001b80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ba8:	4b25      	ldr	r3, [pc, #148]	; (8001c40 <HAL_RCC_ClockConfig+0x1b8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 030f 	and.w	r3, r3, #15
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d20c      	bcs.n	8001bd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb6:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bbe:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d001      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e032      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d008      	beq.n	8001bee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bdc:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	4916      	ldr	r1, [pc, #88]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0308 	and.w	r3, r3, #8
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d009      	beq.n	8001c0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bfa:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	490e      	ldr	r1, [pc, #56]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c0e:	f000 f821 	bl	8001c54 <HAL_RCC_GetSysClockFreq>
 8001c12:	4601      	mov	r1, r0
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	091b      	lsrs	r3, r3, #4
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001c20:	5cd3      	ldrb	r3, [r2, r3]
 8001c22:	fa21 f303 	lsr.w	r3, r1, r3
 8001c26:	4a09      	ldr	r2, [pc, #36]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c2a:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <HAL_RCC_ClockConfig+0x1c8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff f950 	bl	8000ed4 <HAL_InitTick>

  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40023c00 	.word	0x40023c00
 8001c44:	40023800 	.word	0x40023800
 8001c48:	08002998 	.word	0x08002998
 8001c4c:	20000000 	.word	0x20000000
 8001c50:	20000004 	.word	0x20000004

08001c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	607b      	str	r3, [r7, #4]
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	2300      	movs	r3, #0
 8001c64:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c6a:	4b63      	ldr	r3, [pc, #396]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 030c 	and.w	r3, r3, #12
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	d007      	beq.n	8001c86 <HAL_RCC_GetSysClockFreq+0x32>
 8001c76:	2b08      	cmp	r3, #8
 8001c78:	d008      	beq.n	8001c8c <HAL_RCC_GetSysClockFreq+0x38>
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f040 80b4 	bne.w	8001de8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c80:	4b5e      	ldr	r3, [pc, #376]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001c82:	60bb      	str	r3, [r7, #8]
       break;
 8001c84:	e0b3      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c86:	4b5e      	ldr	r3, [pc, #376]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001c88:	60bb      	str	r3, [r7, #8]
      break;
 8001c8a:	e0b0      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c8c:	4b5a      	ldr	r3, [pc, #360]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c94:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c96:	4b58      	ldr	r3, [pc, #352]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d04a      	beq.n	8001d38 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca2:	4b55      	ldr	r3, [pc, #340]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	099b      	lsrs	r3, r3, #6
 8001ca8:	f04f 0400 	mov.w	r4, #0
 8001cac:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001cb0:	f04f 0200 	mov.w	r2, #0
 8001cb4:	ea03 0501 	and.w	r5, r3, r1
 8001cb8:	ea04 0602 	and.w	r6, r4, r2
 8001cbc:	4629      	mov	r1, r5
 8001cbe:	4632      	mov	r2, r6
 8001cc0:	f04f 0300 	mov.w	r3, #0
 8001cc4:	f04f 0400 	mov.w	r4, #0
 8001cc8:	0154      	lsls	r4, r2, #5
 8001cca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cce:	014b      	lsls	r3, r1, #5
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4622      	mov	r2, r4
 8001cd4:	1b49      	subs	r1, r1, r5
 8001cd6:	eb62 0206 	sbc.w	r2, r2, r6
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	f04f 0400 	mov.w	r4, #0
 8001ce2:	0194      	lsls	r4, r2, #6
 8001ce4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ce8:	018b      	lsls	r3, r1, #6
 8001cea:	1a5b      	subs	r3, r3, r1
 8001cec:	eb64 0402 	sbc.w	r4, r4, r2
 8001cf0:	f04f 0100 	mov.w	r1, #0
 8001cf4:	f04f 0200 	mov.w	r2, #0
 8001cf8:	00e2      	lsls	r2, r4, #3
 8001cfa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001cfe:	00d9      	lsls	r1, r3, #3
 8001d00:	460b      	mov	r3, r1
 8001d02:	4614      	mov	r4, r2
 8001d04:	195b      	adds	r3, r3, r5
 8001d06:	eb44 0406 	adc.w	r4, r4, r6
 8001d0a:	f04f 0100 	mov.w	r1, #0
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	0262      	lsls	r2, r4, #9
 8001d14:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001d18:	0259      	lsls	r1, r3, #9
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4614      	mov	r4, r2
 8001d1e:	4618      	mov	r0, r3
 8001d20:	4621      	mov	r1, r4
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f04f 0400 	mov.w	r4, #0
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4623      	mov	r3, r4
 8001d2c:	f7fe fa4c 	bl	80001c8 <__aeabi_uldivmod>
 8001d30:	4603      	mov	r3, r0
 8001d32:	460c      	mov	r4, r1
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	e049      	b.n	8001dcc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d38:	4b2f      	ldr	r3, [pc, #188]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	099b      	lsrs	r3, r3, #6
 8001d3e:	f04f 0400 	mov.w	r4, #0
 8001d42:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	ea03 0501 	and.w	r5, r3, r1
 8001d4e:	ea04 0602 	and.w	r6, r4, r2
 8001d52:	4629      	mov	r1, r5
 8001d54:	4632      	mov	r2, r6
 8001d56:	f04f 0300 	mov.w	r3, #0
 8001d5a:	f04f 0400 	mov.w	r4, #0
 8001d5e:	0154      	lsls	r4, r2, #5
 8001d60:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d64:	014b      	lsls	r3, r1, #5
 8001d66:	4619      	mov	r1, r3
 8001d68:	4622      	mov	r2, r4
 8001d6a:	1b49      	subs	r1, r1, r5
 8001d6c:	eb62 0206 	sbc.w	r2, r2, r6
 8001d70:	f04f 0300 	mov.w	r3, #0
 8001d74:	f04f 0400 	mov.w	r4, #0
 8001d78:	0194      	lsls	r4, r2, #6
 8001d7a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d7e:	018b      	lsls	r3, r1, #6
 8001d80:	1a5b      	subs	r3, r3, r1
 8001d82:	eb64 0402 	sbc.w	r4, r4, r2
 8001d86:	f04f 0100 	mov.w	r1, #0
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	00e2      	lsls	r2, r4, #3
 8001d90:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d94:	00d9      	lsls	r1, r3, #3
 8001d96:	460b      	mov	r3, r1
 8001d98:	4614      	mov	r4, r2
 8001d9a:	195b      	adds	r3, r3, r5
 8001d9c:	eb44 0406 	adc.w	r4, r4, r6
 8001da0:	f04f 0100 	mov.w	r1, #0
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	02a2      	lsls	r2, r4, #10
 8001daa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001dae:	0299      	lsls	r1, r3, #10
 8001db0:	460b      	mov	r3, r1
 8001db2:	4614      	mov	r4, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	4621      	mov	r1, r4
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f04f 0400 	mov.w	r4, #0
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	4623      	mov	r3, r4
 8001dc2:	f7fe fa01 	bl	80001c8 <__aeabi_uldivmod>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	460c      	mov	r4, r1
 8001dca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	0c1b      	lsrs	r3, r3, #16
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de4:	60bb      	str	r3, [r7, #8]
      break;
 8001de6:	e002      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001de8:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001dea:	60bb      	str	r3, [r7, #8]
      break;
 8001dec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dee:	68bb      	ldr	r3, [r7, #8]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	00f42400 	.word	0x00f42400
 8001e00:	007a1200 	.word	0x007a1200

08001e04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e08:	4b03      	ldr	r3, [pc, #12]	; (8001e18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20000000 	.word	0x20000000

08001e1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e20:	f7ff fff0 	bl	8001e04 <HAL_RCC_GetHCLKFreq>
 8001e24:	4601      	mov	r1, r0
 8001e26:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	0a9b      	lsrs	r3, r3, #10
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	4a03      	ldr	r2, [pc, #12]	; (8001e40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e32:	5cd3      	ldrb	r3, [r2, r3]
 8001e34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	080029a8 	.word	0x080029a8

08001e44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e48:	f7ff ffdc 	bl	8001e04 <HAL_RCC_GetHCLKFreq>
 8001e4c:	4601      	mov	r1, r0
 8001e4e:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	0b5b      	lsrs	r3, r3, #13
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	4a03      	ldr	r2, [pc, #12]	; (8001e68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e5a:	5cd3      	ldrb	r3, [r2, r3]
 8001e5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40023800 	.word	0x40023800
 8001e68:	080029a8 	.word	0x080029a8

08001e6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e03f      	b.n	8001efe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d106      	bne.n	8001e98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7fe ff46 	bl	8000d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2224      	movs	r2, #36	; 0x24
 8001e9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001eae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 f9b1 	bl	8002218 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	691a      	ldr	r2, [r3, #16]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ec4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	695a      	ldr	r2, [r3, #20]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ed4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ee4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2220      	movs	r2, #32
 8001ef0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2220      	movs	r2, #32
 8001ef8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b088      	sub	sp, #32
 8001f0a:	af02      	add	r7, sp, #8
 8001f0c:	60f8      	str	r0, [r7, #12]
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	603b      	str	r3, [r7, #0]
 8001f12:	4613      	mov	r3, r2
 8001f14:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b20      	cmp	r3, #32
 8001f24:	f040 8083 	bne.w	800202e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d002      	beq.n	8001f34 <HAL_UART_Transmit+0x2e>
 8001f2e:	88fb      	ldrh	r3, [r7, #6]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e07b      	b.n	8002030 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d101      	bne.n	8001f46 <HAL_UART_Transmit+0x40>
 8001f42:	2302      	movs	r3, #2
 8001f44:	e074      	b.n	8002030 <HAL_UART_Transmit+0x12a>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2221      	movs	r2, #33	; 0x21
 8001f58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001f5c:	f7fe fffe 	bl	8000f5c <HAL_GetTick>
 8001f60:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	88fa      	ldrh	r2, [r7, #6]
 8001f66:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	88fa      	ldrh	r2, [r7, #6]
 8001f6c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001f76:	e042      	b.n	8001ffe <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f8e:	d122      	bne.n	8001fd6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	2200      	movs	r2, #0
 8001f98:	2180      	movs	r1, #128	; 0x80
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f000 f8f2 	bl	8002184 <UART_WaitOnFlagUntilTimeout>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e042      	b.n	8002030 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fbc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d103      	bne.n	8001fce <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	3302      	adds	r3, #2
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	e017      	b.n	8001ffe <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	e013      	b.n	8001ffe <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2180      	movs	r1, #128	; 0x80
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 f8cf 	bl	8002184 <UART_WaitOnFlagUntilTimeout>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e01f      	b.n	8002030 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	1c5a      	adds	r2, r3, #1
 8001ff4:	60ba      	str	r2, [r7, #8]
 8001ff6:	781a      	ldrb	r2, [r3, #0]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002002:	b29b      	uxth	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1b7      	bne.n	8001f78 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	2200      	movs	r2, #0
 8002010:	2140      	movs	r1, #64	; 0x40
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 f8b6 	bl	8002184 <UART_WaitOnFlagUntilTimeout>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e006      	b.n	8002030 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2220      	movs	r2, #32
 8002026:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	e000      	b.n	8002030 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800202e:	2302      	movs	r3, #2
  }
}
 8002030:	4618      	mov	r0, r3
 8002032:	3718      	adds	r7, #24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b088      	sub	sp, #32
 800203c:	af02      	add	r7, sp, #8
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	4613      	mov	r3, r2
 8002046:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b20      	cmp	r3, #32
 8002056:	f040 8090 	bne.w	800217a <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d002      	beq.n	8002066 <HAL_UART_Receive+0x2e>
 8002060:	88fb      	ldrh	r3, [r7, #6]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e088      	b.n	800217c <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <HAL_UART_Receive+0x40>
 8002074:	2302      	movs	r3, #2
 8002076:	e081      	b.n	800217c <HAL_UART_Receive+0x144>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2222      	movs	r2, #34	; 0x22
 800208a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800208e:	f7fe ff65 	bl	8000f5c <HAL_GetTick>
 8002092:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	88fa      	ldrh	r2, [r7, #6]
 8002098:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	88fa      	ldrh	r2, [r7, #6]
 800209e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80020a8:	e05c      	b.n	8002164 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	3b01      	subs	r3, #1
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020c0:	d12b      	bne.n	800211a <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	2200      	movs	r2, #0
 80020ca:	2120      	movs	r1, #32
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 f859 	bl	8002184 <UART_WaitOnFlagUntilTimeout>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e04f      	b.n	800217c <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10c      	bne.n	8002102 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	3302      	adds	r3, #2
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	e030      	b.n	8002164 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	b29b      	uxth	r3, r3
 800210a:	b2db      	uxtb	r3, r3
 800210c:	b29a      	uxth	r2, r3
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	3301      	adds	r3, #1
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	e024      	b.n	8002164 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	2200      	movs	r2, #0
 8002122:	2120      	movs	r1, #32
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 f82d 	bl	8002184 <UART_WaitOnFlagUntilTimeout>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e023      	b.n	800217c <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d108      	bne.n	800214e <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6859      	ldr	r1, [r3, #4]
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	1c5a      	adds	r2, r3, #1
 8002146:	60ba      	str	r2, [r7, #8]
 8002148:	b2ca      	uxtb	r2, r1
 800214a:	701a      	strb	r2, [r3, #0]
 800214c:	e00a      	b.n	8002164 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	b2da      	uxtb	r2, r3
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	1c59      	adds	r1, r3, #1
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002168:	b29b      	uxth	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d19d      	bne.n	80020aa <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2220      	movs	r2, #32
 8002172:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	e000      	b.n	800217c <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800217a:	2302      	movs	r3, #2
  }
}
 800217c:	4618      	mov	r0, r3
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	603b      	str	r3, [r7, #0]
 8002190:	4613      	mov	r3, r2
 8002192:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002194:	e02c      	b.n	80021f0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219c:	d028      	beq.n	80021f0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d007      	beq.n	80021b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80021a4:	f7fe feda 	bl	8000f5c <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d21d      	bcs.n	80021f0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80021c2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	695a      	ldr	r2, [r3, #20]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0201 	bic.w	r2, r2, #1
 80021d2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2220      	movs	r2, #32
 80021d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2220      	movs	r2, #32
 80021e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e00f      	b.n	8002210 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	4013      	ands	r3, r2
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	bf0c      	ite	eq
 8002200:	2301      	moveq	r3, #1
 8002202:	2300      	movne	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	461a      	mov	r2, r3
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	429a      	cmp	r2, r3
 800220c:	d0c3      	beq.n	8002196 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800221c:	b085      	sub	sp, #20
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	431a      	orrs	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	4313      	orrs	r3, r2
 800224e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800225a:	f023 030c 	bic.w	r3, r3, #12
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6812      	ldr	r2, [r2, #0]
 8002262:	68f9      	ldr	r1, [r7, #12]
 8002264:	430b      	orrs	r3, r1
 8002266:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	699a      	ldr	r2, [r3, #24]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002286:	f040 818b 	bne.w	80025a0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4ac1      	ldr	r2, [pc, #772]	; (8002594 <UART_SetConfig+0x37c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d005      	beq.n	80022a0 <UART_SetConfig+0x88>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4abf      	ldr	r2, [pc, #764]	; (8002598 <UART_SetConfig+0x380>)
 800229a:	4293      	cmp	r3, r2
 800229c:	f040 80bd 	bne.w	800241a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80022a0:	f7ff fdd0 	bl	8001e44 <HAL_RCC_GetPCLK2Freq>
 80022a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	461d      	mov	r5, r3
 80022aa:	f04f 0600 	mov.w	r6, #0
 80022ae:	46a8      	mov	r8, r5
 80022b0:	46b1      	mov	r9, r6
 80022b2:	eb18 0308 	adds.w	r3, r8, r8
 80022b6:	eb49 0409 	adc.w	r4, r9, r9
 80022ba:	4698      	mov	r8, r3
 80022bc:	46a1      	mov	r9, r4
 80022be:	eb18 0805 	adds.w	r8, r8, r5
 80022c2:	eb49 0906 	adc.w	r9, r9, r6
 80022c6:	f04f 0100 	mov.w	r1, #0
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80022d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80022d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80022da:	4688      	mov	r8, r1
 80022dc:	4691      	mov	r9, r2
 80022de:	eb18 0005 	adds.w	r0, r8, r5
 80022e2:	eb49 0106 	adc.w	r1, r9, r6
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	461d      	mov	r5, r3
 80022ec:	f04f 0600 	mov.w	r6, #0
 80022f0:	196b      	adds	r3, r5, r5
 80022f2:	eb46 0406 	adc.w	r4, r6, r6
 80022f6:	461a      	mov	r2, r3
 80022f8:	4623      	mov	r3, r4
 80022fa:	f7fd ff65 	bl	80001c8 <__aeabi_uldivmod>
 80022fe:	4603      	mov	r3, r0
 8002300:	460c      	mov	r4, r1
 8002302:	461a      	mov	r2, r3
 8002304:	4ba5      	ldr	r3, [pc, #660]	; (800259c <UART_SetConfig+0x384>)
 8002306:	fba3 2302 	umull	r2, r3, r3, r2
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	461d      	mov	r5, r3
 8002314:	f04f 0600 	mov.w	r6, #0
 8002318:	46a9      	mov	r9, r5
 800231a:	46b2      	mov	sl, r6
 800231c:	eb19 0309 	adds.w	r3, r9, r9
 8002320:	eb4a 040a 	adc.w	r4, sl, sl
 8002324:	4699      	mov	r9, r3
 8002326:	46a2      	mov	sl, r4
 8002328:	eb19 0905 	adds.w	r9, r9, r5
 800232c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002330:	f04f 0100 	mov.w	r1, #0
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800233c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002340:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002344:	4689      	mov	r9, r1
 8002346:	4692      	mov	sl, r2
 8002348:	eb19 0005 	adds.w	r0, r9, r5
 800234c:	eb4a 0106 	adc.w	r1, sl, r6
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	461d      	mov	r5, r3
 8002356:	f04f 0600 	mov.w	r6, #0
 800235a:	196b      	adds	r3, r5, r5
 800235c:	eb46 0406 	adc.w	r4, r6, r6
 8002360:	461a      	mov	r2, r3
 8002362:	4623      	mov	r3, r4
 8002364:	f7fd ff30 	bl	80001c8 <__aeabi_uldivmod>
 8002368:	4603      	mov	r3, r0
 800236a:	460c      	mov	r4, r1
 800236c:	461a      	mov	r2, r3
 800236e:	4b8b      	ldr	r3, [pc, #556]	; (800259c <UART_SetConfig+0x384>)
 8002370:	fba3 1302 	umull	r1, r3, r3, r2
 8002374:	095b      	lsrs	r3, r3, #5
 8002376:	2164      	movs	r1, #100	; 0x64
 8002378:	fb01 f303 	mul.w	r3, r1, r3
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	3332      	adds	r3, #50	; 0x32
 8002382:	4a86      	ldr	r2, [pc, #536]	; (800259c <UART_SetConfig+0x384>)
 8002384:	fba2 2303 	umull	r2, r3, r2, r3
 8002388:	095b      	lsrs	r3, r3, #5
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002390:	4498      	add	r8, r3
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	461d      	mov	r5, r3
 8002396:	f04f 0600 	mov.w	r6, #0
 800239a:	46a9      	mov	r9, r5
 800239c:	46b2      	mov	sl, r6
 800239e:	eb19 0309 	adds.w	r3, r9, r9
 80023a2:	eb4a 040a 	adc.w	r4, sl, sl
 80023a6:	4699      	mov	r9, r3
 80023a8:	46a2      	mov	sl, r4
 80023aa:	eb19 0905 	adds.w	r9, r9, r5
 80023ae:	eb4a 0a06 	adc.w	sl, sl, r6
 80023b2:	f04f 0100 	mov.w	r1, #0
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023c6:	4689      	mov	r9, r1
 80023c8:	4692      	mov	sl, r2
 80023ca:	eb19 0005 	adds.w	r0, r9, r5
 80023ce:	eb4a 0106 	adc.w	r1, sl, r6
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	461d      	mov	r5, r3
 80023d8:	f04f 0600 	mov.w	r6, #0
 80023dc:	196b      	adds	r3, r5, r5
 80023de:	eb46 0406 	adc.w	r4, r6, r6
 80023e2:	461a      	mov	r2, r3
 80023e4:	4623      	mov	r3, r4
 80023e6:	f7fd feef 	bl	80001c8 <__aeabi_uldivmod>
 80023ea:	4603      	mov	r3, r0
 80023ec:	460c      	mov	r4, r1
 80023ee:	461a      	mov	r2, r3
 80023f0:	4b6a      	ldr	r3, [pc, #424]	; (800259c <UART_SetConfig+0x384>)
 80023f2:	fba3 1302 	umull	r1, r3, r3, r2
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	2164      	movs	r1, #100	; 0x64
 80023fa:	fb01 f303 	mul.w	r3, r1, r3
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	3332      	adds	r3, #50	; 0x32
 8002404:	4a65      	ldr	r2, [pc, #404]	; (800259c <UART_SetConfig+0x384>)
 8002406:	fba2 2303 	umull	r2, r3, r2, r3
 800240a:	095b      	lsrs	r3, r3, #5
 800240c:	f003 0207 	and.w	r2, r3, #7
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4442      	add	r2, r8
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	e26f      	b.n	80028fa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800241a:	f7ff fcff 	bl	8001e1c <HAL_RCC_GetPCLK1Freq>
 800241e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	461d      	mov	r5, r3
 8002424:	f04f 0600 	mov.w	r6, #0
 8002428:	46a8      	mov	r8, r5
 800242a:	46b1      	mov	r9, r6
 800242c:	eb18 0308 	adds.w	r3, r8, r8
 8002430:	eb49 0409 	adc.w	r4, r9, r9
 8002434:	4698      	mov	r8, r3
 8002436:	46a1      	mov	r9, r4
 8002438:	eb18 0805 	adds.w	r8, r8, r5
 800243c:	eb49 0906 	adc.w	r9, r9, r6
 8002440:	f04f 0100 	mov.w	r1, #0
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800244c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002450:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002454:	4688      	mov	r8, r1
 8002456:	4691      	mov	r9, r2
 8002458:	eb18 0005 	adds.w	r0, r8, r5
 800245c:	eb49 0106 	adc.w	r1, r9, r6
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	461d      	mov	r5, r3
 8002466:	f04f 0600 	mov.w	r6, #0
 800246a:	196b      	adds	r3, r5, r5
 800246c:	eb46 0406 	adc.w	r4, r6, r6
 8002470:	461a      	mov	r2, r3
 8002472:	4623      	mov	r3, r4
 8002474:	f7fd fea8 	bl	80001c8 <__aeabi_uldivmod>
 8002478:	4603      	mov	r3, r0
 800247a:	460c      	mov	r4, r1
 800247c:	461a      	mov	r2, r3
 800247e:	4b47      	ldr	r3, [pc, #284]	; (800259c <UART_SetConfig+0x384>)
 8002480:	fba3 2302 	umull	r2, r3, r3, r2
 8002484:	095b      	lsrs	r3, r3, #5
 8002486:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	461d      	mov	r5, r3
 800248e:	f04f 0600 	mov.w	r6, #0
 8002492:	46a9      	mov	r9, r5
 8002494:	46b2      	mov	sl, r6
 8002496:	eb19 0309 	adds.w	r3, r9, r9
 800249a:	eb4a 040a 	adc.w	r4, sl, sl
 800249e:	4699      	mov	r9, r3
 80024a0:	46a2      	mov	sl, r4
 80024a2:	eb19 0905 	adds.w	r9, r9, r5
 80024a6:	eb4a 0a06 	adc.w	sl, sl, r6
 80024aa:	f04f 0100 	mov.w	r1, #0
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80024ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024be:	4689      	mov	r9, r1
 80024c0:	4692      	mov	sl, r2
 80024c2:	eb19 0005 	adds.w	r0, r9, r5
 80024c6:	eb4a 0106 	adc.w	r1, sl, r6
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	461d      	mov	r5, r3
 80024d0:	f04f 0600 	mov.w	r6, #0
 80024d4:	196b      	adds	r3, r5, r5
 80024d6:	eb46 0406 	adc.w	r4, r6, r6
 80024da:	461a      	mov	r2, r3
 80024dc:	4623      	mov	r3, r4
 80024de:	f7fd fe73 	bl	80001c8 <__aeabi_uldivmod>
 80024e2:	4603      	mov	r3, r0
 80024e4:	460c      	mov	r4, r1
 80024e6:	461a      	mov	r2, r3
 80024e8:	4b2c      	ldr	r3, [pc, #176]	; (800259c <UART_SetConfig+0x384>)
 80024ea:	fba3 1302 	umull	r1, r3, r3, r2
 80024ee:	095b      	lsrs	r3, r3, #5
 80024f0:	2164      	movs	r1, #100	; 0x64
 80024f2:	fb01 f303 	mul.w	r3, r1, r3
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	3332      	adds	r3, #50	; 0x32
 80024fc:	4a27      	ldr	r2, [pc, #156]	; (800259c <UART_SetConfig+0x384>)
 80024fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002502:	095b      	lsrs	r3, r3, #5
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800250a:	4498      	add	r8, r3
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	461d      	mov	r5, r3
 8002510:	f04f 0600 	mov.w	r6, #0
 8002514:	46a9      	mov	r9, r5
 8002516:	46b2      	mov	sl, r6
 8002518:	eb19 0309 	adds.w	r3, r9, r9
 800251c:	eb4a 040a 	adc.w	r4, sl, sl
 8002520:	4699      	mov	r9, r3
 8002522:	46a2      	mov	sl, r4
 8002524:	eb19 0905 	adds.w	r9, r9, r5
 8002528:	eb4a 0a06 	adc.w	sl, sl, r6
 800252c:	f04f 0100 	mov.w	r1, #0
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002538:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800253c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002540:	4689      	mov	r9, r1
 8002542:	4692      	mov	sl, r2
 8002544:	eb19 0005 	adds.w	r0, r9, r5
 8002548:	eb4a 0106 	adc.w	r1, sl, r6
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	461d      	mov	r5, r3
 8002552:	f04f 0600 	mov.w	r6, #0
 8002556:	196b      	adds	r3, r5, r5
 8002558:	eb46 0406 	adc.w	r4, r6, r6
 800255c:	461a      	mov	r2, r3
 800255e:	4623      	mov	r3, r4
 8002560:	f7fd fe32 	bl	80001c8 <__aeabi_uldivmod>
 8002564:	4603      	mov	r3, r0
 8002566:	460c      	mov	r4, r1
 8002568:	461a      	mov	r2, r3
 800256a:	4b0c      	ldr	r3, [pc, #48]	; (800259c <UART_SetConfig+0x384>)
 800256c:	fba3 1302 	umull	r1, r3, r3, r2
 8002570:	095b      	lsrs	r3, r3, #5
 8002572:	2164      	movs	r1, #100	; 0x64
 8002574:	fb01 f303 	mul.w	r3, r1, r3
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	3332      	adds	r3, #50	; 0x32
 800257e:	4a07      	ldr	r2, [pc, #28]	; (800259c <UART_SetConfig+0x384>)
 8002580:	fba2 2303 	umull	r2, r3, r2, r3
 8002584:	095b      	lsrs	r3, r3, #5
 8002586:	f003 0207 	and.w	r2, r3, #7
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4442      	add	r2, r8
 8002590:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002592:	e1b2      	b.n	80028fa <UART_SetConfig+0x6e2>
 8002594:	40011000 	.word	0x40011000
 8002598:	40011400 	.word	0x40011400
 800259c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4ad7      	ldr	r2, [pc, #860]	; (8002904 <UART_SetConfig+0x6ec>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d005      	beq.n	80025b6 <UART_SetConfig+0x39e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4ad6      	ldr	r2, [pc, #856]	; (8002908 <UART_SetConfig+0x6f0>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	f040 80d1 	bne.w	8002758 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80025b6:	f7ff fc45 	bl	8001e44 <HAL_RCC_GetPCLK2Freq>
 80025ba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	469a      	mov	sl, r3
 80025c0:	f04f 0b00 	mov.w	fp, #0
 80025c4:	46d0      	mov	r8, sl
 80025c6:	46d9      	mov	r9, fp
 80025c8:	eb18 0308 	adds.w	r3, r8, r8
 80025cc:	eb49 0409 	adc.w	r4, r9, r9
 80025d0:	4698      	mov	r8, r3
 80025d2:	46a1      	mov	r9, r4
 80025d4:	eb18 080a 	adds.w	r8, r8, sl
 80025d8:	eb49 090b 	adc.w	r9, r9, fp
 80025dc:	f04f 0100 	mov.w	r1, #0
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80025e8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80025ec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80025f0:	4688      	mov	r8, r1
 80025f2:	4691      	mov	r9, r2
 80025f4:	eb1a 0508 	adds.w	r5, sl, r8
 80025f8:	eb4b 0609 	adc.w	r6, fp, r9
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	4619      	mov	r1, r3
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	f04f 0400 	mov.w	r4, #0
 800260e:	0094      	lsls	r4, r2, #2
 8002610:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002614:	008b      	lsls	r3, r1, #2
 8002616:	461a      	mov	r2, r3
 8002618:	4623      	mov	r3, r4
 800261a:	4628      	mov	r0, r5
 800261c:	4631      	mov	r1, r6
 800261e:	f7fd fdd3 	bl	80001c8 <__aeabi_uldivmod>
 8002622:	4603      	mov	r3, r0
 8002624:	460c      	mov	r4, r1
 8002626:	461a      	mov	r2, r3
 8002628:	4bb8      	ldr	r3, [pc, #736]	; (800290c <UART_SetConfig+0x6f4>)
 800262a:	fba3 2302 	umull	r2, r3, r3, r2
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	469b      	mov	fp, r3
 8002638:	f04f 0c00 	mov.w	ip, #0
 800263c:	46d9      	mov	r9, fp
 800263e:	46e2      	mov	sl, ip
 8002640:	eb19 0309 	adds.w	r3, r9, r9
 8002644:	eb4a 040a 	adc.w	r4, sl, sl
 8002648:	4699      	mov	r9, r3
 800264a:	46a2      	mov	sl, r4
 800264c:	eb19 090b 	adds.w	r9, r9, fp
 8002650:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002654:	f04f 0100 	mov.w	r1, #0
 8002658:	f04f 0200 	mov.w	r2, #0
 800265c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002660:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002664:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002668:	4689      	mov	r9, r1
 800266a:	4692      	mov	sl, r2
 800266c:	eb1b 0509 	adds.w	r5, fp, r9
 8002670:	eb4c 060a 	adc.w	r6, ip, sl
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4619      	mov	r1, r3
 800267a:	f04f 0200 	mov.w	r2, #0
 800267e:	f04f 0300 	mov.w	r3, #0
 8002682:	f04f 0400 	mov.w	r4, #0
 8002686:	0094      	lsls	r4, r2, #2
 8002688:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800268c:	008b      	lsls	r3, r1, #2
 800268e:	461a      	mov	r2, r3
 8002690:	4623      	mov	r3, r4
 8002692:	4628      	mov	r0, r5
 8002694:	4631      	mov	r1, r6
 8002696:	f7fd fd97 	bl	80001c8 <__aeabi_uldivmod>
 800269a:	4603      	mov	r3, r0
 800269c:	460c      	mov	r4, r1
 800269e:	461a      	mov	r2, r3
 80026a0:	4b9a      	ldr	r3, [pc, #616]	; (800290c <UART_SetConfig+0x6f4>)
 80026a2:	fba3 1302 	umull	r1, r3, r3, r2
 80026a6:	095b      	lsrs	r3, r3, #5
 80026a8:	2164      	movs	r1, #100	; 0x64
 80026aa:	fb01 f303 	mul.w	r3, r1, r3
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	3332      	adds	r3, #50	; 0x32
 80026b4:	4a95      	ldr	r2, [pc, #596]	; (800290c <UART_SetConfig+0x6f4>)
 80026b6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026c0:	4498      	add	r8, r3
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	469b      	mov	fp, r3
 80026c6:	f04f 0c00 	mov.w	ip, #0
 80026ca:	46d9      	mov	r9, fp
 80026cc:	46e2      	mov	sl, ip
 80026ce:	eb19 0309 	adds.w	r3, r9, r9
 80026d2:	eb4a 040a 	adc.w	r4, sl, sl
 80026d6:	4699      	mov	r9, r3
 80026d8:	46a2      	mov	sl, r4
 80026da:	eb19 090b 	adds.w	r9, r9, fp
 80026de:	eb4a 0a0c 	adc.w	sl, sl, ip
 80026e2:	f04f 0100 	mov.w	r1, #0
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80026f6:	4689      	mov	r9, r1
 80026f8:	4692      	mov	sl, r2
 80026fa:	eb1b 0509 	adds.w	r5, fp, r9
 80026fe:	eb4c 060a 	adc.w	r6, ip, sl
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	4619      	mov	r1, r3
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	f04f 0300 	mov.w	r3, #0
 8002710:	f04f 0400 	mov.w	r4, #0
 8002714:	0094      	lsls	r4, r2, #2
 8002716:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800271a:	008b      	lsls	r3, r1, #2
 800271c:	461a      	mov	r2, r3
 800271e:	4623      	mov	r3, r4
 8002720:	4628      	mov	r0, r5
 8002722:	4631      	mov	r1, r6
 8002724:	f7fd fd50 	bl	80001c8 <__aeabi_uldivmod>
 8002728:	4603      	mov	r3, r0
 800272a:	460c      	mov	r4, r1
 800272c:	461a      	mov	r2, r3
 800272e:	4b77      	ldr	r3, [pc, #476]	; (800290c <UART_SetConfig+0x6f4>)
 8002730:	fba3 1302 	umull	r1, r3, r3, r2
 8002734:	095b      	lsrs	r3, r3, #5
 8002736:	2164      	movs	r1, #100	; 0x64
 8002738:	fb01 f303 	mul.w	r3, r1, r3
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	3332      	adds	r3, #50	; 0x32
 8002742:	4a72      	ldr	r2, [pc, #456]	; (800290c <UART_SetConfig+0x6f4>)
 8002744:	fba2 2303 	umull	r2, r3, r2, r3
 8002748:	095b      	lsrs	r3, r3, #5
 800274a:	f003 020f 	and.w	r2, r3, #15
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4442      	add	r2, r8
 8002754:	609a      	str	r2, [r3, #8]
 8002756:	e0d0      	b.n	80028fa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002758:	f7ff fb60 	bl	8001e1c <HAL_RCC_GetPCLK1Freq>
 800275c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	469a      	mov	sl, r3
 8002762:	f04f 0b00 	mov.w	fp, #0
 8002766:	46d0      	mov	r8, sl
 8002768:	46d9      	mov	r9, fp
 800276a:	eb18 0308 	adds.w	r3, r8, r8
 800276e:	eb49 0409 	adc.w	r4, r9, r9
 8002772:	4698      	mov	r8, r3
 8002774:	46a1      	mov	r9, r4
 8002776:	eb18 080a 	adds.w	r8, r8, sl
 800277a:	eb49 090b 	adc.w	r9, r9, fp
 800277e:	f04f 0100 	mov.w	r1, #0
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800278a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800278e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002792:	4688      	mov	r8, r1
 8002794:	4691      	mov	r9, r2
 8002796:	eb1a 0508 	adds.w	r5, sl, r8
 800279a:	eb4b 0609 	adc.w	r6, fp, r9
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	4619      	mov	r1, r3
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	f04f 0400 	mov.w	r4, #0
 80027b0:	0094      	lsls	r4, r2, #2
 80027b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80027b6:	008b      	lsls	r3, r1, #2
 80027b8:	461a      	mov	r2, r3
 80027ba:	4623      	mov	r3, r4
 80027bc:	4628      	mov	r0, r5
 80027be:	4631      	mov	r1, r6
 80027c0:	f7fd fd02 	bl	80001c8 <__aeabi_uldivmod>
 80027c4:	4603      	mov	r3, r0
 80027c6:	460c      	mov	r4, r1
 80027c8:	461a      	mov	r2, r3
 80027ca:	4b50      	ldr	r3, [pc, #320]	; (800290c <UART_SetConfig+0x6f4>)
 80027cc:	fba3 2302 	umull	r2, r3, r3, r2
 80027d0:	095b      	lsrs	r3, r3, #5
 80027d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	469b      	mov	fp, r3
 80027da:	f04f 0c00 	mov.w	ip, #0
 80027de:	46d9      	mov	r9, fp
 80027e0:	46e2      	mov	sl, ip
 80027e2:	eb19 0309 	adds.w	r3, r9, r9
 80027e6:	eb4a 040a 	adc.w	r4, sl, sl
 80027ea:	4699      	mov	r9, r3
 80027ec:	46a2      	mov	sl, r4
 80027ee:	eb19 090b 	adds.w	r9, r9, fp
 80027f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80027f6:	f04f 0100 	mov.w	r1, #0
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002802:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002806:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800280a:	4689      	mov	r9, r1
 800280c:	4692      	mov	sl, r2
 800280e:	eb1b 0509 	adds.w	r5, fp, r9
 8002812:	eb4c 060a 	adc.w	r6, ip, sl
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	4619      	mov	r1, r3
 800281c:	f04f 0200 	mov.w	r2, #0
 8002820:	f04f 0300 	mov.w	r3, #0
 8002824:	f04f 0400 	mov.w	r4, #0
 8002828:	0094      	lsls	r4, r2, #2
 800282a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800282e:	008b      	lsls	r3, r1, #2
 8002830:	461a      	mov	r2, r3
 8002832:	4623      	mov	r3, r4
 8002834:	4628      	mov	r0, r5
 8002836:	4631      	mov	r1, r6
 8002838:	f7fd fcc6 	bl	80001c8 <__aeabi_uldivmod>
 800283c:	4603      	mov	r3, r0
 800283e:	460c      	mov	r4, r1
 8002840:	461a      	mov	r2, r3
 8002842:	4b32      	ldr	r3, [pc, #200]	; (800290c <UART_SetConfig+0x6f4>)
 8002844:	fba3 1302 	umull	r1, r3, r3, r2
 8002848:	095b      	lsrs	r3, r3, #5
 800284a:	2164      	movs	r1, #100	; 0x64
 800284c:	fb01 f303 	mul.w	r3, r1, r3
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	011b      	lsls	r3, r3, #4
 8002854:	3332      	adds	r3, #50	; 0x32
 8002856:	4a2d      	ldr	r2, [pc, #180]	; (800290c <UART_SetConfig+0x6f4>)
 8002858:	fba2 2303 	umull	r2, r3, r2, r3
 800285c:	095b      	lsrs	r3, r3, #5
 800285e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002862:	4498      	add	r8, r3
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	469b      	mov	fp, r3
 8002868:	f04f 0c00 	mov.w	ip, #0
 800286c:	46d9      	mov	r9, fp
 800286e:	46e2      	mov	sl, ip
 8002870:	eb19 0309 	adds.w	r3, r9, r9
 8002874:	eb4a 040a 	adc.w	r4, sl, sl
 8002878:	4699      	mov	r9, r3
 800287a:	46a2      	mov	sl, r4
 800287c:	eb19 090b 	adds.w	r9, r9, fp
 8002880:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002884:	f04f 0100 	mov.w	r1, #0
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002890:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002894:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002898:	4689      	mov	r9, r1
 800289a:	4692      	mov	sl, r2
 800289c:	eb1b 0509 	adds.w	r5, fp, r9
 80028a0:	eb4c 060a 	adc.w	r6, ip, sl
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	4619      	mov	r1, r3
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	f04f 0300 	mov.w	r3, #0
 80028b2:	f04f 0400 	mov.w	r4, #0
 80028b6:	0094      	lsls	r4, r2, #2
 80028b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80028bc:	008b      	lsls	r3, r1, #2
 80028be:	461a      	mov	r2, r3
 80028c0:	4623      	mov	r3, r4
 80028c2:	4628      	mov	r0, r5
 80028c4:	4631      	mov	r1, r6
 80028c6:	f7fd fc7f 	bl	80001c8 <__aeabi_uldivmod>
 80028ca:	4603      	mov	r3, r0
 80028cc:	460c      	mov	r4, r1
 80028ce:	461a      	mov	r2, r3
 80028d0:	4b0e      	ldr	r3, [pc, #56]	; (800290c <UART_SetConfig+0x6f4>)
 80028d2:	fba3 1302 	umull	r1, r3, r3, r2
 80028d6:	095b      	lsrs	r3, r3, #5
 80028d8:	2164      	movs	r1, #100	; 0x64
 80028da:	fb01 f303 	mul.w	r3, r1, r3
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	3332      	adds	r3, #50	; 0x32
 80028e4:	4a09      	ldr	r2, [pc, #36]	; (800290c <UART_SetConfig+0x6f4>)
 80028e6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ea:	095b      	lsrs	r3, r3, #5
 80028ec:	f003 020f 	and.w	r2, r3, #15
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4442      	add	r2, r8
 80028f6:	609a      	str	r2, [r3, #8]
}
 80028f8:	e7ff      	b.n	80028fa <UART_SetConfig+0x6e2>
 80028fa:	bf00      	nop
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002904:	40011000 	.word	0x40011000
 8002908:	40011400 	.word	0x40011400
 800290c:	51eb851f 	.word	0x51eb851f

08002910 <__libc_init_array>:
 8002910:	b570      	push	{r4, r5, r6, lr}
 8002912:	4e0d      	ldr	r6, [pc, #52]	; (8002948 <__libc_init_array+0x38>)
 8002914:	4c0d      	ldr	r4, [pc, #52]	; (800294c <__libc_init_array+0x3c>)
 8002916:	1ba4      	subs	r4, r4, r6
 8002918:	10a4      	asrs	r4, r4, #2
 800291a:	2500      	movs	r5, #0
 800291c:	42a5      	cmp	r5, r4
 800291e:	d109      	bne.n	8002934 <__libc_init_array+0x24>
 8002920:	4e0b      	ldr	r6, [pc, #44]	; (8002950 <__libc_init_array+0x40>)
 8002922:	4c0c      	ldr	r4, [pc, #48]	; (8002954 <__libc_init_array+0x44>)
 8002924:	f000 f820 	bl	8002968 <_init>
 8002928:	1ba4      	subs	r4, r4, r6
 800292a:	10a4      	asrs	r4, r4, #2
 800292c:	2500      	movs	r5, #0
 800292e:	42a5      	cmp	r5, r4
 8002930:	d105      	bne.n	800293e <__libc_init_array+0x2e>
 8002932:	bd70      	pop	{r4, r5, r6, pc}
 8002934:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002938:	4798      	blx	r3
 800293a:	3501      	adds	r5, #1
 800293c:	e7ee      	b.n	800291c <__libc_init_array+0xc>
 800293e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002942:	4798      	blx	r3
 8002944:	3501      	adds	r5, #1
 8002946:	e7f2      	b.n	800292e <__libc_init_array+0x1e>
 8002948:	080029b8 	.word	0x080029b8
 800294c:	080029b8 	.word	0x080029b8
 8002950:	080029b8 	.word	0x080029b8
 8002954:	080029bc 	.word	0x080029bc

08002958 <memset>:
 8002958:	4402      	add	r2, r0
 800295a:	4603      	mov	r3, r0
 800295c:	4293      	cmp	r3, r2
 800295e:	d100      	bne.n	8002962 <memset+0xa>
 8002960:	4770      	bx	lr
 8002962:	f803 1b01 	strb.w	r1, [r3], #1
 8002966:	e7f9      	b.n	800295c <memset+0x4>

08002968 <_init>:
 8002968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800296a:	bf00      	nop
 800296c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800296e:	bc08      	pop	{r3}
 8002970:	469e      	mov	lr, r3
 8002972:	4770      	bx	lr

08002974 <_fini>:
 8002974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002976:	bf00      	nop
 8002978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800297a:	bc08      	pop	{r3}
 800297c:	469e      	mov	lr, r3
 800297e:	4770      	bx	lr
