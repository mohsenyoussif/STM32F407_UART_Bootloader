
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032d0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08003458  08003458  00013458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003494  08003494  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003494  08003494  00013494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800349c  0800349c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800349c  0800349c  0001349c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034a0  080034a0  000134a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080034a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  080034b0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  080034b0  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a30  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019bc  00000000  00000000  00028a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000830  00000000  00000000  0002a428  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000770  00000000  00000000  0002ac58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020e99  00000000  00000000  0002b3c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000074ea  00000000  00000000  0004c261  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c31c4  00000000  00000000  0005374b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011690f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002008  00000000  00000000  0011698c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003440 	.word	0x08003440

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003440 	.word	0x08003440

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <uint8VerifyCRC>:
 *         - CRC_FAIL    (if calculated CRC does not match)
 */


static uint8_t uint8VerifyCRC(uint8_t* copy_puint8dataArr,uint8_t copy_uint8Length,uint32_t copy_uint32HostCRC)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	460b      	mov	r3, r1
 80004d2:	607a      	str	r2, [r7, #4]
 80004d4:	72fb      	strb	r3, [r7, #11]

	/*
	 * Step 1: Compute the CRC for the given data.
	 * The function iterates through each byte of the data array, accumulating the CRC value.
	 */
	for(Local_uint8Iterator = 0 ; Local_uint8Iterator < copy_uint8Length; Local_uint8Iterator++)
 80004d6:	2300      	movs	r3, #0
 80004d8:	77fb      	strb	r3, [r7, #31]
 80004da:	e00f      	b.n	80004fc <uint8VerifyCRC+0x34>
	{
		/* Load the current byte from the data array into a temporary variable */
		Local_uint32Temp = copy_puint8dataArr[Local_uint8Iterator];
 80004dc:	7ffb      	ldrb	r3, [r7, #31]
 80004de:	68fa      	ldr	r2, [r7, #12]
 80004e0:	4413      	add	r3, r2
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	617b      	str	r3, [r7, #20]

		/* Accumulate the CRC for the current byte */
		Local_uint8AccCRC = HAL_CRC_Accumulate(&hcrc, &Local_uint32Temp, 1);
 80004e6:	f107 0314 	add.w	r3, r7, #20
 80004ea:	2201      	movs	r2, #1
 80004ec:	4619      	mov	r1, r3
 80004ee:	480e      	ldr	r0, [pc, #56]	; (8000528 <uint8VerifyCRC+0x60>)
 80004f0:	f001 f8f9 	bl	80016e6 <HAL_CRC_Accumulate>
 80004f4:	61b8      	str	r0, [r7, #24]
	for(Local_uint8Iterator = 0 ; Local_uint8Iterator < copy_uint8Length; Local_uint8Iterator++)
 80004f6:	7ffb      	ldrb	r3, [r7, #31]
 80004f8:	3301      	adds	r3, #1
 80004fa:	77fb      	strb	r3, [r7, #31]
 80004fc:	7ffa      	ldrb	r2, [r7, #31]
 80004fe:	7afb      	ldrb	r3, [r7, #11]
 8000500:	429a      	cmp	r2, r3
 8000502:	d3eb      	bcc.n	80004dc <uint8VerifyCRC+0x14>

	/*
	 * Step 2: Reset the CRC calculation unit.
	 * This ensures that every time this function is called, it starts calculation from the beginning.
	 */
	__HAL_CRC_RESET_HANDLE_STATE(&hcrc);
 8000504:	4b08      	ldr	r3, [pc, #32]	; (8000528 <uint8VerifyCRC+0x60>)
 8000506:	2200      	movs	r2, #0
 8000508:	715a      	strb	r2, [r3, #5]

	/*
	 * Step 3: Compare the computed CRC with the expected CRC from the Host.
	 * If they match, the CRC check is successful; otherwise, it fails.
	 */
	if(Local_uint8AccCRC == copy_uint32HostCRC)
 800050a:	69ba      	ldr	r2, [r7, #24]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	429a      	cmp	r2, r3
 8000510:	d102      	bne.n	8000518 <uint8VerifyCRC+0x50>
	{
		Local_uint8CRCStatus = CRC_SUCCESS ;   /* CRC verification passed */
 8000512:	2301      	movs	r3, #1
 8000514:	77bb      	strb	r3, [r7, #30]
 8000516:	e001      	b.n	800051c <uint8VerifyCRC+0x54>
	}else
	{
		Local_uint8CRCStatus = CRC_FAIL ;     /* CRC verification failed */
 8000518:	2300      	movs	r3, #0
 800051a:	77bb      	strb	r3, [r7, #30]
	}

	/* Step 4: Return the verification result (CRC_SUCCESS or CRC_FAIL) */
	return Local_uint8CRCStatus  ;
 800051c:	7fbb      	ldrb	r3, [r7, #30]
}
 800051e:	4618      	mov	r0, r3
 8000520:	3720      	adds	r7, #32
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000028 	.word	0x20000028

0800052c <voidSendACK>:
 *     [1] -> Length of the response data that follows
 * - It then transmits this buffer over UART to notify the Host.
 */

static void voidSendACK(uint8_t copy_uint8ReplyeLngth)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
	/* Buffer to hold the ACK response and the length of the following response */
	uint8_t Local_uint8AckBuffer[2] = {BL_ACK, copy_uint8ReplyeLngth};
 8000536:	23a5      	movs	r3, #165	; 0xa5
 8000538:	733b      	strb	r3, [r7, #12]
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	737b      	strb	r3, [r7, #13]

	/* Send ACK response via UART */
	HAL_UART_Transmit(&huart2, Local_uint8AckBuffer, 2, HAL_MAX_DELAY);
 800053e:	f107 010c 	add.w	r1, r7, #12
 8000542:	f04f 33ff 	mov.w	r3, #4294967295
 8000546:	2202      	movs	r2, #2
 8000548:	4803      	ldr	r0, [pc, #12]	; (8000558 <voidSendACK+0x2c>)
 800054a:	f002 fa48 	bl	80029de <HAL_UART_Transmit>
}
 800054e:	bf00      	nop
 8000550:	3710      	adds	r7, #16
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	20000030 	.word	0x20000030

0800055c <voidSendNACK>:
 * - The function prepares a single-byte buffer containing BL_NACK.
 * - It then transmits this NACK response over UART to notify the Host of the failure.
 */

static void voidSendNACK(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
	/* Buffer holding the NACK response */
	uint8_t Local_uint8NAck = BL_NACK;
 8000562:	237f      	movs	r3, #127	; 0x7f
 8000564:	71fb      	strb	r3, [r7, #7]

	/* Send NACK response via UART */
	HAL_UART_Transmit(&huart2, &Local_uint8NAck, 1, HAL_MAX_DELAY);
 8000566:	1df9      	adds	r1, r7, #7
 8000568:	f04f 33ff 	mov.w	r3, #4294967295
 800056c:	2201      	movs	r2, #1
 800056e:	4803      	ldr	r0, [pc, #12]	; (800057c <voidSendNACK+0x20>)
 8000570:	f002 fa35 	bl	80029de <HAL_UART_Transmit>
}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000030 	.word	0x20000030

08000580 <uint8_ValidateAddress>:
 * @return uint8_t : Address validation status:
 *         - `VALID_ADDRESS` if the address is within Flash or SRAM.
 *         - `NOT_VALID_ADDRESS` otherwise.
 */
static uint8_t uint8_ValidateAddress(uint32_t Copy_uint32Address)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]

	     /* Initialize status as NOT valid */
		uint8_t Local_uint8AddressStatus = NOT_VALID_ADDRESS;
 8000588:	2300      	movs	r3, #0
 800058a:	73fb      	strb	r3, [r7, #15]

		/* Check if the address falls within Flash memory */
	     if((Copy_uint32Address >= FLASH_BASE) && (Copy_uint32Address<= FLASH_END))
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000592:	d306      	bcc.n	80005a2 <uint8_ValidateAddress+0x22>
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800059a:	d202      	bcs.n	80005a2 <uint8_ValidateAddress+0x22>
	     {
	    	 Local_uint8AddressStatus = VALID_ADDRESS ;
 800059c:	2301      	movs	r3, #1
 800059e:	73fb      	strb	r3, [r7, #15]
 80005a0:	e00c      	b.n	80005bc <uint8_ValidateAddress+0x3c>
	     }
	     /* Check if the address falls within SRAM memory */
	     else if((Copy_uint32Address >= SRAM1_BASE) && (Copy_uint32Address <= (SRAM1_BASE + (128*1024))))
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80005a8:	d306      	bcc.n	80005b8 <uint8_ValidateAddress+0x38>
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4a07      	ldr	r2, [pc, #28]	; (80005cc <uint8_ValidateAddress+0x4c>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d802      	bhi.n	80005b8 <uint8_ValidateAddress+0x38>
	     {
	    	 Local_uint8AddressStatus = VALID_ADDRESS ;
 80005b2:	2301      	movs	r3, #1
 80005b4:	73fb      	strb	r3, [r7, #15]
 80005b6:	e001      	b.n	80005bc <uint8_ValidateAddress+0x3c>
	     }
	     else
	     {
	    	 Local_uint8AddressStatus = NOT_VALID_ADDRESS ;
 80005b8:	2300      	movs	r3, #0
 80005ba:	73fb      	strb	r3, [r7, #15]
	     }

return Local_uint8AddressStatus ;
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20020000 	.word	0x20020000

080005d0 <uint8_tExecute_FlashErase>:
 * @return uint8_t : Flash erase operation status:
 *         - `HAL_OK`    -> Erase successful.
 *         - `HAL_ERROR` -> Invalid parameters or erase failure.
 */
static uint8_t uint8_tExecute_FlashErase(uint8_t Copy_uint8SectorNumber, uint8_t Copy_uint8NumberofSectors)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	; 0x28
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	460a      	mov	r2, r1
 80005da:	71fb      	strb	r3, [r7, #7]
 80005dc:	4613      	mov	r3, r2
 80005de:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef Local_ErrorStatus = HAL_OK; // Variable to store function execution status
 80005e0:	2300      	movs	r3, #0
 80005e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Validate input parameters */
    if ((Copy_uint8NumberofSectors > NUMBER_OF_SECTORS) && (Copy_uint8SectorNumber != MASS_ERASE))
 80005e6:	79bb      	ldrb	r3, [r7, #6]
 80005e8:	2b0c      	cmp	r3, #12
 80005ea:	d906      	bls.n	80005fa <uint8_tExecute_FlashErase+0x2a>
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	2bff      	cmp	r3, #255	; 0xff
 80005f0:	d003      	beq.n	80005fa <uint8_tExecute_FlashErase+0x2a>
    {
        /* Error: Number of sectors requested exceeds available flash sectors */
        Local_ErrorStatus = HAL_ERROR;
 80005f2:	2301      	movs	r3, #1
 80005f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80005f8:	e035      	b.n	8000666 <uint8_tExecute_FlashErase+0x96>
    }
    else if ((Copy_uint8SectorNumber > (NUMBER_OF_SECTORS - 1)) && (Copy_uint8SectorNumber != MASS_ERASE))
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	2b0b      	cmp	r3, #11
 80005fe:	d906      	bls.n	800060e <uint8_tExecute_FlashErase+0x3e>
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	2bff      	cmp	r3, #255	; 0xff
 8000604:	d003      	beq.n	800060e <uint8_tExecute_FlashErase+0x3e>
    {
        /* Error: Invalid starting sector number */
        Local_ErrorStatus = HAL_ERROR;
 8000606:	2301      	movs	r3, #1
 8000608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800060c:	e02b      	b.n	8000666 <uint8_tExecute_FlashErase+0x96>
        /* Define structure to configure erase operation */
        FLASH_EraseInitTypeDef Local_MyErase;
        uint32_t Local_uint32SectorError; // Variable to store sector erase errors

        /* Check if a mass erase is required */
        if (Copy_uint8SectorNumber == MASS_ERASE)
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	2bff      	cmp	r3, #255	; 0xff
 8000612:	d102      	bne.n	800061a <uint8_tExecute_FlashErase+0x4a>
        {
            /* Mass Erase: Erases all sectors in the flash memory */
            Local_MyErase.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8000614:	2301      	movs	r3, #1
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	e012      	b.n	8000640 <uint8_tExecute_FlashErase+0x70>
        }
        else
        {
            /* Sector Erase: Erase a specific number of sectors starting from Copy_uint8SectorNumber */
            uint8_t Local_uint8RemainingSectors = NUMBER_OF_SECTORS - Copy_uint8SectorNumber;
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	f1c3 030c 	rsb	r3, r3, #12
 8000620:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

            /* Ensure the number of sectors does not exceed the available range */
            if (Copy_uint8NumberofSectors > Local_uint8RemainingSectors)
 8000624:	79ba      	ldrb	r2, [r7, #6]
 8000626:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800062a:	429a      	cmp	r2, r3
 800062c:	d902      	bls.n	8000634 <uint8_tExecute_FlashErase+0x64>
            {
                Copy_uint8NumberofSectors = Local_uint8RemainingSectors;
 800062e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000632:	71bb      	strb	r3, [r7, #6]
            }

            /* Configure sector erase parameters */
            Local_MyErase.TypeErase = FLASH_TYPEERASE_SECTORS;  // Select sector erase mode
 8000634:	2300      	movs	r3, #0
 8000636:	613b      	str	r3, [r7, #16]
            Local_MyErase.NbSectors = Copy_uint8NumberofSectors; // Number of sectors to erase
 8000638:	79bb      	ldrb	r3, [r7, #6]
 800063a:	61fb      	str	r3, [r7, #28]
            Local_MyErase.Sector = Copy_uint8SectorNumber;       // Start sector for erase
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	61bb      	str	r3, [r7, #24]
        }

        /* Set additional erase parameters */
        Local_MyErase.VoltageRange = FLASH_VOLTAGE_RANGE_3; // Voltage range (2.7V to 3.6V)
 8000640:	2302      	movs	r3, #2
 8000642:	623b      	str	r3, [r7, #32]
        Local_MyErase.Banks = FLASH_BANK_1;                 // Select flash bank to erase
 8000644:	2301      	movs	r3, #1
 8000646:	617b      	str	r3, [r7, #20]

        /* Unlock the flash memory for write/erase operations */
        HAL_FLASH_Unlock();
 8000648:	f001 f8cc 	bl	80017e4 <HAL_FLASH_Unlock>

        /* Perform the erase operation */
        Local_ErrorStatus = HAL_FLASHEx_Erase(&Local_MyErase, &Local_uint32SectorError);
 800064c:	f107 020c 	add.w	r2, r7, #12
 8000650:	f107 0310 	add.w	r3, r7, #16
 8000654:	4611      	mov	r1, r2
 8000656:	4618      	mov	r0, r3
 8000658:	f001 fa24 	bl	8001aa4 <HAL_FLASHEx_Erase>
 800065c:	4603      	mov	r3, r0
 800065e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* Lock the flash memory to prevent accidental modifications */
        HAL_FLASH_Lock();
 8000662:	f001 f8e1 	bl	8001828 <HAL_FLASH_Lock>
    }

    /* Return the erase operation status */
    return Local_ErrorStatus;
 8000666:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800066a:	4618      	mov	r0, r3
 800066c:	3728      	adds	r7, #40	; 0x28
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}

08000672 <uint8_ExecuteMemoryWrite>:
 * @return uint8_t : Error status of the write operation.
 *         - `HAL_OK`   if the operation is successful.
 *         - `HAL_ERROR` otherwise.
 */
static uint8_t uint8_ExecuteMemoryWrite(uint8_t* Copy_Puint8Buffer ,uint32_t Copy_uint32Address ,uint8_t Copy_uint8Length)
{
 8000672:	b590      	push	{r4, r7, lr}
 8000674:	b087      	sub	sp, #28
 8000676:	af00      	add	r7, sp, #0
 8000678:	60f8      	str	r0, [r7, #12]
 800067a:	60b9      	str	r1, [r7, #8]
 800067c:	4613      	mov	r3, r2
 800067e:	71fb      	strb	r3, [r7, #7]
   uint8_t Local_uint8ErrorStatus = HAL_ERROR;
 8000680:	2301      	movs	r3, #1
 8000682:	75fb      	strb	r3, [r7, #23]

   /* Check if the target address is within Flash memory */
   if((Copy_uint32Address >= FLASH_BASE) && (Copy_uint32Address <= FLASH_END))
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800068a:	d323      	bcc.n	80006d4 <uint8_ExecuteMemoryWrite+0x62>
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8000692:	d21f      	bcs.n	80006d4 <uint8_ExecuteMemoryWrite+0x62>
   {
       /* We will write byte-by-byte (Byte Programming), so a loop is used */
       uint8_t Local_uint8Iterator;

       /* Unlock the flash memory for write operations */
       HAL_FLASH_Unlock();
 8000694:	f001 f8a6 	bl	80017e4 <HAL_FLASH_Unlock>

       /* Write each byte from the buffer to the target Flash address */
       for(Local_uint8Iterator = 0; Local_uint8Iterator < Copy_uint8Length; Local_uint8Iterator++)
 8000698:	2300      	movs	r3, #0
 800069a:	75bb      	strb	r3, [r7, #22]
 800069c:	e013      	b.n	80006c6 <uint8_ExecuteMemoryWrite+0x54>
       {
           Local_uint8ErrorStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Copy_uint32Address + Local_uint8Iterator,(uint64_t)Copy_Puint8Buffer[Local_uint8Iterator]);
 800069e:	7dba      	ldrb	r2, [r7, #22]
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	18d1      	adds	r1, r2, r3
 80006a4:	7dbb      	ldrb	r3, [r7, #22]
 80006a6:	68fa      	ldr	r2, [r7, #12]
 80006a8:	4413      	add	r3, r2
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	f04f 0400 	mov.w	r4, #0
 80006b2:	461a      	mov	r2, r3
 80006b4:	4623      	mov	r3, r4
 80006b6:	2000      	movs	r0, #0
 80006b8:	f001 f840 	bl	800173c <HAL_FLASH_Program>
 80006bc:	4603      	mov	r3, r0
 80006be:	75fb      	strb	r3, [r7, #23]
       for(Local_uint8Iterator = 0; Local_uint8Iterator < Copy_uint8Length; Local_uint8Iterator++)
 80006c0:	7dbb      	ldrb	r3, [r7, #22]
 80006c2:	3301      	adds	r3, #1
 80006c4:	75bb      	strb	r3, [r7, #22]
 80006c6:	7dba      	ldrb	r2, [r7, #22]
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d3e7      	bcc.n	800069e <uint8_ExecuteMemoryWrite+0x2c>

       }

       /* Lock the flash memory to prevent accidental modifications */
       HAL_FLASH_Lock();
 80006ce:	f001 f8ab 	bl	8001828 <HAL_FLASH_Lock>
   {
 80006d2:	e013      	b.n	80006fc <uint8_ExecuteMemoryWrite+0x8a>
   /* If the target address is within SRAM */
   else
   {
       /* We will write byte-by-byte (Byte Programming), so a loop is used */
       uint8_t Local_uint8Iterator;
       uint8_t* Local_Puint8Destination = (uint8_t*)Copy_uint32Address; /* Cast the address to a byte pointer */
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	613b      	str	r3, [r7, #16]

       /* Copy data from the buffer to the target SRAM address */
       for(Local_uint8Iterator = 0; Local_uint8Iterator < Copy_uint8Length; Local_uint8Iterator++)
 80006d8:	2300      	movs	r3, #0
 80006da:	757b      	strb	r3, [r7, #21]
 80006dc:	e00a      	b.n	80006f4 <uint8_ExecuteMemoryWrite+0x82>
       {
           Local_Puint8Destination[Local_uint8Iterator] = Copy_Puint8Buffer[Local_uint8Iterator];
 80006de:	7d7b      	ldrb	r3, [r7, #21]
 80006e0:	68fa      	ldr	r2, [r7, #12]
 80006e2:	441a      	add	r2, r3
 80006e4:	7d7b      	ldrb	r3, [r7, #21]
 80006e6:	6939      	ldr	r1, [r7, #16]
 80006e8:	440b      	add	r3, r1
 80006ea:	7812      	ldrb	r2, [r2, #0]
 80006ec:	701a      	strb	r2, [r3, #0]
       for(Local_uint8Iterator = 0; Local_uint8Iterator < Copy_uint8Length; Local_uint8Iterator++)
 80006ee:	7d7b      	ldrb	r3, [r7, #21]
 80006f0:	3301      	adds	r3, #1
 80006f2:	757b      	strb	r3, [r7, #21]
 80006f4:	7d7a      	ldrb	r2, [r7, #21]
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d3f0      	bcc.n	80006de <uint8_ExecuteMemoryWrite+0x6c>
       }
   }

   /* Return the error status (HAL_OK if successful, HAL_ERROR otherwise) */
   return Local_uint8ErrorStatus;
 80006fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80006fe:	4618      	mov	r0, r3
 8000700:	371c      	adds	r7, #28
 8000702:	46bd      	mov	sp, r7
 8000704:	bd90      	pop	{r4, r7, pc}
	...

08000708 <BL_voidHandleGetVERCmd>:
 * Return:
 * -------
 * @return None.
 */
void BL_voidHandleGetVERCmd(uint8_t* copy_puint8CmdPacket)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	uint8_t Local_uint8BLVersion, Local_uint8CRCStatus;
	uint8_t Local_uint8CmdLen; // this variable to extract command length
	uint32_t Local_uint32HostCRC; // this variable to extract host CRC

	/* Extract command length (first byte includes "Length to follow") */
	Local_uint8CmdLen = copy_puint8CmdPacket[0] + 1;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	3301      	adds	r3, #1
 8000716:	75fb      	strb	r3, [r7, #23]

	/* Extract CRC from the last 4 bytes of the received packet */
	Local_uint32HostCRC = *((uint32_t*)(copy_puint8CmdPacket + Local_uint8CmdLen - 4));
 8000718:	7dfb      	ldrb	r3, [r7, #23]
 800071a:	3b04      	subs	r3, #4
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	4413      	add	r3, r2
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	613b      	str	r3, [r7, #16]

	/* Verify CRC of the received command */
	Local_uint8CRCStatus = uint8VerifyCRC(copy_puint8CmdPacket, (Local_uint8CmdLen - 4), Local_uint32HostCRC);
 8000724:	7dfb      	ldrb	r3, [r7, #23]
 8000726:	3b04      	subs	r3, #4
 8000728:	b2db      	uxtb	r3, r3
 800072a:	693a      	ldr	r2, [r7, #16]
 800072c:	4619      	mov	r1, r3
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f7ff feca 	bl	80004c8 <uint8VerifyCRC>
 8000734:	4603      	mov	r3, r0
 8000736:	73fb      	strb	r3, [r7, #15]

	if (Local_uint8CRCStatus == CRC_SUCCESS)
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	2b01      	cmp	r3, #1
 800073c:	d10d      	bne.n	800075a <BL_voidHandleGetVERCmd+0x52>
	{
		/* Send ACK with the length of the response payload (1 byte for version) */
		voidSendACK(1u);
 800073e:	2001      	movs	r0, #1
 8000740:	f7ff fef4 	bl	800052c <voidSendACK>

		/* Send the bootloader version */
		Local_uint8BLVersion = BL_VERSION;
 8000744:	2301      	movs	r3, #1
 8000746:	73bb      	strb	r3, [r7, #14]
		HAL_UART_Transmit(&huart2, &Local_uint8BLVersion, 1, HAL_MAX_DELAY);
 8000748:	f107 010e 	add.w	r1, r7, #14
 800074c:	f04f 33ff 	mov.w	r3, #4294967295
 8000750:	2201      	movs	r2, #1
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <BL_voidHandleGetVERCmd+0x60>)
 8000754:	f002 f943 	bl	80029de <HAL_UART_Transmit>
	else
	{
		/* Send NACK if CRC verification fails */
		voidSendNACK();
	}
}
 8000758:	e001      	b.n	800075e <BL_voidHandleGetVERCmd+0x56>
		voidSendNACK();
 800075a:	f7ff feff 	bl	800055c <voidSendNACK>
}
 800075e:	bf00      	nop
 8000760:	3718      	adds	r7, #24
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000030 	.word	0x20000030

0800076c <BL_voidHandleGetHelpCmd>:
 *      - Sends an ACK with the size of the supported commands list.
 *      - Transmits the list of supported commands via UART.
 * 5. If CRC verification fails, sends a NACK to the host.
 */
void BL_voidHandleGetHelpCmd(uint8_t* copy_puint8CmdPacket)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	uint8_t Local_uint8CRCStatus;
	uint8_t Local_uint8CmdLen; // this variable to extract command length
	uint32_t Local_uint32HostCRC; // this variable to extract host CRC

	/* Extract command length (first byte includes "Length to follow") */
	Local_uint8CmdLen = copy_puint8CmdPacket[0] + 1;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	3301      	adds	r3, #1
 800077a:	77fb      	strb	r3, [r7, #31]

	/* Extract CRC from the last 4 bytes of the received packet */
	Local_uint32HostCRC = *((uint32_t*)(copy_puint8CmdPacket + Local_uint8CmdLen - 4));
 800077c:	7ffb      	ldrb	r3, [r7, #31]
 800077e:	3b04      	subs	r3, #4
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	4413      	add	r3, r2
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	61bb      	str	r3, [r7, #24]

	/* Verify CRC of the received command */
	Local_uint8CRCStatus = uint8VerifyCRC(copy_puint8CmdPacket, (Local_uint8CmdLen - 4), Local_uint32HostCRC);
 8000788:	7ffb      	ldrb	r3, [r7, #31]
 800078a:	3b04      	subs	r3, #4
 800078c:	b2db      	uxtb	r3, r3
 800078e:	69ba      	ldr	r2, [r7, #24]
 8000790:	4619      	mov	r1, r3
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f7ff fe98 	bl	80004c8 <uint8VerifyCRC>
 8000798:	4603      	mov	r3, r0
 800079a:	75fb      	strb	r3, [r7, #23]

	if (Local_uint8CRCStatus == CRC_SUCCESS)
 800079c:	7dfb      	ldrb	r3, [r7, #23]
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d111      	bne.n	80007c6 <BL_voidHandleGetHelpCmd+0x5a>
	{

		/* Define an array containing all supported bootloader commands */
		uint8_t Local_uint8BLSupportedCommands []=
 80007a2:	4a0c      	ldr	r2, [pc, #48]	; (80007d4 <BL_voidHandleGetHelpCmd+0x68>)
 80007a4:	f107 0308 	add.w	r3, r7, #8
 80007a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80007aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
								BL_OTP_READ               ,
								BL_DIS_WR_PROTECT
		};

		/* Send an ACK with the size of the supported commands list */
		voidSendACK(sizeof(Local_uint8BLSupportedCommands));
 80007ae:	200c      	movs	r0, #12
 80007b0:	f7ff febc 	bl	800052c <voidSendACK>

		/* Transmit the list of supported commands to the host over UART */
		HAL_UART_Transmit(&huart2, Local_uint8BLSupportedCommands, sizeof(Local_uint8BLSupportedCommands), HAL_MAX_DELAY);
 80007b4:	f107 0108 	add.w	r1, r7, #8
 80007b8:	f04f 33ff 	mov.w	r3, #4294967295
 80007bc:	220c      	movs	r2, #12
 80007be:	4806      	ldr	r0, [pc, #24]	; (80007d8 <BL_voidHandleGetHelpCmd+0x6c>)
 80007c0:	f002 f90d 	bl	80029de <HAL_UART_Transmit>
	else
	{
		/* Send NACK if CRC verification fails */
		voidSendNACK();
	}
}
 80007c4:	e001      	b.n	80007ca <BL_voidHandleGetHelpCmd+0x5e>
		voidSendNACK();
 80007c6:	f7ff fec9 	bl	800055c <voidSendNACK>
}
 80007ca:	bf00      	nop
 80007cc:	3720      	adds	r7, #32
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	08003458 	.word	0x08003458
 80007d8:	20000030 	.word	0x20000030

080007dc <BL_voidHandleGetCIDcmd>:
 *    - Sends an ACK response to indicate success.
 *    - Transmits the Chip ID (2 bytes) to the host.
 * 5. If CRC verification fails, it sends a NACK response.
 */
void BL_voidHandleGetCIDcmd(uint8_t* copy_puint8CmdPacket)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	uint8_t Local_uint8CmdLen; // this variable to extract command length
	uint16_t Local_uint16CID ; // Variable to hold the extracted Chip ID
	uint32_t Local_uint32HostCRC; // this variable to extract host CRC

	/* Step 1: Extract command length (first byte includes "Length to follow") */
	Local_uint8CmdLen = copy_puint8CmdPacket[0] + 1;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	3301      	adds	r3, #1
 80007ea:	75fb      	strb	r3, [r7, #23]

	/* Step 2: Extract CRC from the last 4 bytes of the received packet */
	Local_uint32HostCRC = *((uint32_t*)(copy_puint8CmdPacket + Local_uint8CmdLen - 4));
 80007ec:	7dfb      	ldrb	r3, [r7, #23]
 80007ee:	3b04      	subs	r3, #4
 80007f0:	687a      	ldr	r2, [r7, #4]
 80007f2:	4413      	add	r3, r2
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	613b      	str	r3, [r7, #16]

	/* Step 3: Verify CRC of the received command */
	Local_uint8CRCStatus = uint8VerifyCRC(copy_puint8CmdPacket, (Local_uint8CmdLen - 4), Local_uint32HostCRC);
 80007f8:	7dfb      	ldrb	r3, [r7, #23]
 80007fa:	3b04      	subs	r3, #4
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	693a      	ldr	r2, [r7, #16]
 8000800:	4619      	mov	r1, r3
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff fe60 	bl	80004c8 <uint8VerifyCRC>
 8000808:	4603      	mov	r3, r0
 800080a:	73fb      	strb	r3, [r7, #15]

	if (Local_uint8CRCStatus == CRC_SUCCESS)
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d112      	bne.n	8000838 <BL_voidHandleGetCIDcmd+0x5c>
	{
		/* Step 4: Retrieve Chip ID (12-bit value from the DBGMCU_IDCODE register) */
		Local_uint16CID = DBGMCU_IDCODE_REGISTER & 0x0fff;
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <BL_voidHandleGetCIDcmd+0x68>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	b29b      	uxth	r3, r3
 8000818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800081c:	b29b      	uxth	r3, r3
 800081e:	81bb      	strh	r3, [r7, #12]

		/* Step 5: Send ACK with the response length (2 bytes for Chip ID) */
		voidSendACK(2u);
 8000820:	2002      	movs	r0, #2
 8000822:	f7ff fe83 	bl	800052c <voidSendACK>

		/* Step 6: Transmit the Chip ID to the host */
		HAL_UART_Transmit(&huart2, (uint8_t*)&Local_uint16CID , 2 , HAL_MAX_DELAY);
 8000826:	f107 010c 	add.w	r1, r7, #12
 800082a:	f04f 33ff 	mov.w	r3, #4294967295
 800082e:	2202      	movs	r2, #2
 8000830:	4805      	ldr	r0, [pc, #20]	; (8000848 <BL_voidHandleGetCIDcmd+0x6c>)
 8000832:	f002 f8d4 	bl	80029de <HAL_UART_Transmit>
	else
	{
		/* Send NACK if CRC verification fails */
		voidSendNACK();
	}
}
 8000836:	e001      	b.n	800083c <BL_voidHandleGetCIDcmd+0x60>
		voidSendNACK();
 8000838:	f7ff fe90 	bl	800055c <voidSendNACK>
}
 800083c:	bf00      	nop
 800083e:	3718      	adds	r7, #24
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	e0042000 	.word	0xe0042000
 8000848:	20000030 	.word	0x20000030

0800084c <BL_voidHandleGetRDPStatusCmd>:
 *      - Reads the RDP status from the option bytes at `RDP_USER_OPTION_WORD`.
 *      - Sends an ACK followed by the 1-byte RDP status.
 * 5. If the CRC check fails, sends a NACK.
 */
void BL_voidHandleGetRDPStatusCmd(uint8_t* copy_puint8CmdPacket)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	uint8_t Local_uint8CRCStatus;
	uint8_t Local_uint8CmdLen; // this variable to extract command length
	uint32_t Local_uint32HostCRC; // this variable to extract host CRC

	/* Extract command length (first byte includes "Length to follow") */
	Local_uint8CmdLen = copy_puint8CmdPacket[0] + 1;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	3301      	adds	r3, #1
 800085a:	75fb      	strb	r3, [r7, #23]

	/* Extract CRC from the last 4 bytes of the received packet */
	Local_uint32HostCRC = *((uint32_t*)(copy_puint8CmdPacket + Local_uint8CmdLen - 4));
 800085c:	7dfb      	ldrb	r3, [r7, #23]
 800085e:	3b04      	subs	r3, #4
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	4413      	add	r3, r2
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	613b      	str	r3, [r7, #16]

	/* Verify CRC of the received command */
	Local_uint8CRCStatus = uint8VerifyCRC(copy_puint8CmdPacket, (Local_uint8CmdLen - 4), Local_uint32HostCRC);
 8000868:	7dfb      	ldrb	r3, [r7, #23]
 800086a:	3b04      	subs	r3, #4
 800086c:	b2db      	uxtb	r3, r3
 800086e:	693a      	ldr	r2, [r7, #16]
 8000870:	4619      	mov	r1, r3
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f7ff fe28 	bl	80004c8 <uint8VerifyCRC>
 8000878:	4603      	mov	r3, r0
 800087a:	73fb      	strb	r3, [r7, #15]

	if (Local_uint8CRCStatus == CRC_SUCCESS)
 800087c:	7bfb      	ldrb	r3, [r7, #15]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d110      	bne.n	80008a4 <BL_voidHandleGetRDPStatusCmd+0x58>
	{

		/* Extract RDP status from option bytes (stored in the upper byte) */
		uint8_t Local_uint8RDPStatus = (uint8_t)((RDP_USER_OPTION_WORD >> 8) & 0xff);
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <BL_voidHandleGetRDPStatusCmd+0x64>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	0a1b      	lsrs	r3, r3, #8
 8000888:	b2db      	uxtb	r3, r3
 800088a:	73bb      	strb	r3, [r7, #14]

		/* Send ACK with the length of the response payload (1 byte for version) */
		voidSendACK(1u);
 800088c:	2001      	movs	r0, #1
 800088e:	f7ff fe4d 	bl	800052c <voidSendACK>

		/* Transmit the RDP status back to the host */
		HAL_UART_Transmit(&huart2, (uint8_t*)&Local_uint8RDPStatus , 1 , HAL_MAX_DELAY);
 8000892:	f107 010e 	add.w	r1, r7, #14
 8000896:	f04f 33ff 	mov.w	r3, #4294967295
 800089a:	2201      	movs	r2, #1
 800089c:	4805      	ldr	r0, [pc, #20]	; (80008b4 <BL_voidHandleGetRDPStatusCmd+0x68>)
 800089e:	f002 f89e 	bl	80029de <HAL_UART_Transmit>
	else
	{
		/* Send NACK if CRC verification fails */
		voidSendNACK();
	}
}
 80008a2:	e001      	b.n	80008a8 <BL_voidHandleGetRDPStatusCmd+0x5c>
		voidSendNACK();
 80008a4:	f7ff fe5a 	bl	800055c <voidSendNACK>
}
 80008a8:	bf00      	nop
 80008aa:	3718      	adds	r7, #24
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	1fffc000 	.word	0x1fffc000
 80008b4:	20000030 	.word	0x20000030

080008b8 <BL_voidHandleGoToAddressCmd>:
 *    - If invalid:
 *        - Sends a NACK response to indicate failure.
 * 4. If the CRC check fails, a NACK is sent immediately.
 */
void BL_voidHandleGoToAddressCmd(uint8_t* copy_puint8CmdPacket)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
    uint8_t Local_uint8CRCStatus;
    uint8_t Local_uint8CmdLen;       /* Variable to store command length */
    uint32_t Local_uint32HostCRC;    /* Variable to store CRC received from Host */

    /* Extract command length (first byte includes "Length to follow") */
    Local_uint8CmdLen = copy_puint8CmdPacket[0] + 1;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	3301      	adds	r3, #1
 80008c6:	77fb      	strb	r3, [r7, #31]

    /* Extract CRC from the last 4 bytes of the received packet */
    Local_uint32HostCRC = *((uint32_t*)(copy_puint8CmdPacket + Local_uint8CmdLen - 4));
 80008c8:	7ffb      	ldrb	r3, [r7, #31]
 80008ca:	3b04      	subs	r3, #4
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	4413      	add	r3, r2
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	61bb      	str	r3, [r7, #24]

    /* Verify CRC of the received command */
    Local_uint8CRCStatus = uint8VerifyCRC(copy_puint8CmdPacket, (Local_uint8CmdLen - 4), Local_uint32HostCRC);
 80008d4:	7ffb      	ldrb	r3, [r7, #31]
 80008d6:	3b04      	subs	r3, #4
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	69ba      	ldr	r2, [r7, #24]
 80008dc:	4619      	mov	r1, r3
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f7ff fdf2 	bl	80004c8 <uint8VerifyCRC>
 80008e4:	4603      	mov	r3, r0
 80008e6:	75fb      	strb	r3, [r7, #23]

    if (Local_uint8CRCStatus == CRC_SUCCESS)
 80008e8:	7dfb      	ldrb	r3, [r7, #23]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d12a      	bne.n	8000944 <BL_voidHandleGoToAddressCmd+0x8c>
    {
        uint32_t Local_uint32Address;
        uint8_t Local_uint8AddressValidStatus;

        /* Send ACK with the length of the response payload (1 byte for address validation result) */
        voidSendACK(1u);
 80008ee:	2001      	movs	r0, #1
 80008f0:	f7ff fe1c 	bl	800052c <voidSendACK>

        /* Extract the target address from the command packet */
        Local_uint32Address = *((uint32_t*)&copy_puint8CmdPacket[2]);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80008fa:	613b      	str	r3, [r7, #16]

        /* Validate if the extracted address falls within Flash or SRAM */
        Local_uint8AddressValidStatus = uint8_ValidateAddress(Local_uint32Address);
 80008fc:	6938      	ldr	r0, [r7, #16]
 80008fe:	f7ff fe3f 	bl	8000580 <uint8_ValidateAddress>
 8000902:	4603      	mov	r3, r0
 8000904:	72fb      	strb	r3, [r7, #11]

        if (Local_uint8AddressValidStatus == VALID_ADDRESS)
 8000906:	7afb      	ldrb	r3, [r7, #11]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d112      	bne.n	8000932 <BL_voidHandleGoToAddressCmd+0x7a>
        {
            /* Notify the Host that the address is valid */
            HAL_UART_Transmit(&huart2, &Local_uint8AddressValidStatus, 1, HAL_MAX_DELAY);
 800090c:	f107 010b 	add.w	r1, r7, #11
 8000910:	f04f 33ff 	mov.w	r3, #4294967295
 8000914:	2201      	movs	r2, #1
 8000916:	480e      	ldr	r0, [pc, #56]	; (8000950 <BL_voidHandleGoToAddressCmd+0x98>)
 8000918:	f002 f861 	bl	80029de <HAL_UART_Transmit>
             * Jump to the specified address:
             * - Define a pointer to function.
             * - Increment address by 1 to ensure Thumb mode (T-bit = 1).
             * - Cast address to function pointer and execute.
             */
            void (*Local_pvFuncPtr)(void) = NULL;
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
            Local_uint32Address|=0x1;  /* Set T-bit for ARM Cortex-M Thumb mode */
 8000920:	693b      	ldr	r3, [r7, #16]
 8000922:	f043 0301 	orr.w	r3, r3, #1
 8000926:	613b      	str	r3, [r7, #16]
            Local_pvFuncPtr = (void*)Local_uint32Address;
 8000928:	693b      	ldr	r3, [r7, #16]
 800092a:	60fb      	str	r3, [r7, #12]
            Local_pvFuncPtr();  /* Jump to the specified address */
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	4798      	blx	r3
    else
    {
        /* Send NACK if CRC verification fails */
        voidSendNACK();
    }
}
 8000930:	e00a      	b.n	8000948 <BL_voidHandleGoToAddressCmd+0x90>
          HAL_UART_Transmit(&huart2, &Local_uint8AddressValidStatus, 1, HAL_MAX_DELAY);
 8000932:	f107 010b 	add.w	r1, r7, #11
 8000936:	f04f 33ff 	mov.w	r3, #4294967295
 800093a:	2201      	movs	r2, #1
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <BL_voidHandleGoToAddressCmd+0x98>)
 800093e:	f002 f84e 	bl	80029de <HAL_UART_Transmit>
}
 8000942:	e001      	b.n	8000948 <BL_voidHandleGoToAddressCmd+0x90>
        voidSendNACK();
 8000944:	f7ff fe0a 	bl	800055c <voidSendNACK>
}
 8000948:	bf00      	nop
 800094a:	3720      	adds	r7, #32
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000030 	.word	0x20000030

08000954 <BL_voidHandleFlashEraseCmd>:
 * Return:
 * -------
 * - No return value (void), but the function sends feedback to the host via UART.
 */
void BL_voidHandleFlashEraseCmd(uint8_t* copy_puint8CmdPacket)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	uint8_t Local_uint8CRCStatus;
	uint8_t Local_uint8CmdLen; // this variable to extract command length
	uint32_t Local_uint32HostCRC; // this variable to extract host CRC

	/* Extract command length (first byte includes "Length to follow") */
	Local_uint8CmdLen = copy_puint8CmdPacket[0] + 1;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	3301      	adds	r3, #1
 8000962:	75fb      	strb	r3, [r7, #23]

	/* Extract CRC from the last 4 bytes of the received packet */
	Local_uint32HostCRC = *((uint32_t*)(copy_puint8CmdPacket + Local_uint8CmdLen - 4));
 8000964:	7dfb      	ldrb	r3, [r7, #23]
 8000966:	3b04      	subs	r3, #4
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	4413      	add	r3, r2
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	613b      	str	r3, [r7, #16]

	/* Verify CRC of the received command */
	Local_uint8CRCStatus = uint8VerifyCRC(copy_puint8CmdPacket, (Local_uint8CmdLen - 4), Local_uint32HostCRC);
 8000970:	7dfb      	ldrb	r3, [r7, #23]
 8000972:	3b04      	subs	r3, #4
 8000974:	b2db      	uxtb	r3, r3
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	4619      	mov	r1, r3
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff fda4 	bl	80004c8 <uint8VerifyCRC>
 8000980:	4603      	mov	r3, r0
 8000982:	73fb      	strb	r3, [r7, #15]

	if(Local_uint8CRCStatus == CRC_SUCCESS)
 8000984:	7bfb      	ldrb	r3, [r7, #15]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d123      	bne.n	80009d2 <BL_voidHandleFlashEraseCmd+0x7e>
	{
		uint8_t Local_uint8EraseStatus ;
		/* Send ACK with the length of the response payload (1 byte for erase status) */
		 voidSendACK(1u);
 800098a:	2001      	movs	r0, #1
 800098c:	f7ff fdce 	bl	800052c <voidSendACK>

		 /* Turn on LED (LD5) to indicate flash erase is in progress */
		 HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET) ;
 8000990:	2201      	movs	r2, #1
 8000992:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000996:	4812      	ldr	r0, [pc, #72]	; (80009e0 <BL_voidHandleFlashEraseCmd+0x8c>)
 8000998:	f001 fb58 	bl	800204c <HAL_GPIO_WritePin>

		 /* Execute flash erase */
		 Local_uint8EraseStatus =  uint8_tExecute_FlashErase(copy_puint8CmdPacket[2] ,copy_puint8CmdPacket[3]) ;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3302      	adds	r3, #2
 80009a0:	781a      	ldrb	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	3303      	adds	r3, #3
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	4619      	mov	r1, r3
 80009aa:	4610      	mov	r0, r2
 80009ac:	f7ff fe10 	bl	80005d0 <uint8_tExecute_FlashErase>
 80009b0:	4603      	mov	r3, r0
 80009b2:	73bb      	strb	r3, [r7, #14]

		 /* Turn off LED (LD5) after erase completion */
		 HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET) ;
 80009b4:	2200      	movs	r2, #0
 80009b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009ba:	4809      	ldr	r0, [pc, #36]	; (80009e0 <BL_voidHandleFlashEraseCmd+0x8c>)
 80009bc:	f001 fb46 	bl	800204c <HAL_GPIO_WritePin>

		 /* Send the erase status to the host */
		 HAL_UART_Transmit(&huart2, &Local_uint8EraseStatus, 1, HAL_MAX_DELAY) ;
 80009c0:	f107 010e 	add.w	r1, r7, #14
 80009c4:	f04f 33ff 	mov.w	r3, #4294967295
 80009c8:	2201      	movs	r2, #1
 80009ca:	4806      	ldr	r0, [pc, #24]	; (80009e4 <BL_voidHandleFlashEraseCmd+0x90>)
 80009cc:	f002 f807 	bl	80029de <HAL_UART_Transmit>
	else
	{
		/* Send NACK if CRC verification fails */
		voidSendNACK();
	}
}
 80009d0:	e001      	b.n	80009d6 <BL_voidHandleFlashEraseCmd+0x82>
		voidSendNACK();
 80009d2:	f7ff fdc3 	bl	800055c <voidSendNACK>
}
 80009d6:	bf00      	nop
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40020c00 	.word	0x40020c00
 80009e4:	20000030 	.word	0x20000030

080009e8 <BL_voidHandleMemWriteCmd>:

void BL_voidHandleMemWriteCmd(uint8_t* copy_puint8CmdPacket)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b088      	sub	sp, #32
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	uint8_t Local_uint8CRCStatus;
	uint8_t Local_uint8CmdLen; // this variable to extract command length
	uint32_t Local_uint32HostCRC; // this variable to extract host CRC

	/* Extract command length (first byte includes "Length to follow") */
	Local_uint8CmdLen = copy_puint8CmdPacket[0] + 1;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	3301      	adds	r3, #1
 80009f6:	77fb      	strb	r3, [r7, #31]

	/* Extract CRC from the last 4 bytes of the received packet */
	Local_uint32HostCRC = *((uint32_t*)(copy_puint8CmdPacket + Local_uint8CmdLen - 4));
 80009f8:	7ffb      	ldrb	r3, [r7, #31]
 80009fa:	3b04      	subs	r3, #4
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	4413      	add	r3, r2
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	61bb      	str	r3, [r7, #24]

	/* Verify CRC of the received command */
	Local_uint8CRCStatus = uint8VerifyCRC(copy_puint8CmdPacket, (Local_uint8CmdLen - 4), Local_uint32HostCRC);
 8000a04:	7ffb      	ldrb	r3, [r7, #31]
 8000a06:	3b04      	subs	r3, #4
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	69ba      	ldr	r2, [r7, #24]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff fd5a 	bl	80004c8 <uint8VerifyCRC>
 8000a14:	4603      	mov	r3, r0
 8000a16:	75fb      	strb	r3, [r7, #23]

	if(Local_uint8CRCStatus == CRC_SUCCESS)
 8000a18:	7dfb      	ldrb	r3, [r7, #23]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d126      	bne.n	8000a6c <BL_voidHandleMemWriteCmd+0x84>
	{
         uint8_t Local_uint8WritingStatus ;

		/*Extract the base memory address from command */
		uint32_t Local_uint32Address = *((uint32_t*)&copy_puint8CmdPacket[2]);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000a24:	613b      	str	r3, [r7, #16]

		 /* Validate if the extracted address falls within Flash or SRAM */
		uint8_t Local_uint8AddressValidStatus = uint8_ValidateAddress(Local_uint32Address);
 8000a26:	6938      	ldr	r0, [r7, #16]
 8000a28:	f7ff fdaa 	bl	8000580 <uint8_ValidateAddress>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	73fb      	strb	r3, [r7, #15]

		/* Send ACK  */
				voidSendACK(1u);
 8000a30:	2001      	movs	r0, #1
 8000a32:	f7ff fd7b 	bl	800052c <voidSendACK>
		if(Local_uint8AddressValidStatus == VALID_ADDRESS)
 8000a36:	7bfb      	ldrb	r3, [r7, #15]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d10c      	bne.n	8000a56 <BL_voidHandleMemWriteCmd+0x6e>
		{
			/*Extract Payload Length */
			uint8_t Local_uint8PayloadLength = copy_puint8CmdPacket[6] ;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	799b      	ldrb	r3, [r3, #6]
 8000a40:	73bb      	strb	r3, [r7, #14]

			/*Execute writing functionality */
			Local_uint8WritingStatus =uint8_ExecuteMemoryWrite(&copy_puint8CmdPacket[7] ,Local_uint32Address ,Local_uint8PayloadLength);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	3307      	adds	r3, #7
 8000a46:	7bba      	ldrb	r2, [r7, #14]
 8000a48:	6939      	ldr	r1, [r7, #16]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fe11 	bl	8000672 <uint8_ExecuteMemoryWrite>
 8000a50:	4603      	mov	r3, r0
 8000a52:	737b      	strb	r3, [r7, #13]
 8000a54:	e001      	b.n	8000a5a <BL_voidHandleMemWriteCmd+0x72>
		}
		else
		{
			Local_uint8WritingStatus = WRITING_ERROR ;
 8000a56:	2300      	movs	r3, #0
 8000a58:	737b      	strb	r3, [r7, #13]
		}
		HAL_UART_Transmit(&huart2, &Local_uint8WritingStatus, 1, HAL_MAX_DELAY) ;
 8000a5a:	f107 010d 	add.w	r1, r7, #13
 8000a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a62:	2201      	movs	r2, #1
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <BL_voidHandleMemWriteCmd+0x90>)
 8000a66:	f001 ffba 	bl	80029de <HAL_UART_Transmit>
	else
	{
		/* Send NACK if CRC verification fails */
		voidSendNACK();
	}
}
 8000a6a:	e001      	b.n	8000a70 <BL_voidHandleMemWriteCmd+0x88>
		voidSendNACK();
 8000a6c:	f7ff fd76 	bl	800055c <voidSendNACK>
}
 8000a70:	bf00      	nop
 8000a72:	3720      	adds	r7, #32
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000030 	.word	0x20000030

08000a7c <BL_voidHandleEnRWProtectCmd>:

void BL_voidHandleEnRWProtectCmd(uint8_t* copy_puint8CmdPacket)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	uint8_t Local_uint8CRCStatus;
	uint8_t Local_uint8CmdLen; // this variable to extract command length
	uint32_t Local_uint32HostCRC; // this variable to extract host CRC

	/* Extract command length (first byte includes "Length to follow") */
	Local_uint8CmdLen = copy_puint8CmdPacket[0] + 1;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	75fb      	strb	r3, [r7, #23]

	/* Extract CRC from the last 4 bytes of the received packet */
	Local_uint32HostCRC = *((uint32_t*)(copy_puint8CmdPacket + Local_uint8CmdLen - 4));
 8000a8c:	7dfb      	ldrb	r3, [r7, #23]
 8000a8e:	3b04      	subs	r3, #4
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	4413      	add	r3, r2
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	613b      	str	r3, [r7, #16]

	/* Verify CRC of the received command */
	Local_uint8CRCStatus = uint8VerifyCRC(copy_puint8CmdPacket, (Local_uint8CmdLen - 4), Local_uint32HostCRC);
 8000a98:	7dfb      	ldrb	r3, [r7, #23]
 8000a9a:	3b04      	subs	r3, #4
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff fd10 	bl	80004c8 <uint8VerifyCRC>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	73fb      	strb	r3, [r7, #15]

	if(Local_uint8CRCStatus == CRC_SUCCESS)
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d103      	bne.n	8000aba <BL_voidHandleEnRWProtectCmd+0x3e>
	{
		/* Send ACK with the length of the response payload (1 byte for version) */
		voidSendACK(1u);
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f7ff fd3a 	bl	800052c <voidSendACK>
	else
	{
		/* Send NACK if CRC verification fails */
		voidSendNACK();
	}
}
 8000ab8:	e001      	b.n	8000abe <BL_voidHandleEnRWProtectCmd+0x42>
		voidSendNACK();
 8000aba:	f7ff fd4f 	bl	800055c <voidSendNACK>
}
 8000abe:	bf00      	nop
 8000ac0:	3718      	adds	r7, #24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <BL_voidHandleMemReadCmd>:

void BL_voidHandleMemReadCmd(uint8_t* copy_puint8CmdPacket)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b086      	sub	sp, #24
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
	uint8_t Local_uint8CRCStatus;
	uint8_t Local_uint8CmdLen; // this variable to extract command length
	uint32_t Local_uint32HostCRC; // this variable to extract host CRC

	/* Extract command length (first byte includes "Length to follow") */
	Local_uint8CmdLen = copy_puint8CmdPacket[0] + 1;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	75fb      	strb	r3, [r7, #23]

	/* Extract CRC from the last 4 bytes of the received packet */
	Local_uint32HostCRC = *((uint32_t*)(copy_puint8CmdPacket + Local_uint8CmdLen - 4));
 8000ad6:	7dfb      	ldrb	r3, [r7, #23]
 8000ad8:	3b04      	subs	r3, #4
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	4413      	add	r3, r2
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	613b      	str	r3, [r7, #16]

	/* Verify CRC of the received command */
	Local_uint8CRCStatus = uint8VerifyCRC(copy_puint8CmdPacket, (Local_uint8CmdLen - 4), Local_uint32HostCRC);
 8000ae2:	7dfb      	ldrb	r3, [r7, #23]
 8000ae4:	3b04      	subs	r3, #4
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	4619      	mov	r1, r3
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff fceb 	bl	80004c8 <uint8VerifyCRC>
 8000af2:	4603      	mov	r3, r0
 8000af4:	73fb      	strb	r3, [r7, #15]

	if(Local_uint8CRCStatus == CRC_SUCCESS)
 8000af6:	7bfb      	ldrb	r3, [r7, #15]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d103      	bne.n	8000b04 <BL_voidHandleMemReadCmd+0x3e>
	{
		/* Send ACK with the length of the response payload (1 byte for version) */
		voidSendACK(1u);
 8000afc:	2001      	movs	r0, #1
 8000afe:	f7ff fd15 	bl	800052c <voidSendACK>
	else
	{
		/* Send NACK if CRC verification fails */
		voidSendNACK();
	}
}
 8000b02:	e001      	b.n	8000b08 <BL_voidHandleMemReadCmd+0x42>
		voidSendNACK();
 8000b04:	f7ff fd2a 	bl	800055c <voidSendNACK>
}
 8000b08:	bf00      	nop
 8000b0a:	3718      	adds	r7, #24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <BL_voidHandleReadSectorStatusCmd>:

void BL_voidHandleReadSectorStatusCmd(uint8_t* copy_puint8CmdPacket)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	uint8_t Local_uint8CRCStatus;
	uint8_t Local_uint8CmdLen; // this variable to extract command length
	uint32_t Local_uint32HostCRC; // this variable to extract host CRC

	/* Extract command length (first byte includes "Length to follow") */
	Local_uint8CmdLen = copy_puint8CmdPacket[0] + 1;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	75fb      	strb	r3, [r7, #23]

	/* Extract CRC from the last 4 bytes of the received packet */
	Local_uint32HostCRC = *((uint32_t*)(copy_puint8CmdPacket + Local_uint8CmdLen - 4));
 8000b20:	7dfb      	ldrb	r3, [r7, #23]
 8000b22:	3b04      	subs	r3, #4
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	4413      	add	r3, r2
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	613b      	str	r3, [r7, #16]

	/* Verify CRC of the received command */
	Local_uint8CRCStatus = uint8VerifyCRC(copy_puint8CmdPacket, (Local_uint8CmdLen - 4), Local_uint32HostCRC);
 8000b2c:	7dfb      	ldrb	r3, [r7, #23]
 8000b2e:	3b04      	subs	r3, #4
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	4619      	mov	r1, r3
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff fcc6 	bl	80004c8 <uint8VerifyCRC>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	73fb      	strb	r3, [r7, #15]

	if(Local_uint8CRCStatus == CRC_SUCCESS)
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d103      	bne.n	8000b4e <BL_voidHandleReadSectorStatusCmd+0x3e>
	{
		/* Send ACK with the length of the response payload (1 byte for version) */
		voidSendACK(1u);
 8000b46:	2001      	movs	r0, #1
 8000b48:	f7ff fcf0 	bl	800052c <voidSendACK>
	else
	{
		/* Send NACK if CRC verification fails */
		voidSendNACK();
	}
}
 8000b4c:	e001      	b.n	8000b52 <BL_voidHandleReadSectorStatusCmd+0x42>
		voidSendNACK();
 8000b4e:	f7ff fd05 	bl	800055c <voidSendNACK>
}
 8000b52:	bf00      	nop
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <BL_voidHandleOTPReadCmd>:

void BL_voidHandleOTPReadCmd(uint8_t* copy_puint8CmdPacket)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b086      	sub	sp, #24
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
	uint8_t Local_uint8CRCStatus;
	uint8_t Local_uint8CmdLen; // this variable to extract command length
	uint32_t Local_uint32HostCRC; // this variable to extract host CRC

	/* Extract command length (first byte includes "Length to follow") */
	Local_uint8CmdLen = copy_puint8CmdPacket[0] + 1;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	3301      	adds	r3, #1
 8000b68:	75fb      	strb	r3, [r7, #23]

	/* Extract CRC from the last 4 bytes of the received packet */
	Local_uint32HostCRC = *((uint32_t*)(copy_puint8CmdPacket + Local_uint8CmdLen - 4));
 8000b6a:	7dfb      	ldrb	r3, [r7, #23]
 8000b6c:	3b04      	subs	r3, #4
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	4413      	add	r3, r2
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	613b      	str	r3, [r7, #16]

	/* Verify CRC of the received command */
	Local_uint8CRCStatus = uint8VerifyCRC(copy_puint8CmdPacket, (Local_uint8CmdLen - 4), Local_uint32HostCRC);
 8000b76:	7dfb      	ldrb	r3, [r7, #23]
 8000b78:	3b04      	subs	r3, #4
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	4619      	mov	r1, r3
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff fca1 	bl	80004c8 <uint8VerifyCRC>
 8000b86:	4603      	mov	r3, r0
 8000b88:	73fb      	strb	r3, [r7, #15]

	if(Local_uint8CRCStatus == CRC_SUCCESS)
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d103      	bne.n	8000b98 <BL_voidHandleOTPReadCmd+0x3e>
	{
		/* Send ACK with the length of the response payload (1 byte for version) */
		voidSendACK(1u);
 8000b90:	2001      	movs	r0, #1
 8000b92:	f7ff fccb 	bl	800052c <voidSendACK>
	else
	{
		/* Send NACK if CRC verification fails */
		voidSendNACK();
	}
}
 8000b96:	e001      	b.n	8000b9c <BL_voidHandleOTPReadCmd+0x42>
		voidSendNACK();
 8000b98:	f7ff fce0 	bl	800055c <voidSendNACK>
}
 8000b9c:	bf00      	nop
 8000b9e:	3718      	adds	r7, #24
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <BL_voidHandleDisWRProtectCmd>:

void BL_voidHandleDisWRProtectCmd(uint8_t* copy_puint8CmdPacket)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	uint8_t Local_uint8CRCStatus;
	uint8_t Local_uint8CmdLen; // this variable to extract command length
	uint32_t Local_uint32HostCRC; // this variable to extract host CRC

	/* Extract command length (first byte includes "Length to follow") */
	Local_uint8CmdLen = copy_puint8CmdPacket[0] + 1;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	75fb      	strb	r3, [r7, #23]

	/* Extract CRC from the last 4 bytes of the received packet */
	Local_uint32HostCRC = *((uint32_t*)(copy_puint8CmdPacket + Local_uint8CmdLen - 4));
 8000bb4:	7dfb      	ldrb	r3, [r7, #23]
 8000bb6:	3b04      	subs	r3, #4
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	4413      	add	r3, r2
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	613b      	str	r3, [r7, #16]

	/* Verify CRC of the received command */
	Local_uint8CRCStatus = uint8VerifyCRC(copy_puint8CmdPacket, (Local_uint8CmdLen - 4), Local_uint32HostCRC);
 8000bc0:	7dfb      	ldrb	r3, [r7, #23]
 8000bc2:	3b04      	subs	r3, #4
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	4619      	mov	r1, r3
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff fc7c 	bl	80004c8 <uint8VerifyCRC>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	73fb      	strb	r3, [r7, #15]

	if(Local_uint8CRCStatus == CRC_SUCCESS)
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d103      	bne.n	8000be2 <BL_voidHandleDisWRProtectCmd+0x3e>
	{
		/* Send ACK with the length of the response payload (1 byte for version) */
		voidSendACK(1u);
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f7ff fca6 	bl	800052c <voidSendACK>
	else
	{
		/* Send NACK if CRC verification fails */
		voidSendNACK();
	}
}
 8000be0:	e001      	b.n	8000be6 <BL_voidHandleDisWRProtectCmd+0x42>
		voidSendNACK();
 8000be2:	f7ff fcbb 	bl	800055c <voidSendNACK>
}
 8000be6:	bf00      	nop
 8000be8:	3718      	adds	r7, #24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf0:	b5b0      	push	{r4, r5, r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
char HelloBootloader[]= "Hello From Bootloader\r\n" ;
 8000bf6:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <main+0x6c>)
 8000bf8:	463c      	mov	r4, r7
 8000bfa:	461d      	mov	r5, r3
 8000bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c00:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c04:	e884 0003 	stmia.w	r4, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c08:	f000 fbd8 	bl	80013bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c0c:	f000 f82c 	bl	8000c68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c10:	f000 f8d2 	bl	8000db8 <MX_GPIO_Init>
  MX_CRC_Init();
 8000c14:	f000 f892 	bl	8000d3c <MX_CRC_Init>
  MX_USART2_UART_Init();
 8000c18:	f000 f8a4 	bl	8000d64 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
   /*Read the button*/
 if( HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)== GPIO_PIN_SET)
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	4810      	ldr	r0, [pc, #64]	; (8000c60 <main+0x70>)
 8000c20:	f001 f9fc 	bl	800201c <HAL_GPIO_ReadPin>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d102      	bne.n	8000c30 <main+0x40>
 {
	 Bootloader_UartReadData();
 8000c2a:	f000 fa25 	bl	8001078 <Bootloader_UartReadData>
 8000c2e:	e008      	b.n	8000c42 <main+0x52>
 }else if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)== GPIO_PIN_RESET)
 8000c30:	2101      	movs	r1, #1
 8000c32:	480b      	ldr	r0, [pc, #44]	; (8000c60 <main+0x70>)
 8000c34:	f001 f9f2 	bl	800201c <HAL_GPIO_ReadPin>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d101      	bne.n	8000c42 <main+0x52>
 {
	 Bootloader_JumpToUserApp();
 8000c3e:	f000 fa9d 	bl	800117c <Bootloader_JumpToUserApp>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit(&huart2, (uint8_t*)HelloBootloader, sizeof(HelloBootloader), HAL_MAX_DELAY);
 8000c42:	4639      	mov	r1, r7
 8000c44:	f04f 33ff 	mov.w	r3, #4294967295
 8000c48:	2218      	movs	r2, #24
 8000c4a:	4806      	ldr	r0, [pc, #24]	; (8000c64 <main+0x74>)
 8000c4c:	f001 fec7 	bl	80029de <HAL_UART_Transmit>
	      HAL_Delay(1000);
 8000c50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c54:	f000 fc24 	bl	80014a0 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, (uint8_t*)HelloBootloader, sizeof(HelloBootloader), HAL_MAX_DELAY);
 8000c58:	e7f3      	b.n	8000c42 <main+0x52>
 8000c5a:	bf00      	nop
 8000c5c:	08003464 	.word	0x08003464
 8000c60:	40020000 	.word	0x40020000
 8000c64:	20000030 	.word	0x20000030

08000c68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b094      	sub	sp, #80	; 0x50
 8000c6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6e:	f107 0320 	add.w	r3, r7, #32
 8000c72:	2230      	movs	r2, #48	; 0x30
 8000c74:	2100      	movs	r1, #0
 8000c76:	4618      	mov	r0, r3
 8000c78:	f002 fbda 	bl	8003430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c7c:	f107 030c 	add.w	r3, r7, #12
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	4b28      	ldr	r3, [pc, #160]	; (8000d34 <SystemClock_Config+0xcc>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	4a27      	ldr	r2, [pc, #156]	; (8000d34 <SystemClock_Config+0xcc>)
 8000c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9c:	4b25      	ldr	r3, [pc, #148]	; (8000d34 <SystemClock_Config+0xcc>)
 8000c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ca8:	2300      	movs	r3, #0
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	4b22      	ldr	r3, [pc, #136]	; (8000d38 <SystemClock_Config+0xd0>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a21      	ldr	r2, [pc, #132]	; (8000d38 <SystemClock_Config+0xd0>)
 8000cb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb6:	6013      	str	r3, [r2, #0]
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <SystemClock_Config+0xd0>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ccc:	2310      	movs	r3, #16
 8000cce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cd8:	2308      	movs	r3, #8
 8000cda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000cdc:	2332      	movs	r3, #50	; 0x32
 8000cde:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ce0:	2304      	movs	r3, #4
 8000ce2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ce4:	2307      	movs	r3, #7
 8000ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce8:	f107 0320 	add.w	r3, r7, #32
 8000cec:	4618      	mov	r0, r3
 8000cee:	f001 f9c7 	bl	8002080 <HAL_RCC_OscConfig>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cf8:	f000 fa58 	bl	80011ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cfc:	230f      	movs	r3, #15
 8000cfe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d00:	2302      	movs	r3, #2
 8000d02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d08:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d12:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d14:	f107 030c 	add.w	r3, r7, #12
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f001 fc20 	bl	8002560 <HAL_RCC_ClockConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d26:	f000 fa41 	bl	80011ac <Error_Handler>
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	3750      	adds	r7, #80	; 0x50
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40007000 	.word	0x40007000

08000d3c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <MX_CRC_Init+0x20>)
 8000d42:	4a07      	ldr	r2, [pc, #28]	; (8000d60 <MX_CRC_Init+0x24>)
 8000d44:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d46:	4805      	ldr	r0, [pc, #20]	; (8000d5c <MX_CRC_Init+0x20>)
 8000d48:	f000 fcb1 	bl	80016ae <HAL_CRC_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000d52:	f000 fa2b 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000028 	.word	0x20000028
 8000d60:	40023000 	.word	0x40023000

08000d64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <MX_USART2_UART_Init+0x4c>)
 8000d6a:	4a12      	ldr	r2, [pc, #72]	; (8000db4 <MX_USART2_UART_Init+0x50>)
 8000d6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d6e:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <MX_USART2_UART_Init+0x4c>)
 8000d70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <MX_USART2_UART_Init+0x4c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <MX_USART2_UART_Init+0x4c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <MX_USART2_UART_Init+0x4c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <MX_USART2_UART_Init+0x4c>)
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <MX_USART2_UART_Init+0x4c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <MX_USART2_UART_Init+0x4c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <MX_USART2_UART_Init+0x4c>)
 8000d9c:	f001 fdd2 	bl	8002944 <HAL_UART_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000da6:	f000 fa01 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000030 	.word	0x20000030
 8000db4:	40004400 	.word	0x40004400

08000db8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08c      	sub	sp, #48	; 0x30
 8000dbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbe:	f107 031c 	add.w	r3, r7, #28
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61bb      	str	r3, [r7, #24]
 8000dd2:	4ba1      	ldr	r3, [pc, #644]	; (8001058 <MX_GPIO_Init+0x2a0>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4aa0      	ldr	r2, [pc, #640]	; (8001058 <MX_GPIO_Init+0x2a0>)
 8000dd8:	f043 0310 	orr.w	r3, r3, #16
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b9e      	ldr	r3, [pc, #632]	; (8001058 <MX_GPIO_Init+0x2a0>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f003 0310 	and.w	r3, r3, #16
 8000de6:	61bb      	str	r3, [r7, #24]
 8000de8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
 8000dee:	4b9a      	ldr	r3, [pc, #616]	; (8001058 <MX_GPIO_Init+0x2a0>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a99      	ldr	r2, [pc, #612]	; (8001058 <MX_GPIO_Init+0x2a0>)
 8000df4:	f043 0304 	orr.w	r3, r3, #4
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b97      	ldr	r3, [pc, #604]	; (8001058 <MX_GPIO_Init+0x2a0>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0304 	and.w	r3, r3, #4
 8000e02:	617b      	str	r3, [r7, #20]
 8000e04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	4b93      	ldr	r3, [pc, #588]	; (8001058 <MX_GPIO_Init+0x2a0>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a92      	ldr	r2, [pc, #584]	; (8001058 <MX_GPIO_Init+0x2a0>)
 8000e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b90      	ldr	r3, [pc, #576]	; (8001058 <MX_GPIO_Init+0x2a0>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	4b8c      	ldr	r3, [pc, #560]	; (8001058 <MX_GPIO_Init+0x2a0>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a8b      	ldr	r2, [pc, #556]	; (8001058 <MX_GPIO_Init+0x2a0>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b89      	ldr	r3, [pc, #548]	; (8001058 <MX_GPIO_Init+0x2a0>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	4b85      	ldr	r3, [pc, #532]	; (8001058 <MX_GPIO_Init+0x2a0>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a84      	ldr	r2, [pc, #528]	; (8001058 <MX_GPIO_Init+0x2a0>)
 8000e48:	f043 0302 	orr.w	r3, r3, #2
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b82      	ldr	r3, [pc, #520]	; (8001058 <MX_GPIO_Init+0x2a0>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	4b7e      	ldr	r3, [pc, #504]	; (8001058 <MX_GPIO_Init+0x2a0>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a7d      	ldr	r2, [pc, #500]	; (8001058 <MX_GPIO_Init+0x2a0>)
 8000e64:	f043 0308 	orr.w	r3, r3, #8
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b7b      	ldr	r3, [pc, #492]	; (8001058 <MX_GPIO_Init+0x2a0>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0308 	and.w	r3, r3, #8
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2108      	movs	r1, #8
 8000e7a:	4878      	ldr	r0, [pc, #480]	; (800105c <MX_GPIO_Init+0x2a4>)
 8000e7c:	f001 f8e6 	bl	800204c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000e80:	2201      	movs	r2, #1
 8000e82:	2101      	movs	r1, #1
 8000e84:	4876      	ldr	r0, [pc, #472]	; (8001060 <MX_GPIO_Init+0x2a8>)
 8000e86:	f001 f8e1 	bl	800204c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000e90:	4874      	ldr	r0, [pc, #464]	; (8001064 <MX_GPIO_Init+0x2ac>)
 8000e92:	f001 f8db 	bl	800204c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000e96:	2308      	movs	r3, #8
 8000e98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	4619      	mov	r1, r3
 8000eac:	486b      	ldr	r0, [pc, #428]	; (800105c <MX_GPIO_Init+0x2a4>)
 8000eae:	f000 ff1b 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	f107 031c 	add.w	r3, r7, #28
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4865      	ldr	r0, [pc, #404]	; (8001060 <MX_GPIO_Init+0x2a8>)
 8000eca:	f000 ff0d 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ece:	2308      	movs	r3, #8
 8000ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ede:	2305      	movs	r3, #5
 8000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ee2:	f107 031c 	add.w	r3, r7, #28
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	485d      	ldr	r0, [pc, #372]	; (8001060 <MX_GPIO_Init+0x2a8>)
 8000eea:	f000 fefd 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ef2:	4b5d      	ldr	r3, [pc, #372]	; (8001068 <MX_GPIO_Init+0x2b0>)
 8000ef4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	4619      	mov	r1, r3
 8000f00:	485a      	ldr	r0, [pc, #360]	; (800106c <MX_GPIO_Init+0x2b4>)
 8000f02:	f000 fef1 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000f06:	2310      	movs	r3, #16
 8000f08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f16:	2306      	movs	r3, #6
 8000f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f1a:	f107 031c 	add.w	r3, r7, #28
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4852      	ldr	r0, [pc, #328]	; (800106c <MX_GPIO_Init+0x2b4>)
 8000f22:	f000 fee1 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f26:	23e0      	movs	r3, #224	; 0xe0
 8000f28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f36:	2305      	movs	r3, #5
 8000f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3a:	f107 031c 	add.w	r3, r7, #28
 8000f3e:	4619      	mov	r1, r3
 8000f40:	484a      	ldr	r0, [pc, #296]	; (800106c <MX_GPIO_Init+0x2b4>)
 8000f42:	f000 fed1 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000f46:	2304      	movs	r3, #4
 8000f48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4619      	mov	r1, r3
 8000f58:	4845      	ldr	r0, [pc, #276]	; (8001070 <MX_GPIO_Init+0x2b8>)
 8000f5a:	f000 fec5 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000f5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	2302      	movs	r3, #2
 8000f66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f70:	2305      	movs	r3, #5
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	4619      	mov	r1, r3
 8000f7a:	483d      	ldr	r0, [pc, #244]	; (8001070 <MX_GPIO_Init+0x2b8>)
 8000f7c:	f000 feb4 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000f80:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000f84:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f86:	2301      	movs	r3, #1
 8000f88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f92:	f107 031c 	add.w	r3, r7, #28
 8000f96:	4619      	mov	r1, r3
 8000f98:	4832      	ldr	r0, [pc, #200]	; (8001064 <MX_GPIO_Init+0x2ac>)
 8000f9a:	f000 fea5 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000f9e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000fa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fb0:	2306      	movs	r3, #6
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb4:	f107 031c 	add.w	r3, r7, #28
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4829      	ldr	r0, [pc, #164]	; (8001060 <MX_GPIO_Init+0x2a8>)
 8000fbc:	f000 fe94 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000fc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4825      	ldr	r0, [pc, #148]	; (800106c <MX_GPIO_Init+0x2b4>)
 8000fd6:	f000 fe87 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000fda:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fec:	230a      	movs	r3, #10
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	481d      	ldr	r0, [pc, #116]	; (800106c <MX_GPIO_Init+0x2b4>)
 8000ff8:	f000 fe76 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ffc:	2320      	movs	r3, #32
 8000ffe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001000:	2300      	movs	r3, #0
 8001002:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	4619      	mov	r1, r3
 800100e:	4815      	ldr	r0, [pc, #84]	; (8001064 <MX_GPIO_Init+0x2ac>)
 8001010:	f000 fe6a 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001014:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800101a:	2312      	movs	r3, #18
 800101c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800101e:	2301      	movs	r3, #1
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001026:	2304      	movs	r3, #4
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102a:	f107 031c 	add.w	r3, r7, #28
 800102e:	4619      	mov	r1, r3
 8001030:	480f      	ldr	r0, [pc, #60]	; (8001070 <MX_GPIO_Init+0x2b8>)
 8001032:	f000 fe59 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001036:	2302      	movs	r3, #2
 8001038:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <MX_GPIO_Init+0x2bc>)
 800103c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001042:	f107 031c 	add.w	r3, r7, #28
 8001046:	4619      	mov	r1, r3
 8001048:	4804      	ldr	r0, [pc, #16]	; (800105c <MX_GPIO_Init+0x2a4>)
 800104a:	f000 fe4d 	bl	8001ce8 <HAL_GPIO_Init>

}
 800104e:	bf00      	nop
 8001050:	3730      	adds	r7, #48	; 0x30
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800
 800105c:	40021000 	.word	0x40021000
 8001060:	40020800 	.word	0x40020800
 8001064:	40020c00 	.word	0x40020c00
 8001068:	10110000 	.word	0x10110000
 800106c:	40020000 	.word	0x40020000
 8001070:	40020400 	.word	0x40020400
 8001074:	10120000 	.word	0x10120000

08001078 <Bootloader_UartReadData>:
 *  1. Reads the first byte, which contains the length of the remaining command.
 *  2. Reads the full command based on the received length.
 *  3. Parses the command and executes the corresponding handler function.
 */
void Bootloader_UartReadData(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b0c0      	sub	sp, #256	; 0x100
 800107c:	af00      	add	r7, sp, #0
	/* Buffer to store the received command packet */
	uint8_t Local_uint8CmdPacket[255] ={0};
 800107e:	463b      	mov	r3, r7
 8001080:	4618      	mov	r0, r3
 8001082:	23ff      	movs	r3, #255	; 0xff
 8001084:	461a      	mov	r2, r3
 8001086:	2100      	movs	r1, #0
 8001088:	f002 f9d2 	bl	8003430 <memset>

   /* Infinite loop to keep listening for commands */
	while(1)
	{
       /* Clear the command packet buffer before reading a new command */
		memset(Local_uint8CmdPacket,0,255); // memset(array , value to put , size )
 800108c:	463b      	mov	r3, r7
 800108e:	22ff      	movs	r2, #255	; 0xff
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f002 f9cc 	bl	8003430 <memset>
		/*
		        * Step 1: Read the first byte from UART.
		        * This byte contains the "Length to Follow" field, which tells how many bytes
		        * are coming next in the packet.
        */
		HAL_UART_Receive(&huart2, Local_uint8CmdPacket, 1, HAL_MAX_DELAY);
 8001098:	4639      	mov	r1, r7
 800109a:	f04f 33ff 	mov.w	r3, #4294967295
 800109e:	2201      	movs	r2, #1
 80010a0:	4835      	ldr	r0, [pc, #212]	; (8001178 <Bootloader_UartReadData+0x100>)
 80010a2:	f001 fd35 	bl	8002b10 <HAL_UART_Receive>

		/*
		        * Step 2: Read the remaining bytes of the command.
		        * It's size is the previous byte value .
	   */
		HAL_UART_Receive(&huart2, &Local_uint8CmdPacket[1], Local_uint8CmdPacket[0], HAL_MAX_DELAY);
 80010a6:	463b      	mov	r3, r7
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	463b      	mov	r3, r7
 80010ae:	1c59      	adds	r1, r3, #1
 80010b0:	f04f 33ff 	mov.w	r3, #4294967295
 80010b4:	4830      	ldr	r0, [pc, #192]	; (8001178 <Bootloader_UartReadData+0x100>)
 80010b6:	f001 fd2b 	bl	8002b10 <HAL_UART_Receive>

		/*
		        * Step 3: Check the command code (second byte in the packet)
		        * and call the corresponding handler function.
		        */
		switch(Local_uint8CmdPacket[1])     /*this byte includes the command code*/
 80010ba:	463b      	mov	r3, r7
 80010bc:	785b      	ldrb	r3, [r3, #1]
 80010be:	3b51      	subs	r3, #81	; 0x51
 80010c0:	2b0b      	cmp	r3, #11
 80010c2:	d857      	bhi.n	8001174 <Bootloader_UartReadData+0xfc>
 80010c4:	a201      	add	r2, pc, #4	; (adr r2, 80010cc <Bootloader_UartReadData+0x54>)
 80010c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ca:	bf00      	nop
 80010cc:	080010fd 	.word	0x080010fd
 80010d0:	08001107 	.word	0x08001107
 80010d4:	08001111 	.word	0x08001111
 80010d8:	0800111b 	.word	0x0800111b
 80010dc:	08001125 	.word	0x08001125
 80010e0:	0800112f 	.word	0x0800112f
 80010e4:	08001139 	.word	0x08001139
 80010e8:	08001143 	.word	0x08001143
 80010ec:	0800114d 	.word	0x0800114d
 80010f0:	08001157 	.word	0x08001157
 80010f4:	08001161 	.word	0x08001161
 80010f8:	0800116b 	.word	0x0800116b
		{
		case BL_GET_VESRION        :BL_voidHandleGetVERCmd(Local_uint8CmdPacket)                  ;        break;
 80010fc:	463b      	mov	r3, r7
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fb02 	bl	8000708 <BL_voidHandleGetVERCmd>
 8001104:	e037      	b.n	8001176 <Bootloader_UartReadData+0xfe>
		case BL_GET_HELP           :BL_voidHandleGetHelpCmd(Local_uint8CmdPacket)                 ;        break;
 8001106:	463b      	mov	r3, r7
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fb2f 	bl	800076c <BL_voidHandleGetHelpCmd>
 800110e:	e032      	b.n	8001176 <Bootloader_UartReadData+0xfe>
		case BL_GET_CID            :BL_voidHandleGetCIDcmd(Local_uint8CmdPacket)                  ;        break;
 8001110:	463b      	mov	r3, r7
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fb62 	bl	80007dc <BL_voidHandleGetCIDcmd>
 8001118:	e02d      	b.n	8001176 <Bootloader_UartReadData+0xfe>
		case BL_GET_RDP_STATUS     :BL_voidHandleGetRDPStatusCmd(Local_uint8CmdPacket)            ;        break;
 800111a:	463b      	mov	r3, r7
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fb95 	bl	800084c <BL_voidHandleGetRDPStatusCmd>
 8001122:	e028      	b.n	8001176 <Bootloader_UartReadData+0xfe>
		case BL_GO_TO_ADDR         :BL_voidHandleGoToAddressCmd(Local_uint8CmdPacket)             ;        break;
 8001124:	463b      	mov	r3, r7
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff fbc6 	bl	80008b8 <BL_voidHandleGoToAddressCmd>
 800112c:	e023      	b.n	8001176 <Bootloader_UartReadData+0xfe>
		case BL_FLASH_ERASE        :BL_voidHandleFlashEraseCmd(Local_uint8CmdPacket)              ;        break;
 800112e:	463b      	mov	r3, r7
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fc0f 	bl	8000954 <BL_voidHandleFlashEraseCmd>
 8001136:	e01e      	b.n	8001176 <Bootloader_UartReadData+0xfe>
		case BL_MEM_WRITE          :BL_voidHandleMemWriteCmd(Local_uint8CmdPacket)                ;        break;
 8001138:	463b      	mov	r3, r7
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fc54 	bl	80009e8 <BL_voidHandleMemWriteCmd>
 8001140:	e019      	b.n	8001176 <Bootloader_UartReadData+0xfe>
		case BL_EN_RW_PROTECT      :BL_voidHandleEnRWProtectCmd(Local_uint8CmdPacket)             ;        break;
 8001142:	463b      	mov	r3, r7
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fc99 	bl	8000a7c <BL_voidHandleEnRWProtectCmd>
 800114a:	e014      	b.n	8001176 <Bootloader_UartReadData+0xfe>
		case BL_MEM_READ           :BL_voidHandleMemReadCmd(Local_uint8CmdPacket)                 ;        break;
 800114c:	463b      	mov	r3, r7
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fcb9 	bl	8000ac6 <BL_voidHandleMemReadCmd>
 8001154:	e00f      	b.n	8001176 <Bootloader_UartReadData+0xfe>
		case BL_READ_SECTOR_STATUS :BL_voidHandleReadSectorStatusCmd(Local_uint8CmdPacket)        ;        break;
 8001156:	463b      	mov	r3, r7
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fcd9 	bl	8000b10 <BL_voidHandleReadSectorStatusCmd>
 800115e:	e00a      	b.n	8001176 <Bootloader_UartReadData+0xfe>
		case BL_OTP_READ           :BL_voidHandleOTPReadCmd(Local_uint8CmdPacket)                 ;        break;
 8001160:	463b      	mov	r3, r7
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fcf9 	bl	8000b5a <BL_voidHandleOTPReadCmd>
 8001168:	e005      	b.n	8001176 <Bootloader_UartReadData+0xfe>
		case BL_DIS_WR_PROTECT     :BL_voidHandleDisWRProtectCmd(Local_uint8CmdPacket)            ;        break;
 800116a:	463b      	mov	r3, r7
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff fd19 	bl	8000ba4 <BL_voidHandleDisWRProtectCmd>
 8001172:	e000      	b.n	8001176 <Bootloader_UartReadData+0xfe>

		default : /*Invalid command from host */ break ;
 8001174:	bf00      	nop
		memset(Local_uint8CmdPacket,0,255); // memset(array , value to put , size )
 8001176:	e789      	b.n	800108c <Bootloader_UartReadData+0x14>
 8001178:	20000030 	.word	0x20000030

0800117c <Bootloader_JumpToUserApp>:
 * This function transfers execution from the Bootloader to the User Application.
 * It achieves this by setting the MSP (Main Stack Pointer) and jumping to the
 * Reset Handler of the user application.
 */
void Bootloader_JumpToUserApp(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
	/*
		     * Step 1: Configure the MSP (Main Stack Pointer) for the User Application.
		     * The MSP value is stored at the first address of the application's Vector Table,
		     * which is located at the base address of FLASH Sector 2.
    */
 	Local_uint32MSPVal =  *((volatile uint32_t*)FLASH_SECTOR2_BASE_ADDRESS);
 8001182:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <Bootloader_JumpToUserApp+0x28>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	60fb      	str	r3, [r7, #12]

	/*
	     * Step 2: Load the User Application MSP value into the MSP register.
	     * This ensures that the stack pointer is correctly set before executing the application.
    */
	 __asm volatile("MSR MSP ,%0"::"r"(Local_uint32MSPVal));
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f383 8808 	msr	MSP, r3

	/*
	     * Step 3: Retrieve the Reset Handler address of the User Application.
	     * This is stored at the second entry in the Vector Table (offset +4 from base address).
   */
	 ResetHandlerAddress = *((volatile uint32_t*)(FLASH_SECTOR2_BASE_ADDRESS+ 4));
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <Bootloader_JumpToUserApp+0x2c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	60bb      	str	r3, [r7, #8]
	/*
	     * Step 4: Assign the Reset Handler address to the function pointer.
	     * This allows the program to jump to the application by calling this function.
   */
	App_ResetHandle =(void*)ResetHandlerAddress;
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	607b      	str	r3, [r7, #4]

	/*
	     * Step 5: Jump to the User Application's Reset Handler.
	     * This effectively transfers control from the Bootloader to the application.
   */
	App_ResetHandle();
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4798      	blx	r3

}
 800119c:	bf00      	nop
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	08008000 	.word	0x08008000
 80011a8:	08008004 	.word	0x08008004

080011ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
	...

080011bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <HAL_MspInit+0x4c>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <HAL_MspInit+0x4c>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <HAL_MspInit+0x4c>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	603b      	str	r3, [r7, #0]
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <HAL_MspInit+0x4c>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	4a08      	ldr	r2, [pc, #32]	; (8001208 <HAL_MspInit+0x4c>)
 80011e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ec:	6413      	str	r3, [r2, #64]	; 0x40
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_MspInit+0x4c>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011fa:	2007      	movs	r0, #7
 80011fc:	f000 fa24 	bl	8001648 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40023800 	.word	0x40023800

0800120c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <HAL_CRC_MspInit+0x3c>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d10d      	bne.n	800123a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <HAL_CRC_MspInit+0x40>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a09      	ldr	r2, [pc, #36]	; (800124c <HAL_CRC_MspInit+0x40>)
 8001228:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <HAL_CRC_MspInit+0x40>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800123a:	bf00      	nop
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40023000 	.word	0x40023000
 800124c:	40023800 	.word	0x40023800

08001250 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	; 0x28
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a19      	ldr	r2, [pc, #100]	; (80012d4 <HAL_UART_MspInit+0x84>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d12b      	bne.n	80012ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <HAL_UART_MspInit+0x88>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	4a17      	ldr	r2, [pc, #92]	; (80012d8 <HAL_UART_MspInit+0x88>)
 800127c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001280:	6413      	str	r3, [r2, #64]	; 0x40
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <HAL_UART_MspInit+0x88>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <HAL_UART_MspInit+0x88>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a10      	ldr	r2, [pc, #64]	; (80012d8 <HAL_UART_MspInit+0x88>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <HAL_UART_MspInit+0x88>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012aa:	230c      	movs	r3, #12
 80012ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012ba:	2307      	movs	r3, #7
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <HAL_UART_MspInit+0x8c>)
 80012c6:	f000 fd0f 	bl	8001ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012ca:	bf00      	nop
 80012cc:	3728      	adds	r7, #40	; 0x28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40004400 	.word	0x40004400
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020000 	.word	0x40020000

080012e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f2:	e7fe      	b.n	80012f2 <HardFault_Handler+0x4>

080012f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <MemManage_Handler+0x4>

080012fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fe:	e7fe      	b.n	80012fe <BusFault_Handler+0x4>

08001300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <UsageFault_Handler+0x4>

08001306 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001334:	f000 f894 	bl	8001460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}

0800133c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <SystemInit+0x28>)
 8001342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001346:	4a07      	ldr	r2, [pc, #28]	; (8001364 <SystemInit+0x28>)
 8001348:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800134c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <SystemInit+0x28>)
 8001352:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001356:	609a      	str	r2, [r3, #8]
#endif
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001368:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800136c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800136e:	e003      	b.n	8001378 <LoopCopyDataInit>

08001370 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001372:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001374:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001376:	3104      	adds	r1, #4

08001378 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001378:	480b      	ldr	r0, [pc, #44]	; (80013a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800137a:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800137c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800137e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001380:	d3f6      	bcc.n	8001370 <CopyDataInit>
  ldr  r2, =_sbss
 8001382:	4a0b      	ldr	r2, [pc, #44]	; (80013b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001384:	e002      	b.n	800138c <LoopFillZerobss>

08001386 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001386:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001388:	f842 3b04 	str.w	r3, [r2], #4

0800138c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800138e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001390:	d3f9      	bcc.n	8001386 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001392:	f7ff ffd3 	bl	800133c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001396:	f002 f827 	bl	80033e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800139a:	f7ff fc29 	bl	8000bf0 <main>
  bx  lr    
 800139e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013a0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80013a4:	080034a4 	.word	0x080034a4
  ldr  r0, =_sdata
 80013a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80013ac:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80013b0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80013b4:	20000094 	.word	0x20000094

080013b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b8:	e7fe      	b.n	80013b8 <ADC_IRQHandler>
	...

080013bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013c0:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <HAL_Init+0x40>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a0d      	ldr	r2, [pc, #52]	; (80013fc <HAL_Init+0x40>)
 80013c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013cc:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <HAL_Init+0x40>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <HAL_Init+0x40>)
 80013d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <HAL_Init+0x40>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a07      	ldr	r2, [pc, #28]	; (80013fc <HAL_Init+0x40>)
 80013de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e4:	2003      	movs	r0, #3
 80013e6:	f000 f92f 	bl	8001648 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ea:	2000      	movs	r0, #0
 80013ec:	f000 f808 	bl	8001400 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013f0:	f7ff fee4 	bl	80011bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40023c00 	.word	0x40023c00

08001400 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <HAL_InitTick+0x54>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_InitTick+0x58>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	4619      	mov	r1, r3
 8001412:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001416:	fbb3 f3f1 	udiv	r3, r3, r1
 800141a:	fbb2 f3f3 	udiv	r3, r2, r3
 800141e:	4618      	mov	r0, r3
 8001420:	f000 f939 	bl	8001696 <HAL_SYSTICK_Config>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e00e      	b.n	800144c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b0f      	cmp	r3, #15
 8001432:	d80a      	bhi.n	800144a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001434:	2200      	movs	r2, #0
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	f04f 30ff 	mov.w	r0, #4294967295
 800143c:	f000 f90f 	bl	800165e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001440:	4a06      	ldr	r2, [pc, #24]	; (800145c <HAL_InitTick+0x5c>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001446:	2300      	movs	r3, #0
 8001448:	e000      	b.n	800144c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
}
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000000 	.word	0x20000000
 8001458:	20000008 	.word	0x20000008
 800145c:	20000004 	.word	0x20000004

08001460 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_IncTick+0x20>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	461a      	mov	r2, r3
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_IncTick+0x24>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4413      	add	r3, r2
 8001470:	4a04      	ldr	r2, [pc, #16]	; (8001484 <HAL_IncTick+0x24>)
 8001472:	6013      	str	r3, [r2, #0]
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	20000008 	.word	0x20000008
 8001484:	20000070 	.word	0x20000070

08001488 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return uwTick;
 800148c:	4b03      	ldr	r3, [pc, #12]	; (800149c <HAL_GetTick+0x14>)
 800148e:	681b      	ldr	r3, [r3, #0]
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	20000070 	.word	0x20000070

080014a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a8:	f7ff ffee 	bl	8001488 <HAL_GetTick>
 80014ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b8:	d005      	beq.n	80014c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <HAL_Delay+0x40>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	461a      	mov	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4413      	add	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014c6:	bf00      	nop
 80014c8:	f7ff ffde 	bl	8001488 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d8f7      	bhi.n	80014c8 <HAL_Delay+0x28>
  {
  }
}
 80014d8:	bf00      	nop
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000008 	.word	0x20000008

080014e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001500:	4013      	ands	r3, r2
 8001502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800150c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001516:	4a04      	ldr	r2, [pc, #16]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	60d3      	str	r3, [r2, #12]
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <__NVIC_GetPriorityGrouping+0x18>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	f003 0307 	and.w	r3, r3, #7
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	6039      	str	r1, [r7, #0]
 8001552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001558:	2b00      	cmp	r3, #0
 800155a:	db0a      	blt.n	8001572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	b2da      	uxtb	r2, r3
 8001560:	490c      	ldr	r1, [pc, #48]	; (8001594 <__NVIC_SetPriority+0x4c>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	0112      	lsls	r2, r2, #4
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	440b      	add	r3, r1
 800156c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001570:	e00a      	b.n	8001588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	b2da      	uxtb	r2, r3
 8001576:	4908      	ldr	r1, [pc, #32]	; (8001598 <__NVIC_SetPriority+0x50>)
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	3b04      	subs	r3, #4
 8001580:	0112      	lsls	r2, r2, #4
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	440b      	add	r3, r1
 8001586:	761a      	strb	r2, [r3, #24]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000e100 	.word	0xe000e100
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800159c:	b480      	push	{r7}
 800159e:	b089      	sub	sp, #36	; 0x24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f1c3 0307 	rsb	r3, r3, #7
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	bf28      	it	cs
 80015ba:	2304      	movcs	r3, #4
 80015bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3304      	adds	r3, #4
 80015c2:	2b06      	cmp	r3, #6
 80015c4:	d902      	bls.n	80015cc <NVIC_EncodePriority+0x30>
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3b03      	subs	r3, #3
 80015ca:	e000      	b.n	80015ce <NVIC_EncodePriority+0x32>
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	f04f 32ff 	mov.w	r2, #4294967295
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43da      	mvns	r2, r3
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	401a      	ands	r2, r3
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e4:	f04f 31ff 	mov.w	r1, #4294967295
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	fa01 f303 	lsl.w	r3, r1, r3
 80015ee:	43d9      	mvns	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	4313      	orrs	r3, r2
         );
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3724      	adds	r7, #36	; 0x24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3b01      	subs	r3, #1
 8001610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001614:	d301      	bcc.n	800161a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001616:	2301      	movs	r3, #1
 8001618:	e00f      	b.n	800163a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800161a:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <SysTick_Config+0x40>)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3b01      	subs	r3, #1
 8001620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001622:	210f      	movs	r1, #15
 8001624:	f04f 30ff 	mov.w	r0, #4294967295
 8001628:	f7ff ff8e 	bl	8001548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800162c:	4b05      	ldr	r3, [pc, #20]	; (8001644 <SysTick_Config+0x40>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001632:	4b04      	ldr	r3, [pc, #16]	; (8001644 <SysTick_Config+0x40>)
 8001634:	2207      	movs	r2, #7
 8001636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	e000e010 	.word	0xe000e010

08001648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ff47 	bl	80014e4 <__NVIC_SetPriorityGrouping>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800165e:	b580      	push	{r7, lr}
 8001660:	b086      	sub	sp, #24
 8001662:	af00      	add	r7, sp, #0
 8001664:	4603      	mov	r3, r0
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	607a      	str	r2, [r7, #4]
 800166a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001670:	f7ff ff5c 	bl	800152c <__NVIC_GetPriorityGrouping>
 8001674:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	68b9      	ldr	r1, [r7, #8]
 800167a:	6978      	ldr	r0, [r7, #20]
 800167c:	f7ff ff8e 	bl	800159c <NVIC_EncodePriority>
 8001680:	4602      	mov	r2, r0
 8001682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001686:	4611      	mov	r1, r2
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff5d 	bl	8001548 <__NVIC_SetPriority>
}
 800168e:	bf00      	nop
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff ffb0 	bl	8001604 <SysTick_Config>
 80016a4:	4603      	mov	r3, r0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d101      	bne.n	80016c0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e00e      	b.n	80016de <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	795b      	ldrb	r3, [r3, #5]
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d105      	bne.n	80016d6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff fd9b 	bl	800120c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2201      	movs	r2, #1
 80016da:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b087      	sub	sp, #28
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	60f8      	str	r0, [r7, #12]
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2202      	movs	r2, #2
 80016fa:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	e00a      	b.n	8001718 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	441a      	add	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6812      	ldr	r2, [r2, #0]
 8001710:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	3301      	adds	r3, #1
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	429a      	cmp	r2, r3
 800171e:	d3f0      	bcc.n	8001702 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2201      	movs	r2, #1
 800172c:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800172e:	693b      	ldr	r3, [r7, #16]
}
 8001730:	4618      	mov	r0, r3
 8001732:	371c      	adds	r7, #28
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800174e:	4b23      	ldr	r3, [pc, #140]	; (80017dc <HAL_FLASH_Program+0xa0>)
 8001750:	7e1b      	ldrb	r3, [r3, #24]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d101      	bne.n	800175a <HAL_FLASH_Program+0x1e>
 8001756:	2302      	movs	r3, #2
 8001758:	e03b      	b.n	80017d2 <HAL_FLASH_Program+0x96>
 800175a:	4b20      	ldr	r3, [pc, #128]	; (80017dc <HAL_FLASH_Program+0xa0>)
 800175c:	2201      	movs	r2, #1
 800175e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001760:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001764:	f000 f870 	bl	8001848 <FLASH_WaitForLastOperation>
 8001768:	4603      	mov	r3, r0
 800176a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800176c:	7dfb      	ldrb	r3, [r7, #23]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d12b      	bne.n	80017ca <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d105      	bne.n	8001784 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001778:	783b      	ldrb	r3, [r7, #0]
 800177a:	4619      	mov	r1, r3
 800177c:	68b8      	ldr	r0, [r7, #8]
 800177e:	f000 f919 	bl	80019b4 <FLASH_Program_Byte>
 8001782:	e016      	b.n	80017b2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d105      	bne.n	8001796 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800178a:	883b      	ldrh	r3, [r7, #0]
 800178c:	4619      	mov	r1, r3
 800178e:	68b8      	ldr	r0, [r7, #8]
 8001790:	f000 f8ec 	bl	800196c <FLASH_Program_HalfWord>
 8001794:	e00d      	b.n	80017b2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2b02      	cmp	r3, #2
 800179a:	d105      	bne.n	80017a8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	4619      	mov	r1, r3
 80017a0:	68b8      	ldr	r0, [r7, #8]
 80017a2:	f000 f8c1 	bl	8001928 <FLASH_Program_Word>
 80017a6:	e004      	b.n	80017b2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80017a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017ac:	68b8      	ldr	r0, [r7, #8]
 80017ae:	f000 f88b 	bl	80018c8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80017b2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80017b6:	f000 f847 	bl	8001848 <FLASH_WaitForLastOperation>
 80017ba:	4603      	mov	r3, r0
 80017bc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <HAL_FLASH_Program+0xa4>)
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	4a07      	ldr	r2, [pc, #28]	; (80017e0 <HAL_FLASH_Program+0xa4>)
 80017c4:	f023 0301 	bic.w	r3, r3, #1
 80017c8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80017ca:	4b04      	ldr	r3, [pc, #16]	; (80017dc <HAL_FLASH_Program+0xa0>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	761a      	strb	r2, [r3, #24]
  
  return status;
 80017d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000074 	.word	0x20000074
 80017e0:	40023c00 	.word	0x40023c00

080017e4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80017ea:	2300      	movs	r3, #0
 80017ec:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <HAL_FLASH_Unlock+0x38>)
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	da0b      	bge.n	800180e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <HAL_FLASH_Unlock+0x38>)
 80017f8:	4a09      	ldr	r2, [pc, #36]	; (8001820 <HAL_FLASH_Unlock+0x3c>)
 80017fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80017fc:	4b07      	ldr	r3, [pc, #28]	; (800181c <HAL_FLASH_Unlock+0x38>)
 80017fe:	4a09      	ldr	r2, [pc, #36]	; (8001824 <HAL_FLASH_Unlock+0x40>)
 8001800:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_FLASH_Unlock+0x38>)
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	2b00      	cmp	r3, #0
 8001808:	da01      	bge.n	800180e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800180e:	79fb      	ldrb	r3, [r7, #7]
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	40023c00 	.word	0x40023c00
 8001820:	45670123 	.word	0x45670123
 8001824:	cdef89ab 	.word	0xcdef89ab

08001828 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <HAL_FLASH_Lock+0x1c>)
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	4a04      	ldr	r2, [pc, #16]	; (8001844 <HAL_FLASH_Lock+0x1c>)
 8001832:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001836:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	40023c00 	.word	0x40023c00

08001848 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001854:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <FLASH_WaitForLastOperation+0x78>)
 8001856:	2200      	movs	r2, #0
 8001858:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800185a:	f7ff fe15 	bl	8001488 <HAL_GetTick>
 800185e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001860:	e010      	b.n	8001884 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001868:	d00c      	beq.n	8001884 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d007      	beq.n	8001880 <FLASH_WaitForLastOperation+0x38>
 8001870:	f7ff fe0a 	bl	8001488 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	429a      	cmp	r2, r3
 800187e:	d201      	bcs.n	8001884 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e019      	b.n	80018b8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <FLASH_WaitForLastOperation+0x7c>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1e8      	bne.n	8001862 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <FLASH_WaitForLastOperation+0x7c>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b00      	cmp	r3, #0
 800189a:	d002      	beq.n	80018a2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800189c:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <FLASH_WaitForLastOperation+0x7c>)
 800189e:	2201      	movs	r2, #1
 80018a0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80018a2:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <FLASH_WaitForLastOperation+0x7c>)
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80018ae:	f000 f8a3 	bl	80019f8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e000      	b.n	80018b8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
  
}  
 80018b8:	4618      	mov	r0, r3
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000074 	.word	0x20000074
 80018c4:	40023c00 	.word	0x40023c00

080018c8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80018c8:	b490      	push	{r4, r7}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80018d4:	4b13      	ldr	r3, [pc, #76]	; (8001924 <FLASH_Program_DoubleWord+0x5c>)
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	4a12      	ldr	r2, [pc, #72]	; (8001924 <FLASH_Program_DoubleWord+0x5c>)
 80018da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80018e0:	4b10      	ldr	r3, [pc, #64]	; (8001924 <FLASH_Program_DoubleWord+0x5c>)
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	4a0f      	ldr	r2, [pc, #60]	; (8001924 <FLASH_Program_DoubleWord+0x5c>)
 80018e6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80018ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80018ec:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <FLASH_Program_DoubleWord+0x5c>)
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	4a0c      	ldr	r2, [pc, #48]	; (8001924 <FLASH_Program_DoubleWord+0x5c>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80018fe:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001902:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001906:	f04f 0300 	mov.w	r3, #0
 800190a:	f04f 0400 	mov.w	r4, #0
 800190e:	0013      	movs	r3, r2
 8001910:	2400      	movs	r4, #0
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	3204      	adds	r2, #4
 8001916:	6013      	str	r3, [r2, #0]
}
 8001918:	bf00      	nop
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bc90      	pop	{r4, r7}
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40023c00 	.word	0x40023c00

08001928 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001932:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <FLASH_Program_Word+0x40>)
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	4a0c      	ldr	r2, [pc, #48]	; (8001968 <FLASH_Program_Word+0x40>)
 8001938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800193c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <FLASH_Program_Word+0x40>)
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	4a09      	ldr	r2, [pc, #36]	; (8001968 <FLASH_Program_Word+0x40>)
 8001944:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001948:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800194a:	4b07      	ldr	r3, [pc, #28]	; (8001968 <FLASH_Program_Word+0x40>)
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	4a06      	ldr	r2, [pc, #24]	; (8001968 <FLASH_Program_Word+0x40>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	601a      	str	r2, [r3, #0]
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	40023c00 	.word	0x40023c00

0800196c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001978:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <FLASH_Program_HalfWord+0x44>)
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	4a0c      	ldr	r2, [pc, #48]	; (80019b0 <FLASH_Program_HalfWord+0x44>)
 800197e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001982:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001984:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <FLASH_Program_HalfWord+0x44>)
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	4a09      	ldr	r2, [pc, #36]	; (80019b0 <FLASH_Program_HalfWord+0x44>)
 800198a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800198e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001990:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <FLASH_Program_HalfWord+0x44>)
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	4a06      	ldr	r2, [pc, #24]	; (80019b0 <FLASH_Program_HalfWord+0x44>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	887a      	ldrh	r2, [r7, #2]
 80019a0:	801a      	strh	r2, [r3, #0]
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	40023c00 	.word	0x40023c00

080019b4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <FLASH_Program_Byte+0x40>)
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	4a0b      	ldr	r2, [pc, #44]	; (80019f4 <FLASH_Program_Byte+0x40>)
 80019c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80019cc:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <FLASH_Program_Byte+0x40>)
 80019ce:	4a09      	ldr	r2, [pc, #36]	; (80019f4 <FLASH_Program_Byte+0x40>)
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80019d4:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <FLASH_Program_Byte+0x40>)
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	4a06      	ldr	r2, [pc, #24]	; (80019f4 <FLASH_Program_Byte+0x40>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	78fa      	ldrb	r2, [r7, #3]
 80019e4:	701a      	strb	r2, [r3, #0]
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	40023c00 	.word	0x40023c00

080019f8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80019fc:	4b27      	ldr	r3, [pc, #156]	; (8001a9c <FLASH_SetErrorCode+0xa4>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	f003 0310 	and.w	r3, r3, #16
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d008      	beq.n	8001a1a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001a08:	4b25      	ldr	r3, [pc, #148]	; (8001aa0 <FLASH_SetErrorCode+0xa8>)
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	f043 0310 	orr.w	r3, r3, #16
 8001a10:	4a23      	ldr	r2, [pc, #140]	; (8001aa0 <FLASH_SetErrorCode+0xa8>)
 8001a12:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001a14:	4b21      	ldr	r3, [pc, #132]	; (8001a9c <FLASH_SetErrorCode+0xa4>)
 8001a16:	2210      	movs	r2, #16
 8001a18:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001a1a:	4b20      	ldr	r3, [pc, #128]	; (8001a9c <FLASH_SetErrorCode+0xa4>)
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	f003 0320 	and.w	r3, r3, #32
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d008      	beq.n	8001a38 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001a26:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <FLASH_SetErrorCode+0xa8>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	f043 0308 	orr.w	r3, r3, #8
 8001a2e:	4a1c      	ldr	r2, [pc, #112]	; (8001aa0 <FLASH_SetErrorCode+0xa8>)
 8001a30:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001a32:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <FLASH_SetErrorCode+0xa4>)
 8001a34:	2220      	movs	r2, #32
 8001a36:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001a38:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <FLASH_SetErrorCode+0xa4>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d008      	beq.n	8001a56 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001a44:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <FLASH_SetErrorCode+0xa8>)
 8001a46:	69db      	ldr	r3, [r3, #28]
 8001a48:	f043 0304 	orr.w	r3, r3, #4
 8001a4c:	4a14      	ldr	r2, [pc, #80]	; (8001aa0 <FLASH_SetErrorCode+0xa8>)
 8001a4e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <FLASH_SetErrorCode+0xa4>)
 8001a52:	2240      	movs	r2, #64	; 0x40
 8001a54:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001a56:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <FLASH_SetErrorCode+0xa4>)
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d008      	beq.n	8001a74 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001a62:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <FLASH_SetErrorCode+0xa8>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	f043 0302 	orr.w	r3, r3, #2
 8001a6a:	4a0d      	ldr	r2, [pc, #52]	; (8001aa0 <FLASH_SetErrorCode+0xa8>)
 8001a6c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <FLASH_SetErrorCode+0xa4>)
 8001a70:	2280      	movs	r2, #128	; 0x80
 8001a72:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001a74:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <FLASH_SetErrorCode+0xa4>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d008      	beq.n	8001a92 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001a80:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <FLASH_SetErrorCode+0xa8>)
 8001a82:	69db      	ldr	r3, [r3, #28]
 8001a84:	f043 0320 	orr.w	r3, r3, #32
 8001a88:	4a05      	ldr	r2, [pc, #20]	; (8001aa0 <FLASH_SetErrorCode+0xa8>)
 8001a8a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001a8c:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <FLASH_SetErrorCode+0xa4>)
 8001a8e:	2202      	movs	r2, #2
 8001a90:	60da      	str	r2, [r3, #12]
  }
}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	40023c00 	.word	0x40023c00
 8001aa0:	20000074 	.word	0x20000074

08001aa4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001ab6:	4b31      	ldr	r3, [pc, #196]	; (8001b7c <HAL_FLASHEx_Erase+0xd8>)
 8001ab8:	7e1b      	ldrb	r3, [r3, #24]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d101      	bne.n	8001ac2 <HAL_FLASHEx_Erase+0x1e>
 8001abe:	2302      	movs	r3, #2
 8001ac0:	e058      	b.n	8001b74 <HAL_FLASHEx_Erase+0xd0>
 8001ac2:	4b2e      	ldr	r3, [pc, #184]	; (8001b7c <HAL_FLASHEx_Erase+0xd8>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ac8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001acc:	f7ff febc 	bl	8001848 <FLASH_WaitForLastOperation>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d148      	bne.n	8001b6c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae0:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d115      	bne.n	8001b16 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	4619      	mov	r1, r3
 8001af6:	4610      	mov	r0, r2
 8001af8:	f000 f844 	bl	8001b84 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001afc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b00:	f7ff fea2 	bl	8001848 <FLASH_WaitForLastOperation>
 8001b04:	4603      	mov	r3, r0
 8001b06:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001b08:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <HAL_FLASHEx_Erase+0xdc>)
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	4a1c      	ldr	r2, [pc, #112]	; (8001b80 <HAL_FLASHEx_Erase+0xdc>)
 8001b0e:	f023 0304 	bic.w	r3, r3, #4
 8001b12:	6113      	str	r3, [r2, #16]
 8001b14:	e028      	b.n	8001b68 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	60bb      	str	r3, [r7, #8]
 8001b1c:	e01c      	b.n	8001b58 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	4619      	mov	r1, r3
 8001b26:	68b8      	ldr	r0, [r7, #8]
 8001b28:	f000 f850 	bl	8001bcc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b2c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b30:	f7ff fe8a 	bl	8001848 <FLASH_WaitForLastOperation>
 8001b34:	4603      	mov	r3, r0
 8001b36:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001b38:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <HAL_FLASHEx_Erase+0xdc>)
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	4a10      	ldr	r2, [pc, #64]	; (8001b80 <HAL_FLASHEx_Erase+0xdc>)
 8001b3e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001b42:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	68ba      	ldr	r2, [r7, #8]
 8001b4e:	601a      	str	r2, [r3, #0]
          break;
 8001b50:	e00a      	b.n	8001b68 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	3301      	adds	r3, #1
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68da      	ldr	r2, [r3, #12]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	4413      	add	r3, r2
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d3da      	bcc.n	8001b1e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8001b68:	f000 f878 	bl	8001c5c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001b6c:	4b03      	ldr	r3, [pc, #12]	; (8001b7c <HAL_FLASHEx_Erase+0xd8>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	761a      	strb	r2, [r3, #24]

  return status;
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000074 	.word	0x20000074
 8001b80:	40023c00 	.word	0x40023c00

08001b84 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	6039      	str	r1, [r7, #0]
 8001b8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b90:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <FLASH_MassErase+0x44>)
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	4a0c      	ldr	r2, [pc, #48]	; (8001bc8 <FLASH_MassErase+0x44>)
 8001b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001b9c:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <FLASH_MassErase+0x44>)
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	4a09      	ldr	r2, [pc, #36]	; (8001bc8 <FLASH_MassErase+0x44>)
 8001ba2:	f043 0304 	orr.w	r3, r3, #4
 8001ba6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001ba8:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <FLASH_MassErase+0x44>)
 8001baa:	691a      	ldr	r2, [r3, #16]
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	021b      	lsls	r3, r3, #8
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	4a05      	ldr	r2, [pc, #20]	; (8001bc8 <FLASH_MassErase+0x44>)
 8001bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb8:	6113      	str	r3, [r2, #16]
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	40023c00 	.word	0x40023c00

08001bcc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d102      	bne.n	8001be8 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	e010      	b.n	8001c0a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001be8:	78fb      	ldrb	r3, [r7, #3]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d103      	bne.n	8001bf6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001bee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	e009      	b.n	8001c0a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001bf6:	78fb      	ldrb	r3, [r7, #3]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d103      	bne.n	8001c04 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001bfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	e002      	b.n	8001c0a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001c04:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c08:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c0a:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <FLASH_Erase_Sector+0x8c>)
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	4a12      	ldr	r2, [pc, #72]	; (8001c58 <FLASH_Erase_Sector+0x8c>)
 8001c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c14:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001c16:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <FLASH_Erase_Sector+0x8c>)
 8001c18:	691a      	ldr	r2, [r3, #16]
 8001c1a:	490f      	ldr	r1, [pc, #60]	; (8001c58 <FLASH_Erase_Sector+0x8c>)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001c22:	4b0d      	ldr	r3, [pc, #52]	; (8001c58 <FLASH_Erase_Sector+0x8c>)
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	4a0c      	ldr	r2, [pc, #48]	; (8001c58 <FLASH_Erase_Sector+0x8c>)
 8001c28:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c2c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001c2e:	4b0a      	ldr	r3, [pc, #40]	; (8001c58 <FLASH_Erase_Sector+0x8c>)
 8001c30:	691a      	ldr	r2, [r3, #16]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	4313      	orrs	r3, r2
 8001c38:	4a07      	ldr	r2, [pc, #28]	; (8001c58 <FLASH_Erase_Sector+0x8c>)
 8001c3a:	f043 0302 	orr.w	r3, r3, #2
 8001c3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001c40:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <FLASH_Erase_Sector+0x8c>)
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	4a04      	ldr	r2, [pc, #16]	; (8001c58 <FLASH_Erase_Sector+0x8c>)
 8001c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c4a:	6113      	str	r3, [r2, #16]
}
 8001c4c:	bf00      	nop
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	40023c00 	.word	0x40023c00

08001c5c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8001c60:	4b20      	ldr	r3, [pc, #128]	; (8001ce4 <FLASH_FlushCaches+0x88>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d017      	beq.n	8001c9c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001c6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <FLASH_FlushCaches+0x88>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a1c      	ldr	r2, [pc, #112]	; (8001ce4 <FLASH_FlushCaches+0x88>)
 8001c72:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001c76:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001c78:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <FLASH_FlushCaches+0x88>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a19      	ldr	r2, [pc, #100]	; (8001ce4 <FLASH_FlushCaches+0x88>)
 8001c7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <FLASH_FlushCaches+0x88>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a16      	ldr	r2, [pc, #88]	; (8001ce4 <FLASH_FlushCaches+0x88>)
 8001c8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c8e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c90:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <FLASH_FlushCaches+0x88>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a13      	ldr	r2, [pc, #76]	; (8001ce4 <FLASH_FlushCaches+0x88>)
 8001c96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c9a:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <FLASH_FlushCaches+0x88>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d017      	beq.n	8001cd8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001ca8:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <FLASH_FlushCaches+0x88>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a0d      	ldr	r2, [pc, #52]	; (8001ce4 <FLASH_FlushCaches+0x88>)
 8001cae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001cb2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <FLASH_FlushCaches+0x88>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a0a      	ldr	r2, [pc, #40]	; (8001ce4 <FLASH_FlushCaches+0x88>)
 8001cba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cbe:	6013      	str	r3, [r2, #0]
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <FLASH_FlushCaches+0x88>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a07      	ldr	r2, [pc, #28]	; (8001ce4 <FLASH_FlushCaches+0x88>)
 8001cc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cca:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ccc:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <FLASH_FlushCaches+0x88>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <FLASH_FlushCaches+0x88>)
 8001cd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cd6:	6013      	str	r3, [r2, #0]
  }
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	40023c00 	.word	0x40023c00

08001ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b089      	sub	sp, #36	; 0x24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61fb      	str	r3, [r7, #28]
 8001d02:	e16b      	b.n	8001fdc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d04:	2201      	movs	r2, #1
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	4013      	ands	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	f040 815a 	bne.w	8001fd6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d00b      	beq.n	8001d42 <HAL_GPIO_Init+0x5a>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d007      	beq.n	8001d42 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d36:	2b11      	cmp	r3, #17
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b12      	cmp	r3, #18
 8001d40:	d130      	bne.n	8001da4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d78:	2201      	movs	r2, #1
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 0201 	and.w	r2, r3, #1
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	2203      	movs	r2, #3
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d003      	beq.n	8001de4 <HAL_GPIO_Init+0xfc>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b12      	cmp	r3, #18
 8001de2:	d123      	bne.n	8001e2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	08da      	lsrs	r2, r3, #3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3208      	adds	r2, #8
 8001dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	220f      	movs	r2, #15
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	691a      	ldr	r2, [r3, #16]
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	08da      	lsrs	r2, r3, #3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3208      	adds	r2, #8
 8001e26:	69b9      	ldr	r1, [r7, #24]
 8001e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	2203      	movs	r2, #3
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 0203 	and.w	r2, r3, #3
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 80b4 	beq.w	8001fd6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	4b5f      	ldr	r3, [pc, #380]	; (8001ff0 <HAL_GPIO_Init+0x308>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e76:	4a5e      	ldr	r2, [pc, #376]	; (8001ff0 <HAL_GPIO_Init+0x308>)
 8001e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e7e:	4b5c      	ldr	r3, [pc, #368]	; (8001ff0 <HAL_GPIO_Init+0x308>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e8a:	4a5a      	ldr	r2, [pc, #360]	; (8001ff4 <HAL_GPIO_Init+0x30c>)
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	089b      	lsrs	r3, r3, #2
 8001e90:	3302      	adds	r3, #2
 8001e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	220f      	movs	r2, #15
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a51      	ldr	r2, [pc, #324]	; (8001ff8 <HAL_GPIO_Init+0x310>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d02b      	beq.n	8001f0e <HAL_GPIO_Init+0x226>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a50      	ldr	r2, [pc, #320]	; (8001ffc <HAL_GPIO_Init+0x314>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d025      	beq.n	8001f0a <HAL_GPIO_Init+0x222>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a4f      	ldr	r2, [pc, #316]	; (8002000 <HAL_GPIO_Init+0x318>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d01f      	beq.n	8001f06 <HAL_GPIO_Init+0x21e>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a4e      	ldr	r2, [pc, #312]	; (8002004 <HAL_GPIO_Init+0x31c>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d019      	beq.n	8001f02 <HAL_GPIO_Init+0x21a>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a4d      	ldr	r2, [pc, #308]	; (8002008 <HAL_GPIO_Init+0x320>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d013      	beq.n	8001efe <HAL_GPIO_Init+0x216>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a4c      	ldr	r2, [pc, #304]	; (800200c <HAL_GPIO_Init+0x324>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d00d      	beq.n	8001efa <HAL_GPIO_Init+0x212>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a4b      	ldr	r2, [pc, #300]	; (8002010 <HAL_GPIO_Init+0x328>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d007      	beq.n	8001ef6 <HAL_GPIO_Init+0x20e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a4a      	ldr	r2, [pc, #296]	; (8002014 <HAL_GPIO_Init+0x32c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d101      	bne.n	8001ef2 <HAL_GPIO_Init+0x20a>
 8001eee:	2307      	movs	r3, #7
 8001ef0:	e00e      	b.n	8001f10 <HAL_GPIO_Init+0x228>
 8001ef2:	2308      	movs	r3, #8
 8001ef4:	e00c      	b.n	8001f10 <HAL_GPIO_Init+0x228>
 8001ef6:	2306      	movs	r3, #6
 8001ef8:	e00a      	b.n	8001f10 <HAL_GPIO_Init+0x228>
 8001efa:	2305      	movs	r3, #5
 8001efc:	e008      	b.n	8001f10 <HAL_GPIO_Init+0x228>
 8001efe:	2304      	movs	r3, #4
 8001f00:	e006      	b.n	8001f10 <HAL_GPIO_Init+0x228>
 8001f02:	2303      	movs	r3, #3
 8001f04:	e004      	b.n	8001f10 <HAL_GPIO_Init+0x228>
 8001f06:	2302      	movs	r3, #2
 8001f08:	e002      	b.n	8001f10 <HAL_GPIO_Init+0x228>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <HAL_GPIO_Init+0x228>
 8001f0e:	2300      	movs	r3, #0
 8001f10:	69fa      	ldr	r2, [r7, #28]
 8001f12:	f002 0203 	and.w	r2, r2, #3
 8001f16:	0092      	lsls	r2, r2, #2
 8001f18:	4093      	lsls	r3, r2
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f20:	4934      	ldr	r1, [pc, #208]	; (8001ff4 <HAL_GPIO_Init+0x30c>)
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	089b      	lsrs	r3, r3, #2
 8001f26:	3302      	adds	r3, #2
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f2e:	4b3a      	ldr	r3, [pc, #232]	; (8002018 <HAL_GPIO_Init+0x330>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f52:	4a31      	ldr	r2, [pc, #196]	; (8002018 <HAL_GPIO_Init+0x330>)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f58:	4b2f      	ldr	r3, [pc, #188]	; (8002018 <HAL_GPIO_Init+0x330>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f7c:	4a26      	ldr	r2, [pc, #152]	; (8002018 <HAL_GPIO_Init+0x330>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f82:	4b25      	ldr	r3, [pc, #148]	; (8002018 <HAL_GPIO_Init+0x330>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fa6:	4a1c      	ldr	r2, [pc, #112]	; (8002018 <HAL_GPIO_Init+0x330>)
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fac:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <HAL_GPIO_Init+0x330>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fd0:	4a11      	ldr	r2, [pc, #68]	; (8002018 <HAL_GPIO_Init+0x330>)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	61fb      	str	r3, [r7, #28]
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	2b0f      	cmp	r3, #15
 8001fe0:	f67f ae90 	bls.w	8001d04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	3724      	adds	r7, #36	; 0x24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40013800 	.word	0x40013800
 8001ff8:	40020000 	.word	0x40020000
 8001ffc:	40020400 	.word	0x40020400
 8002000:	40020800 	.word	0x40020800
 8002004:	40020c00 	.word	0x40020c00
 8002008:	40021000 	.word	0x40021000
 800200c:	40021400 	.word	0x40021400
 8002010:	40021800 	.word	0x40021800
 8002014:	40021c00 	.word	0x40021c00
 8002018:	40013c00 	.word	0x40013c00

0800201c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691a      	ldr	r2, [r3, #16]
 800202c:	887b      	ldrh	r3, [r7, #2]
 800202e:	4013      	ands	r3, r2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d002      	beq.n	800203a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002034:	2301      	movs	r3, #1
 8002036:	73fb      	strb	r3, [r7, #15]
 8002038:	e001      	b.n	800203e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800203a:	2300      	movs	r3, #0
 800203c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800203e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	807b      	strh	r3, [r7, #2]
 8002058:	4613      	mov	r3, r2
 800205a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800205c:	787b      	ldrb	r3, [r7, #1]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002062:	887a      	ldrh	r2, [r7, #2]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002068:	e003      	b.n	8002072 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800206a:	887b      	ldrh	r3, [r7, #2]
 800206c:	041a      	lsls	r2, r3, #16
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	619a      	str	r2, [r3, #24]
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
	...

08002080 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e25b      	b.n	800254a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d075      	beq.n	800218a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800209e:	4ba3      	ldr	r3, [pc, #652]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 030c 	and.w	r3, r3, #12
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d00c      	beq.n	80020c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020aa:	4ba0      	ldr	r3, [pc, #640]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d112      	bne.n	80020dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020b6:	4b9d      	ldr	r3, [pc, #628]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020c2:	d10b      	bne.n	80020dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c4:	4b99      	ldr	r3, [pc, #612]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d05b      	beq.n	8002188 <HAL_RCC_OscConfig+0x108>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d157      	bne.n	8002188 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e236      	b.n	800254a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e4:	d106      	bne.n	80020f4 <HAL_RCC_OscConfig+0x74>
 80020e6:	4b91      	ldr	r3, [pc, #580]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a90      	ldr	r2, [pc, #576]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 80020ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	e01d      	b.n	8002130 <HAL_RCC_OscConfig+0xb0>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020fc:	d10c      	bne.n	8002118 <HAL_RCC_OscConfig+0x98>
 80020fe:	4b8b      	ldr	r3, [pc, #556]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a8a      	ldr	r2, [pc, #552]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 8002104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	4b88      	ldr	r3, [pc, #544]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a87      	ldr	r2, [pc, #540]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 8002110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	e00b      	b.n	8002130 <HAL_RCC_OscConfig+0xb0>
 8002118:	4b84      	ldr	r3, [pc, #528]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a83      	ldr	r2, [pc, #524]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 800211e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	4b81      	ldr	r3, [pc, #516]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a80      	ldr	r2, [pc, #512]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 800212a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800212e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d013      	beq.n	8002160 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002138:	f7ff f9a6 	bl	8001488 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002140:	f7ff f9a2 	bl	8001488 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b64      	cmp	r3, #100	; 0x64
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e1fb      	b.n	800254a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002152:	4b76      	ldr	r3, [pc, #472]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0f0      	beq.n	8002140 <HAL_RCC_OscConfig+0xc0>
 800215e:	e014      	b.n	800218a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002160:	f7ff f992 	bl	8001488 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002168:	f7ff f98e 	bl	8001488 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b64      	cmp	r3, #100	; 0x64
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e1e7      	b.n	800254a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800217a:	4b6c      	ldr	r3, [pc, #432]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f0      	bne.n	8002168 <HAL_RCC_OscConfig+0xe8>
 8002186:	e000      	b.n	800218a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d063      	beq.n	800225e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002196:	4b65      	ldr	r3, [pc, #404]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 030c 	and.w	r3, r3, #12
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00b      	beq.n	80021ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021a2:	4b62      	ldr	r3, [pc, #392]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d11c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ae:	4b5f      	ldr	r3, [pc, #380]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d116      	bne.n	80021e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ba:	4b5c      	ldr	r3, [pc, #368]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d005      	beq.n	80021d2 <HAL_RCC_OscConfig+0x152>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d001      	beq.n	80021d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e1bb      	b.n	800254a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d2:	4b56      	ldr	r3, [pc, #344]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4952      	ldr	r1, [pc, #328]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e6:	e03a      	b.n	800225e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d020      	beq.n	8002232 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f0:	4b4f      	ldr	r3, [pc, #316]	; (8002330 <HAL_RCC_OscConfig+0x2b0>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f6:	f7ff f947 	bl	8001488 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021fe:	f7ff f943 	bl	8001488 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e19c      	b.n	800254a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002210:	4b46      	ldr	r3, [pc, #280]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0f0      	beq.n	80021fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221c:	4b43      	ldr	r3, [pc, #268]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4940      	ldr	r1, [pc, #256]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 800222c:	4313      	orrs	r3, r2
 800222e:	600b      	str	r3, [r1, #0]
 8002230:	e015      	b.n	800225e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002232:	4b3f      	ldr	r3, [pc, #252]	; (8002330 <HAL_RCC_OscConfig+0x2b0>)
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002238:	f7ff f926 	bl	8001488 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002240:	f7ff f922 	bl	8001488 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e17b      	b.n	800254a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002252:	4b36      	ldr	r3, [pc, #216]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b00      	cmp	r3, #0
 8002268:	d030      	beq.n	80022cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d016      	beq.n	80022a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002272:	4b30      	ldr	r3, [pc, #192]	; (8002334 <HAL_RCC_OscConfig+0x2b4>)
 8002274:	2201      	movs	r2, #1
 8002276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002278:	f7ff f906 	bl	8001488 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002280:	f7ff f902 	bl	8001488 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e15b      	b.n	800254a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002292:	4b26      	ldr	r3, [pc, #152]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 8002294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0f0      	beq.n	8002280 <HAL_RCC_OscConfig+0x200>
 800229e:	e015      	b.n	80022cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022a0:	4b24      	ldr	r3, [pc, #144]	; (8002334 <HAL_RCC_OscConfig+0x2b4>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a6:	f7ff f8ef 	bl	8001488 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ae:	f7ff f8eb 	bl	8001488 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e144      	b.n	800254a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c0:	4b1a      	ldr	r3, [pc, #104]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 80022c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1f0      	bne.n	80022ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 80a0 	beq.w	800241a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022da:	2300      	movs	r3, #0
 80022dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022de:	4b13      	ldr	r3, [pc, #76]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10f      	bne.n	800230a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	4b0f      	ldr	r3, [pc, #60]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	4a0e      	ldr	r2, [pc, #56]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 80022f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f8:	6413      	str	r3, [r2, #64]	; 0x40
 80022fa:	4b0c      	ldr	r3, [pc, #48]	; (800232c <HAL_RCC_OscConfig+0x2ac>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002302:	60bb      	str	r3, [r7, #8]
 8002304:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002306:	2301      	movs	r3, #1
 8002308:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230a:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <HAL_RCC_OscConfig+0x2b8>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002312:	2b00      	cmp	r3, #0
 8002314:	d121      	bne.n	800235a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002316:	4b08      	ldr	r3, [pc, #32]	; (8002338 <HAL_RCC_OscConfig+0x2b8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a07      	ldr	r2, [pc, #28]	; (8002338 <HAL_RCC_OscConfig+0x2b8>)
 800231c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002320:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002322:	f7ff f8b1 	bl	8001488 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002328:	e011      	b.n	800234e <HAL_RCC_OscConfig+0x2ce>
 800232a:	bf00      	nop
 800232c:	40023800 	.word	0x40023800
 8002330:	42470000 	.word	0x42470000
 8002334:	42470e80 	.word	0x42470e80
 8002338:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800233c:	f7ff f8a4 	bl	8001488 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e0fd      	b.n	800254a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234e:	4b81      	ldr	r3, [pc, #516]	; (8002554 <HAL_RCC_OscConfig+0x4d4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0f0      	beq.n	800233c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d106      	bne.n	8002370 <HAL_RCC_OscConfig+0x2f0>
 8002362:	4b7d      	ldr	r3, [pc, #500]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 8002364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002366:	4a7c      	ldr	r2, [pc, #496]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	6713      	str	r3, [r2, #112]	; 0x70
 800236e:	e01c      	b.n	80023aa <HAL_RCC_OscConfig+0x32a>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b05      	cmp	r3, #5
 8002376:	d10c      	bne.n	8002392 <HAL_RCC_OscConfig+0x312>
 8002378:	4b77      	ldr	r3, [pc, #476]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 800237a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237c:	4a76      	ldr	r2, [pc, #472]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 800237e:	f043 0304 	orr.w	r3, r3, #4
 8002382:	6713      	str	r3, [r2, #112]	; 0x70
 8002384:	4b74      	ldr	r3, [pc, #464]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 8002386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002388:	4a73      	ldr	r2, [pc, #460]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	6713      	str	r3, [r2, #112]	; 0x70
 8002390:	e00b      	b.n	80023aa <HAL_RCC_OscConfig+0x32a>
 8002392:	4b71      	ldr	r3, [pc, #452]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 8002394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002396:	4a70      	ldr	r2, [pc, #448]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 8002398:	f023 0301 	bic.w	r3, r3, #1
 800239c:	6713      	str	r3, [r2, #112]	; 0x70
 800239e:	4b6e      	ldr	r3, [pc, #440]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 80023a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a2:	4a6d      	ldr	r2, [pc, #436]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 80023a4:	f023 0304 	bic.w	r3, r3, #4
 80023a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d015      	beq.n	80023de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b2:	f7ff f869 	bl	8001488 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b8:	e00a      	b.n	80023d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ba:	f7ff f865 	bl	8001488 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e0bc      	b.n	800254a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d0:	4b61      	ldr	r3, [pc, #388]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 80023d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0ee      	beq.n	80023ba <HAL_RCC_OscConfig+0x33a>
 80023dc:	e014      	b.n	8002408 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023de:	f7ff f853 	bl	8001488 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e4:	e00a      	b.n	80023fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e6:	f7ff f84f 	bl	8001488 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e0a6      	b.n	800254a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023fc:	4b56      	ldr	r3, [pc, #344]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 80023fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1ee      	bne.n	80023e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002408:	7dfb      	ldrb	r3, [r7, #23]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d105      	bne.n	800241a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800240e:	4b52      	ldr	r3, [pc, #328]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	4a51      	ldr	r2, [pc, #324]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 8002414:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002418:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 8092 	beq.w	8002548 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002424:	4b4c      	ldr	r3, [pc, #304]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 030c 	and.w	r3, r3, #12
 800242c:	2b08      	cmp	r3, #8
 800242e:	d05c      	beq.n	80024ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	2b02      	cmp	r3, #2
 8002436:	d141      	bne.n	80024bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002438:	4b48      	ldr	r3, [pc, #288]	; (800255c <HAL_RCC_OscConfig+0x4dc>)
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243e:	f7ff f823 	bl	8001488 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002446:	f7ff f81f 	bl	8001488 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e078      	b.n	800254a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002458:	4b3f      	ldr	r3, [pc, #252]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1f0      	bne.n	8002446 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69da      	ldr	r2, [r3, #28]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	431a      	orrs	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	019b      	lsls	r3, r3, #6
 8002474:	431a      	orrs	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247a:	085b      	lsrs	r3, r3, #1
 800247c:	3b01      	subs	r3, #1
 800247e:	041b      	lsls	r3, r3, #16
 8002480:	431a      	orrs	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002486:	061b      	lsls	r3, r3, #24
 8002488:	4933      	ldr	r1, [pc, #204]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 800248a:	4313      	orrs	r3, r2
 800248c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800248e:	4b33      	ldr	r3, [pc, #204]	; (800255c <HAL_RCC_OscConfig+0x4dc>)
 8002490:	2201      	movs	r2, #1
 8002492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002494:	f7fe fff8 	bl	8001488 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800249c:	f7fe fff4 	bl	8001488 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e04d      	b.n	800254a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ae:	4b2a      	ldr	r3, [pc, #168]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0f0      	beq.n	800249c <HAL_RCC_OscConfig+0x41c>
 80024ba:	e045      	b.n	8002548 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024bc:	4b27      	ldr	r3, [pc, #156]	; (800255c <HAL_RCC_OscConfig+0x4dc>)
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c2:	f7fe ffe1 	bl	8001488 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ca:	f7fe ffdd 	bl	8001488 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e036      	b.n	800254a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024dc:	4b1e      	ldr	r3, [pc, #120]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1f0      	bne.n	80024ca <HAL_RCC_OscConfig+0x44a>
 80024e8:	e02e      	b.n	8002548 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d101      	bne.n	80024f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e029      	b.n	800254a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024f6:	4b18      	ldr	r3, [pc, #96]	; (8002558 <HAL_RCC_OscConfig+0x4d8>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	429a      	cmp	r2, r3
 8002508:	d11c      	bne.n	8002544 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002514:	429a      	cmp	r2, r3
 8002516:	d115      	bne.n	8002544 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800251e:	4013      	ands	r3, r2
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002524:	4293      	cmp	r3, r2
 8002526:	d10d      	bne.n	8002544 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002532:	429a      	cmp	r2, r3
 8002534:	d106      	bne.n	8002544 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002540:	429a      	cmp	r2, r3
 8002542:	d001      	beq.n	8002548 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e000      	b.n	800254a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40007000 	.word	0x40007000
 8002558:	40023800 	.word	0x40023800
 800255c:	42470060 	.word	0x42470060

08002560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e0cc      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002574:	4b68      	ldr	r3, [pc, #416]	; (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d90c      	bls.n	800259c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002582:	4b65      	ldr	r3, [pc, #404]	; (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800258a:	4b63      	ldr	r3, [pc, #396]	; (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d001      	beq.n	800259c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e0b8      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d020      	beq.n	80025ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025b4:	4b59      	ldr	r3, [pc, #356]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	4a58      	ldr	r2, [pc, #352]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d005      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025cc:	4b53      	ldr	r3, [pc, #332]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	4a52      	ldr	r2, [pc, #328]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d8:	4b50      	ldr	r3, [pc, #320]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	494d      	ldr	r1, [pc, #308]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d044      	beq.n	8002680 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d107      	bne.n	800260e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fe:	4b47      	ldr	r3, [pc, #284]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d119      	bne.n	800263e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e07f      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d003      	beq.n	800261e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800261a:	2b03      	cmp	r3, #3
 800261c:	d107      	bne.n	800262e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261e:	4b3f      	ldr	r3, [pc, #252]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d109      	bne.n	800263e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e06f      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262e:	4b3b      	ldr	r3, [pc, #236]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e067      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800263e:	4b37      	ldr	r3, [pc, #220]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f023 0203 	bic.w	r2, r3, #3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	4934      	ldr	r1, [pc, #208]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 800264c:	4313      	orrs	r3, r2
 800264e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002650:	f7fe ff1a 	bl	8001488 <HAL_GetTick>
 8002654:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002656:	e00a      	b.n	800266e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002658:	f7fe ff16 	bl	8001488 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	f241 3288 	movw	r2, #5000	; 0x1388
 8002666:	4293      	cmp	r3, r2
 8002668:	d901      	bls.n	800266e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e04f      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266e:	4b2b      	ldr	r3, [pc, #172]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 020c 	and.w	r2, r3, #12
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	429a      	cmp	r2, r3
 800267e:	d1eb      	bne.n	8002658 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002680:	4b25      	ldr	r3, [pc, #148]	; (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 030f 	and.w	r3, r3, #15
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d20c      	bcs.n	80026a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268e:	4b22      	ldr	r3, [pc, #136]	; (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002696:	4b20      	ldr	r3, [pc, #128]	; (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d001      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e032      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d008      	beq.n	80026c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026b4:	4b19      	ldr	r3, [pc, #100]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	4916      	ldr	r1, [pc, #88]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d009      	beq.n	80026e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026d2:	4b12      	ldr	r3, [pc, #72]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	490e      	ldr	r1, [pc, #56]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026e6:	f000 f821 	bl	800272c <HAL_RCC_GetSysClockFreq>
 80026ea:	4601      	mov	r1, r0
 80026ec:	4b0b      	ldr	r3, [pc, #44]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	091b      	lsrs	r3, r3, #4
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	4a0a      	ldr	r2, [pc, #40]	; (8002720 <HAL_RCC_ClockConfig+0x1c0>)
 80026f8:	5cd3      	ldrb	r3, [r2, r3]
 80026fa:	fa21 f303 	lsr.w	r3, r1, r3
 80026fe:	4a09      	ldr	r2, [pc, #36]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002702:	4b09      	ldr	r3, [pc, #36]	; (8002728 <HAL_RCC_ClockConfig+0x1c8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7fe fe7a 	bl	8001400 <HAL_InitTick>

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40023c00 	.word	0x40023c00
 800271c:	40023800 	.word	0x40023800
 8002720:	0800347c 	.word	0x0800347c
 8002724:	20000000 	.word	0x20000000
 8002728:	20000004 	.word	0x20000004

0800272c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800272c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002732:	2300      	movs	r3, #0
 8002734:	607b      	str	r3, [r7, #4]
 8002736:	2300      	movs	r3, #0
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	2300      	movs	r3, #0
 800273c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800273e:	2300      	movs	r3, #0
 8002740:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002742:	4b63      	ldr	r3, [pc, #396]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 030c 	and.w	r3, r3, #12
 800274a:	2b04      	cmp	r3, #4
 800274c:	d007      	beq.n	800275e <HAL_RCC_GetSysClockFreq+0x32>
 800274e:	2b08      	cmp	r3, #8
 8002750:	d008      	beq.n	8002764 <HAL_RCC_GetSysClockFreq+0x38>
 8002752:	2b00      	cmp	r3, #0
 8002754:	f040 80b4 	bne.w	80028c0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002758:	4b5e      	ldr	r3, [pc, #376]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800275a:	60bb      	str	r3, [r7, #8]
       break;
 800275c:	e0b3      	b.n	80028c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800275e:	4b5e      	ldr	r3, [pc, #376]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002760:	60bb      	str	r3, [r7, #8]
      break;
 8002762:	e0b0      	b.n	80028c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002764:	4b5a      	ldr	r3, [pc, #360]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800276c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800276e:	4b58      	ldr	r3, [pc, #352]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d04a      	beq.n	8002810 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800277a:	4b55      	ldr	r3, [pc, #340]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	099b      	lsrs	r3, r3, #6
 8002780:	f04f 0400 	mov.w	r4, #0
 8002784:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	ea03 0501 	and.w	r5, r3, r1
 8002790:	ea04 0602 	and.w	r6, r4, r2
 8002794:	4629      	mov	r1, r5
 8002796:	4632      	mov	r2, r6
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	f04f 0400 	mov.w	r4, #0
 80027a0:	0154      	lsls	r4, r2, #5
 80027a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80027a6:	014b      	lsls	r3, r1, #5
 80027a8:	4619      	mov	r1, r3
 80027aa:	4622      	mov	r2, r4
 80027ac:	1b49      	subs	r1, r1, r5
 80027ae:	eb62 0206 	sbc.w	r2, r2, r6
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	f04f 0400 	mov.w	r4, #0
 80027ba:	0194      	lsls	r4, r2, #6
 80027bc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80027c0:	018b      	lsls	r3, r1, #6
 80027c2:	1a5b      	subs	r3, r3, r1
 80027c4:	eb64 0402 	sbc.w	r4, r4, r2
 80027c8:	f04f 0100 	mov.w	r1, #0
 80027cc:	f04f 0200 	mov.w	r2, #0
 80027d0:	00e2      	lsls	r2, r4, #3
 80027d2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80027d6:	00d9      	lsls	r1, r3, #3
 80027d8:	460b      	mov	r3, r1
 80027da:	4614      	mov	r4, r2
 80027dc:	195b      	adds	r3, r3, r5
 80027de:	eb44 0406 	adc.w	r4, r4, r6
 80027e2:	f04f 0100 	mov.w	r1, #0
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	0262      	lsls	r2, r4, #9
 80027ec:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80027f0:	0259      	lsls	r1, r3, #9
 80027f2:	460b      	mov	r3, r1
 80027f4:	4614      	mov	r4, r2
 80027f6:	4618      	mov	r0, r3
 80027f8:	4621      	mov	r1, r4
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f04f 0400 	mov.w	r4, #0
 8002800:	461a      	mov	r2, r3
 8002802:	4623      	mov	r3, r4
 8002804:	f7fd fce0 	bl	80001c8 <__aeabi_uldivmod>
 8002808:	4603      	mov	r3, r0
 800280a:	460c      	mov	r4, r1
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	e049      	b.n	80028a4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002810:	4b2f      	ldr	r3, [pc, #188]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	099b      	lsrs	r3, r3, #6
 8002816:	f04f 0400 	mov.w	r4, #0
 800281a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	ea03 0501 	and.w	r5, r3, r1
 8002826:	ea04 0602 	and.w	r6, r4, r2
 800282a:	4629      	mov	r1, r5
 800282c:	4632      	mov	r2, r6
 800282e:	f04f 0300 	mov.w	r3, #0
 8002832:	f04f 0400 	mov.w	r4, #0
 8002836:	0154      	lsls	r4, r2, #5
 8002838:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800283c:	014b      	lsls	r3, r1, #5
 800283e:	4619      	mov	r1, r3
 8002840:	4622      	mov	r2, r4
 8002842:	1b49      	subs	r1, r1, r5
 8002844:	eb62 0206 	sbc.w	r2, r2, r6
 8002848:	f04f 0300 	mov.w	r3, #0
 800284c:	f04f 0400 	mov.w	r4, #0
 8002850:	0194      	lsls	r4, r2, #6
 8002852:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002856:	018b      	lsls	r3, r1, #6
 8002858:	1a5b      	subs	r3, r3, r1
 800285a:	eb64 0402 	sbc.w	r4, r4, r2
 800285e:	f04f 0100 	mov.w	r1, #0
 8002862:	f04f 0200 	mov.w	r2, #0
 8002866:	00e2      	lsls	r2, r4, #3
 8002868:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800286c:	00d9      	lsls	r1, r3, #3
 800286e:	460b      	mov	r3, r1
 8002870:	4614      	mov	r4, r2
 8002872:	195b      	adds	r3, r3, r5
 8002874:	eb44 0406 	adc.w	r4, r4, r6
 8002878:	f04f 0100 	mov.w	r1, #0
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	02a2      	lsls	r2, r4, #10
 8002882:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002886:	0299      	lsls	r1, r3, #10
 8002888:	460b      	mov	r3, r1
 800288a:	4614      	mov	r4, r2
 800288c:	4618      	mov	r0, r3
 800288e:	4621      	mov	r1, r4
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f04f 0400 	mov.w	r4, #0
 8002896:	461a      	mov	r2, r3
 8002898:	4623      	mov	r3, r4
 800289a:	f7fd fc95 	bl	80001c8 <__aeabi_uldivmod>
 800289e:	4603      	mov	r3, r0
 80028a0:	460c      	mov	r4, r1
 80028a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028a4:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	0c1b      	lsrs	r3, r3, #16
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	3301      	adds	r3, #1
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028bc:	60bb      	str	r3, [r7, #8]
      break;
 80028be:	e002      	b.n	80028c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028c0:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80028c2:	60bb      	str	r3, [r7, #8]
      break;
 80028c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028c6:	68bb      	ldr	r3, [r7, #8]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028d0:	40023800 	.word	0x40023800
 80028d4:	00f42400 	.word	0x00f42400
 80028d8:	007a1200 	.word	0x007a1200

080028dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028e0:	4b03      	ldr	r3, [pc, #12]	; (80028f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028e2:	681b      	ldr	r3, [r3, #0]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	20000000 	.word	0x20000000

080028f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028f8:	f7ff fff0 	bl	80028dc <HAL_RCC_GetHCLKFreq>
 80028fc:	4601      	mov	r1, r0
 80028fe:	4b05      	ldr	r3, [pc, #20]	; (8002914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	0a9b      	lsrs	r3, r3, #10
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	4a03      	ldr	r2, [pc, #12]	; (8002918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800290a:	5cd3      	ldrb	r3, [r2, r3]
 800290c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002910:	4618      	mov	r0, r3
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40023800 	.word	0x40023800
 8002918:	0800348c 	.word	0x0800348c

0800291c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002920:	f7ff ffdc 	bl	80028dc <HAL_RCC_GetHCLKFreq>
 8002924:	4601      	mov	r1, r0
 8002926:	4b05      	ldr	r3, [pc, #20]	; (800293c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	0b5b      	lsrs	r3, r3, #13
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	4a03      	ldr	r2, [pc, #12]	; (8002940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002932:	5cd3      	ldrb	r3, [r2, r3]
 8002934:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002938:	4618      	mov	r0, r3
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40023800 	.word	0x40023800
 8002940:	0800348c 	.word	0x0800348c

08002944 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e03f      	b.n	80029d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d106      	bne.n	8002970 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7fe fc70 	bl	8001250 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2224      	movs	r2, #36	; 0x24
 8002974:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002986:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f9b1 	bl	8002cf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800299c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	695a      	ldr	r2, [r3, #20]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68da      	ldr	r2, [r3, #12]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2220      	movs	r2, #32
 80029d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b088      	sub	sp, #32
 80029e2:	af02      	add	r7, sp, #8
 80029e4:	60f8      	str	r0, [r7, #12]
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	603b      	str	r3, [r7, #0]
 80029ea:	4613      	mov	r3, r2
 80029ec:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b20      	cmp	r3, #32
 80029fc:	f040 8083 	bne.w	8002b06 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d002      	beq.n	8002a0c <HAL_UART_Transmit+0x2e>
 8002a06:	88fb      	ldrh	r3, [r7, #6]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e07b      	b.n	8002b08 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d101      	bne.n	8002a1e <HAL_UART_Transmit+0x40>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e074      	b.n	8002b08 <HAL_UART_Transmit+0x12a>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2221      	movs	r2, #33	; 0x21
 8002a30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002a34:	f7fe fd28 	bl	8001488 <HAL_GetTick>
 8002a38:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	88fa      	ldrh	r2, [r7, #6]
 8002a3e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	88fa      	ldrh	r2, [r7, #6]
 8002a44:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002a4e:	e042      	b.n	8002ad6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	3b01      	subs	r3, #1
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a66:	d122      	bne.n	8002aae <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2180      	movs	r1, #128	; 0x80
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 f8f2 	bl	8002c5c <UART_WaitOnFlagUntilTimeout>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e042      	b.n	8002b08 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	881b      	ldrh	r3, [r3, #0]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a94:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d103      	bne.n	8002aa6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	3302      	adds	r3, #2
 8002aa2:	60bb      	str	r3, [r7, #8]
 8002aa4:	e017      	b.n	8002ad6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	60bb      	str	r3, [r7, #8]
 8002aac:	e013      	b.n	8002ad6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	2180      	movs	r1, #128	; 0x80
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 f8cf 	bl	8002c5c <UART_WaitOnFlagUntilTimeout>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e01f      	b.n	8002b08 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	60ba      	str	r2, [r7, #8]
 8002ace:	781a      	ldrb	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1b7      	bne.n	8002a50 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	2140      	movs	r1, #64	; 0x40
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 f8b6 	bl	8002c5c <UART_WaitOnFlagUntilTimeout>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e006      	b.n	8002b08 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2220      	movs	r2, #32
 8002afe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	e000      	b.n	8002b08 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002b06:	2302      	movs	r3, #2
  }
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3718      	adds	r7, #24
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b088      	sub	sp, #32
 8002b14:	af02      	add	r7, sp, #8
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	603b      	str	r3, [r7, #0]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b20      	cmp	r3, #32
 8002b2e:	f040 8090 	bne.w	8002c52 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d002      	beq.n	8002b3e <HAL_UART_Receive+0x2e>
 8002b38:	88fb      	ldrh	r3, [r7, #6]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e088      	b.n	8002c54 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d101      	bne.n	8002b50 <HAL_UART_Receive+0x40>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	e081      	b.n	8002c54 <HAL_UART_Receive+0x144>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2222      	movs	r2, #34	; 0x22
 8002b62:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002b66:	f7fe fc8f 	bl	8001488 <HAL_GetTick>
 8002b6a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	88fa      	ldrh	r2, [r7, #6]
 8002b70:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	88fa      	ldrh	r2, [r7, #6]
 8002b76:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002b80:	e05c      	b.n	8002c3c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b98:	d12b      	bne.n	8002bf2 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2120      	movs	r1, #32
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 f859 	bl	8002c5c <UART_WaitOnFlagUntilTimeout>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e04f      	b.n	8002c54 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10c      	bne.n	8002bda <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	3302      	adds	r3, #2
 8002bd6:	60bb      	str	r3, [r7, #8]
 8002bd8:	e030      	b.n	8002c3c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	3301      	adds	r3, #1
 8002bee:	60bb      	str	r3, [r7, #8]
 8002bf0:	e024      	b.n	8002c3c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	2120      	movs	r1, #32
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f000 f82d 	bl	8002c5c <UART_WaitOnFlagUntilTimeout>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e023      	b.n	8002c54 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d108      	bne.n	8002c26 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6859      	ldr	r1, [r3, #4]
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	1c5a      	adds	r2, r3, #1
 8002c1e:	60ba      	str	r2, [r7, #8]
 8002c20:	b2ca      	uxtb	r2, r1
 8002c22:	701a      	strb	r2, [r3, #0]
 8002c24:	e00a      	b.n	8002c3c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	1c59      	adds	r1, r3, #1
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d19d      	bne.n	8002b82 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	e000      	b.n	8002c54 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8002c52:	2302      	movs	r3, #2
  }
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3718      	adds	r7, #24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	603b      	str	r3, [r7, #0]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c6c:	e02c      	b.n	8002cc8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c74:	d028      	beq.n	8002cc8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d007      	beq.n	8002c8c <UART_WaitOnFlagUntilTimeout+0x30>
 8002c7c:	f7fe fc04 	bl	8001488 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d21d      	bcs.n	8002cc8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c9a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695a      	ldr	r2, [r3, #20]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0201 	bic.w	r2, r2, #1
 8002caa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e00f      	b.n	8002ce8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	bf0c      	ite	eq
 8002cd8:	2301      	moveq	r3, #1
 8002cda:	2300      	movne	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	461a      	mov	r2, r3
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d0c3      	beq.n	8002c6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cf4:	b085      	sub	sp, #20
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002d32:	f023 030c 	bic.w	r3, r3, #12
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	68f9      	ldr	r1, [r7, #12]
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699a      	ldr	r2, [r3, #24]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d5e:	f040 818b 	bne.w	8003078 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4ac1      	ldr	r2, [pc, #772]	; (800306c <UART_SetConfig+0x37c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d005      	beq.n	8002d78 <UART_SetConfig+0x88>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4abf      	ldr	r2, [pc, #764]	; (8003070 <UART_SetConfig+0x380>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	f040 80bd 	bne.w	8002ef2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d78:	f7ff fdd0 	bl	800291c <HAL_RCC_GetPCLK2Freq>
 8002d7c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	461d      	mov	r5, r3
 8002d82:	f04f 0600 	mov.w	r6, #0
 8002d86:	46a8      	mov	r8, r5
 8002d88:	46b1      	mov	r9, r6
 8002d8a:	eb18 0308 	adds.w	r3, r8, r8
 8002d8e:	eb49 0409 	adc.w	r4, r9, r9
 8002d92:	4698      	mov	r8, r3
 8002d94:	46a1      	mov	r9, r4
 8002d96:	eb18 0805 	adds.w	r8, r8, r5
 8002d9a:	eb49 0906 	adc.w	r9, r9, r6
 8002d9e:	f04f 0100 	mov.w	r1, #0
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002daa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002dae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002db2:	4688      	mov	r8, r1
 8002db4:	4691      	mov	r9, r2
 8002db6:	eb18 0005 	adds.w	r0, r8, r5
 8002dba:	eb49 0106 	adc.w	r1, r9, r6
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	461d      	mov	r5, r3
 8002dc4:	f04f 0600 	mov.w	r6, #0
 8002dc8:	196b      	adds	r3, r5, r5
 8002dca:	eb46 0406 	adc.w	r4, r6, r6
 8002dce:	461a      	mov	r2, r3
 8002dd0:	4623      	mov	r3, r4
 8002dd2:	f7fd f9f9 	bl	80001c8 <__aeabi_uldivmod>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	460c      	mov	r4, r1
 8002dda:	461a      	mov	r2, r3
 8002ddc:	4ba5      	ldr	r3, [pc, #660]	; (8003074 <UART_SetConfig+0x384>)
 8002dde:	fba3 2302 	umull	r2, r3, r3, r2
 8002de2:	095b      	lsrs	r3, r3, #5
 8002de4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	461d      	mov	r5, r3
 8002dec:	f04f 0600 	mov.w	r6, #0
 8002df0:	46a9      	mov	r9, r5
 8002df2:	46b2      	mov	sl, r6
 8002df4:	eb19 0309 	adds.w	r3, r9, r9
 8002df8:	eb4a 040a 	adc.w	r4, sl, sl
 8002dfc:	4699      	mov	r9, r3
 8002dfe:	46a2      	mov	sl, r4
 8002e00:	eb19 0905 	adds.w	r9, r9, r5
 8002e04:	eb4a 0a06 	adc.w	sl, sl, r6
 8002e08:	f04f 0100 	mov.w	r1, #0
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e1c:	4689      	mov	r9, r1
 8002e1e:	4692      	mov	sl, r2
 8002e20:	eb19 0005 	adds.w	r0, r9, r5
 8002e24:	eb4a 0106 	adc.w	r1, sl, r6
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	461d      	mov	r5, r3
 8002e2e:	f04f 0600 	mov.w	r6, #0
 8002e32:	196b      	adds	r3, r5, r5
 8002e34:	eb46 0406 	adc.w	r4, r6, r6
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4623      	mov	r3, r4
 8002e3c:	f7fd f9c4 	bl	80001c8 <__aeabi_uldivmod>
 8002e40:	4603      	mov	r3, r0
 8002e42:	460c      	mov	r4, r1
 8002e44:	461a      	mov	r2, r3
 8002e46:	4b8b      	ldr	r3, [pc, #556]	; (8003074 <UART_SetConfig+0x384>)
 8002e48:	fba3 1302 	umull	r1, r3, r3, r2
 8002e4c:	095b      	lsrs	r3, r3, #5
 8002e4e:	2164      	movs	r1, #100	; 0x64
 8002e50:	fb01 f303 	mul.w	r3, r1, r3
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	3332      	adds	r3, #50	; 0x32
 8002e5a:	4a86      	ldr	r2, [pc, #536]	; (8003074 <UART_SetConfig+0x384>)
 8002e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e60:	095b      	lsrs	r3, r3, #5
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e68:	4498      	add	r8, r3
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	461d      	mov	r5, r3
 8002e6e:	f04f 0600 	mov.w	r6, #0
 8002e72:	46a9      	mov	r9, r5
 8002e74:	46b2      	mov	sl, r6
 8002e76:	eb19 0309 	adds.w	r3, r9, r9
 8002e7a:	eb4a 040a 	adc.w	r4, sl, sl
 8002e7e:	4699      	mov	r9, r3
 8002e80:	46a2      	mov	sl, r4
 8002e82:	eb19 0905 	adds.w	r9, r9, r5
 8002e86:	eb4a 0a06 	adc.w	sl, sl, r6
 8002e8a:	f04f 0100 	mov.w	r1, #0
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e96:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e9a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e9e:	4689      	mov	r9, r1
 8002ea0:	4692      	mov	sl, r2
 8002ea2:	eb19 0005 	adds.w	r0, r9, r5
 8002ea6:	eb4a 0106 	adc.w	r1, sl, r6
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	461d      	mov	r5, r3
 8002eb0:	f04f 0600 	mov.w	r6, #0
 8002eb4:	196b      	adds	r3, r5, r5
 8002eb6:	eb46 0406 	adc.w	r4, r6, r6
 8002eba:	461a      	mov	r2, r3
 8002ebc:	4623      	mov	r3, r4
 8002ebe:	f7fd f983 	bl	80001c8 <__aeabi_uldivmod>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	460c      	mov	r4, r1
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	4b6a      	ldr	r3, [pc, #424]	; (8003074 <UART_SetConfig+0x384>)
 8002eca:	fba3 1302 	umull	r1, r3, r3, r2
 8002ece:	095b      	lsrs	r3, r3, #5
 8002ed0:	2164      	movs	r1, #100	; 0x64
 8002ed2:	fb01 f303 	mul.w	r3, r1, r3
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	3332      	adds	r3, #50	; 0x32
 8002edc:	4a65      	ldr	r2, [pc, #404]	; (8003074 <UART_SetConfig+0x384>)
 8002ede:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	f003 0207 	and.w	r2, r3, #7
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4442      	add	r2, r8
 8002eee:	609a      	str	r2, [r3, #8]
 8002ef0:	e26f      	b.n	80033d2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ef2:	f7ff fcff 	bl	80028f4 <HAL_RCC_GetPCLK1Freq>
 8002ef6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	461d      	mov	r5, r3
 8002efc:	f04f 0600 	mov.w	r6, #0
 8002f00:	46a8      	mov	r8, r5
 8002f02:	46b1      	mov	r9, r6
 8002f04:	eb18 0308 	adds.w	r3, r8, r8
 8002f08:	eb49 0409 	adc.w	r4, r9, r9
 8002f0c:	4698      	mov	r8, r3
 8002f0e:	46a1      	mov	r9, r4
 8002f10:	eb18 0805 	adds.w	r8, r8, r5
 8002f14:	eb49 0906 	adc.w	r9, r9, r6
 8002f18:	f04f 0100 	mov.w	r1, #0
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f24:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f28:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f2c:	4688      	mov	r8, r1
 8002f2e:	4691      	mov	r9, r2
 8002f30:	eb18 0005 	adds.w	r0, r8, r5
 8002f34:	eb49 0106 	adc.w	r1, r9, r6
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	461d      	mov	r5, r3
 8002f3e:	f04f 0600 	mov.w	r6, #0
 8002f42:	196b      	adds	r3, r5, r5
 8002f44:	eb46 0406 	adc.w	r4, r6, r6
 8002f48:	461a      	mov	r2, r3
 8002f4a:	4623      	mov	r3, r4
 8002f4c:	f7fd f93c 	bl	80001c8 <__aeabi_uldivmod>
 8002f50:	4603      	mov	r3, r0
 8002f52:	460c      	mov	r4, r1
 8002f54:	461a      	mov	r2, r3
 8002f56:	4b47      	ldr	r3, [pc, #284]	; (8003074 <UART_SetConfig+0x384>)
 8002f58:	fba3 2302 	umull	r2, r3, r3, r2
 8002f5c:	095b      	lsrs	r3, r3, #5
 8002f5e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	461d      	mov	r5, r3
 8002f66:	f04f 0600 	mov.w	r6, #0
 8002f6a:	46a9      	mov	r9, r5
 8002f6c:	46b2      	mov	sl, r6
 8002f6e:	eb19 0309 	adds.w	r3, r9, r9
 8002f72:	eb4a 040a 	adc.w	r4, sl, sl
 8002f76:	4699      	mov	r9, r3
 8002f78:	46a2      	mov	sl, r4
 8002f7a:	eb19 0905 	adds.w	r9, r9, r5
 8002f7e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f82:	f04f 0100 	mov.w	r1, #0
 8002f86:	f04f 0200 	mov.w	r2, #0
 8002f8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f8e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f92:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f96:	4689      	mov	r9, r1
 8002f98:	4692      	mov	sl, r2
 8002f9a:	eb19 0005 	adds.w	r0, r9, r5
 8002f9e:	eb4a 0106 	adc.w	r1, sl, r6
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	461d      	mov	r5, r3
 8002fa8:	f04f 0600 	mov.w	r6, #0
 8002fac:	196b      	adds	r3, r5, r5
 8002fae:	eb46 0406 	adc.w	r4, r6, r6
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	4623      	mov	r3, r4
 8002fb6:	f7fd f907 	bl	80001c8 <__aeabi_uldivmod>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	460c      	mov	r4, r1
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	4b2c      	ldr	r3, [pc, #176]	; (8003074 <UART_SetConfig+0x384>)
 8002fc2:	fba3 1302 	umull	r1, r3, r3, r2
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	2164      	movs	r1, #100	; 0x64
 8002fca:	fb01 f303 	mul.w	r3, r1, r3
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	3332      	adds	r3, #50	; 0x32
 8002fd4:	4a27      	ldr	r2, [pc, #156]	; (8003074 <UART_SetConfig+0x384>)
 8002fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fda:	095b      	lsrs	r3, r3, #5
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fe2:	4498      	add	r8, r3
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	461d      	mov	r5, r3
 8002fe8:	f04f 0600 	mov.w	r6, #0
 8002fec:	46a9      	mov	r9, r5
 8002fee:	46b2      	mov	sl, r6
 8002ff0:	eb19 0309 	adds.w	r3, r9, r9
 8002ff4:	eb4a 040a 	adc.w	r4, sl, sl
 8002ff8:	4699      	mov	r9, r3
 8002ffa:	46a2      	mov	sl, r4
 8002ffc:	eb19 0905 	adds.w	r9, r9, r5
 8003000:	eb4a 0a06 	adc.w	sl, sl, r6
 8003004:	f04f 0100 	mov.w	r1, #0
 8003008:	f04f 0200 	mov.w	r2, #0
 800300c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003010:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003014:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003018:	4689      	mov	r9, r1
 800301a:	4692      	mov	sl, r2
 800301c:	eb19 0005 	adds.w	r0, r9, r5
 8003020:	eb4a 0106 	adc.w	r1, sl, r6
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	461d      	mov	r5, r3
 800302a:	f04f 0600 	mov.w	r6, #0
 800302e:	196b      	adds	r3, r5, r5
 8003030:	eb46 0406 	adc.w	r4, r6, r6
 8003034:	461a      	mov	r2, r3
 8003036:	4623      	mov	r3, r4
 8003038:	f7fd f8c6 	bl	80001c8 <__aeabi_uldivmod>
 800303c:	4603      	mov	r3, r0
 800303e:	460c      	mov	r4, r1
 8003040:	461a      	mov	r2, r3
 8003042:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <UART_SetConfig+0x384>)
 8003044:	fba3 1302 	umull	r1, r3, r3, r2
 8003048:	095b      	lsrs	r3, r3, #5
 800304a:	2164      	movs	r1, #100	; 0x64
 800304c:	fb01 f303 	mul.w	r3, r1, r3
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	3332      	adds	r3, #50	; 0x32
 8003056:	4a07      	ldr	r2, [pc, #28]	; (8003074 <UART_SetConfig+0x384>)
 8003058:	fba2 2303 	umull	r2, r3, r2, r3
 800305c:	095b      	lsrs	r3, r3, #5
 800305e:	f003 0207 	and.w	r2, r3, #7
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4442      	add	r2, r8
 8003068:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800306a:	e1b2      	b.n	80033d2 <UART_SetConfig+0x6e2>
 800306c:	40011000 	.word	0x40011000
 8003070:	40011400 	.word	0x40011400
 8003074:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4ad7      	ldr	r2, [pc, #860]	; (80033dc <UART_SetConfig+0x6ec>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d005      	beq.n	800308e <UART_SetConfig+0x39e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4ad6      	ldr	r2, [pc, #856]	; (80033e0 <UART_SetConfig+0x6f0>)
 8003088:	4293      	cmp	r3, r2
 800308a:	f040 80d1 	bne.w	8003230 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800308e:	f7ff fc45 	bl	800291c <HAL_RCC_GetPCLK2Freq>
 8003092:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	469a      	mov	sl, r3
 8003098:	f04f 0b00 	mov.w	fp, #0
 800309c:	46d0      	mov	r8, sl
 800309e:	46d9      	mov	r9, fp
 80030a0:	eb18 0308 	adds.w	r3, r8, r8
 80030a4:	eb49 0409 	adc.w	r4, r9, r9
 80030a8:	4698      	mov	r8, r3
 80030aa:	46a1      	mov	r9, r4
 80030ac:	eb18 080a 	adds.w	r8, r8, sl
 80030b0:	eb49 090b 	adc.w	r9, r9, fp
 80030b4:	f04f 0100 	mov.w	r1, #0
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80030c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80030c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80030c8:	4688      	mov	r8, r1
 80030ca:	4691      	mov	r9, r2
 80030cc:	eb1a 0508 	adds.w	r5, sl, r8
 80030d0:	eb4b 0609 	adc.w	r6, fp, r9
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	4619      	mov	r1, r3
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	f04f 0300 	mov.w	r3, #0
 80030e2:	f04f 0400 	mov.w	r4, #0
 80030e6:	0094      	lsls	r4, r2, #2
 80030e8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80030ec:	008b      	lsls	r3, r1, #2
 80030ee:	461a      	mov	r2, r3
 80030f0:	4623      	mov	r3, r4
 80030f2:	4628      	mov	r0, r5
 80030f4:	4631      	mov	r1, r6
 80030f6:	f7fd f867 	bl	80001c8 <__aeabi_uldivmod>
 80030fa:	4603      	mov	r3, r0
 80030fc:	460c      	mov	r4, r1
 80030fe:	461a      	mov	r2, r3
 8003100:	4bb8      	ldr	r3, [pc, #736]	; (80033e4 <UART_SetConfig+0x6f4>)
 8003102:	fba3 2302 	umull	r2, r3, r3, r2
 8003106:	095b      	lsrs	r3, r3, #5
 8003108:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	469b      	mov	fp, r3
 8003110:	f04f 0c00 	mov.w	ip, #0
 8003114:	46d9      	mov	r9, fp
 8003116:	46e2      	mov	sl, ip
 8003118:	eb19 0309 	adds.w	r3, r9, r9
 800311c:	eb4a 040a 	adc.w	r4, sl, sl
 8003120:	4699      	mov	r9, r3
 8003122:	46a2      	mov	sl, r4
 8003124:	eb19 090b 	adds.w	r9, r9, fp
 8003128:	eb4a 0a0c 	adc.w	sl, sl, ip
 800312c:	f04f 0100 	mov.w	r1, #0
 8003130:	f04f 0200 	mov.w	r2, #0
 8003134:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003138:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800313c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003140:	4689      	mov	r9, r1
 8003142:	4692      	mov	sl, r2
 8003144:	eb1b 0509 	adds.w	r5, fp, r9
 8003148:	eb4c 060a 	adc.w	r6, ip, sl
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	4619      	mov	r1, r3
 8003152:	f04f 0200 	mov.w	r2, #0
 8003156:	f04f 0300 	mov.w	r3, #0
 800315a:	f04f 0400 	mov.w	r4, #0
 800315e:	0094      	lsls	r4, r2, #2
 8003160:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003164:	008b      	lsls	r3, r1, #2
 8003166:	461a      	mov	r2, r3
 8003168:	4623      	mov	r3, r4
 800316a:	4628      	mov	r0, r5
 800316c:	4631      	mov	r1, r6
 800316e:	f7fd f82b 	bl	80001c8 <__aeabi_uldivmod>
 8003172:	4603      	mov	r3, r0
 8003174:	460c      	mov	r4, r1
 8003176:	461a      	mov	r2, r3
 8003178:	4b9a      	ldr	r3, [pc, #616]	; (80033e4 <UART_SetConfig+0x6f4>)
 800317a:	fba3 1302 	umull	r1, r3, r3, r2
 800317e:	095b      	lsrs	r3, r3, #5
 8003180:	2164      	movs	r1, #100	; 0x64
 8003182:	fb01 f303 	mul.w	r3, r1, r3
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	3332      	adds	r3, #50	; 0x32
 800318c:	4a95      	ldr	r2, [pc, #596]	; (80033e4 <UART_SetConfig+0x6f4>)
 800318e:	fba2 2303 	umull	r2, r3, r2, r3
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003198:	4498      	add	r8, r3
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	469b      	mov	fp, r3
 800319e:	f04f 0c00 	mov.w	ip, #0
 80031a2:	46d9      	mov	r9, fp
 80031a4:	46e2      	mov	sl, ip
 80031a6:	eb19 0309 	adds.w	r3, r9, r9
 80031aa:	eb4a 040a 	adc.w	r4, sl, sl
 80031ae:	4699      	mov	r9, r3
 80031b0:	46a2      	mov	sl, r4
 80031b2:	eb19 090b 	adds.w	r9, r9, fp
 80031b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80031ba:	f04f 0100 	mov.w	r1, #0
 80031be:	f04f 0200 	mov.w	r2, #0
 80031c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031ce:	4689      	mov	r9, r1
 80031d0:	4692      	mov	sl, r2
 80031d2:	eb1b 0509 	adds.w	r5, fp, r9
 80031d6:	eb4c 060a 	adc.w	r6, ip, sl
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	4619      	mov	r1, r3
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	f04f 0400 	mov.w	r4, #0
 80031ec:	0094      	lsls	r4, r2, #2
 80031ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031f2:	008b      	lsls	r3, r1, #2
 80031f4:	461a      	mov	r2, r3
 80031f6:	4623      	mov	r3, r4
 80031f8:	4628      	mov	r0, r5
 80031fa:	4631      	mov	r1, r6
 80031fc:	f7fc ffe4 	bl	80001c8 <__aeabi_uldivmod>
 8003200:	4603      	mov	r3, r0
 8003202:	460c      	mov	r4, r1
 8003204:	461a      	mov	r2, r3
 8003206:	4b77      	ldr	r3, [pc, #476]	; (80033e4 <UART_SetConfig+0x6f4>)
 8003208:	fba3 1302 	umull	r1, r3, r3, r2
 800320c:	095b      	lsrs	r3, r3, #5
 800320e:	2164      	movs	r1, #100	; 0x64
 8003210:	fb01 f303 	mul.w	r3, r1, r3
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	3332      	adds	r3, #50	; 0x32
 800321a:	4a72      	ldr	r2, [pc, #456]	; (80033e4 <UART_SetConfig+0x6f4>)
 800321c:	fba2 2303 	umull	r2, r3, r2, r3
 8003220:	095b      	lsrs	r3, r3, #5
 8003222:	f003 020f 	and.w	r2, r3, #15
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4442      	add	r2, r8
 800322c:	609a      	str	r2, [r3, #8]
 800322e:	e0d0      	b.n	80033d2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003230:	f7ff fb60 	bl	80028f4 <HAL_RCC_GetPCLK1Freq>
 8003234:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	469a      	mov	sl, r3
 800323a:	f04f 0b00 	mov.w	fp, #0
 800323e:	46d0      	mov	r8, sl
 8003240:	46d9      	mov	r9, fp
 8003242:	eb18 0308 	adds.w	r3, r8, r8
 8003246:	eb49 0409 	adc.w	r4, r9, r9
 800324a:	4698      	mov	r8, r3
 800324c:	46a1      	mov	r9, r4
 800324e:	eb18 080a 	adds.w	r8, r8, sl
 8003252:	eb49 090b 	adc.w	r9, r9, fp
 8003256:	f04f 0100 	mov.w	r1, #0
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003262:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003266:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800326a:	4688      	mov	r8, r1
 800326c:	4691      	mov	r9, r2
 800326e:	eb1a 0508 	adds.w	r5, sl, r8
 8003272:	eb4b 0609 	adc.w	r6, fp, r9
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	4619      	mov	r1, r3
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	f04f 0400 	mov.w	r4, #0
 8003288:	0094      	lsls	r4, r2, #2
 800328a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800328e:	008b      	lsls	r3, r1, #2
 8003290:	461a      	mov	r2, r3
 8003292:	4623      	mov	r3, r4
 8003294:	4628      	mov	r0, r5
 8003296:	4631      	mov	r1, r6
 8003298:	f7fc ff96 	bl	80001c8 <__aeabi_uldivmod>
 800329c:	4603      	mov	r3, r0
 800329e:	460c      	mov	r4, r1
 80032a0:	461a      	mov	r2, r3
 80032a2:	4b50      	ldr	r3, [pc, #320]	; (80033e4 <UART_SetConfig+0x6f4>)
 80032a4:	fba3 2302 	umull	r2, r3, r3, r2
 80032a8:	095b      	lsrs	r3, r3, #5
 80032aa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	469b      	mov	fp, r3
 80032b2:	f04f 0c00 	mov.w	ip, #0
 80032b6:	46d9      	mov	r9, fp
 80032b8:	46e2      	mov	sl, ip
 80032ba:	eb19 0309 	adds.w	r3, r9, r9
 80032be:	eb4a 040a 	adc.w	r4, sl, sl
 80032c2:	4699      	mov	r9, r3
 80032c4:	46a2      	mov	sl, r4
 80032c6:	eb19 090b 	adds.w	r9, r9, fp
 80032ca:	eb4a 0a0c 	adc.w	sl, sl, ip
 80032ce:	f04f 0100 	mov.w	r1, #0
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032e2:	4689      	mov	r9, r1
 80032e4:	4692      	mov	sl, r2
 80032e6:	eb1b 0509 	adds.w	r5, fp, r9
 80032ea:	eb4c 060a 	adc.w	r6, ip, sl
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	4619      	mov	r1, r3
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	f04f 0400 	mov.w	r4, #0
 8003300:	0094      	lsls	r4, r2, #2
 8003302:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003306:	008b      	lsls	r3, r1, #2
 8003308:	461a      	mov	r2, r3
 800330a:	4623      	mov	r3, r4
 800330c:	4628      	mov	r0, r5
 800330e:	4631      	mov	r1, r6
 8003310:	f7fc ff5a 	bl	80001c8 <__aeabi_uldivmod>
 8003314:	4603      	mov	r3, r0
 8003316:	460c      	mov	r4, r1
 8003318:	461a      	mov	r2, r3
 800331a:	4b32      	ldr	r3, [pc, #200]	; (80033e4 <UART_SetConfig+0x6f4>)
 800331c:	fba3 1302 	umull	r1, r3, r3, r2
 8003320:	095b      	lsrs	r3, r3, #5
 8003322:	2164      	movs	r1, #100	; 0x64
 8003324:	fb01 f303 	mul.w	r3, r1, r3
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	3332      	adds	r3, #50	; 0x32
 800332e:	4a2d      	ldr	r2, [pc, #180]	; (80033e4 <UART_SetConfig+0x6f4>)
 8003330:	fba2 2303 	umull	r2, r3, r2, r3
 8003334:	095b      	lsrs	r3, r3, #5
 8003336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800333a:	4498      	add	r8, r3
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	469b      	mov	fp, r3
 8003340:	f04f 0c00 	mov.w	ip, #0
 8003344:	46d9      	mov	r9, fp
 8003346:	46e2      	mov	sl, ip
 8003348:	eb19 0309 	adds.w	r3, r9, r9
 800334c:	eb4a 040a 	adc.w	r4, sl, sl
 8003350:	4699      	mov	r9, r3
 8003352:	46a2      	mov	sl, r4
 8003354:	eb19 090b 	adds.w	r9, r9, fp
 8003358:	eb4a 0a0c 	adc.w	sl, sl, ip
 800335c:	f04f 0100 	mov.w	r1, #0
 8003360:	f04f 0200 	mov.w	r2, #0
 8003364:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003368:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800336c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003370:	4689      	mov	r9, r1
 8003372:	4692      	mov	sl, r2
 8003374:	eb1b 0509 	adds.w	r5, fp, r9
 8003378:	eb4c 060a 	adc.w	r6, ip, sl
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	4619      	mov	r1, r3
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	f04f 0400 	mov.w	r4, #0
 800338e:	0094      	lsls	r4, r2, #2
 8003390:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003394:	008b      	lsls	r3, r1, #2
 8003396:	461a      	mov	r2, r3
 8003398:	4623      	mov	r3, r4
 800339a:	4628      	mov	r0, r5
 800339c:	4631      	mov	r1, r6
 800339e:	f7fc ff13 	bl	80001c8 <__aeabi_uldivmod>
 80033a2:	4603      	mov	r3, r0
 80033a4:	460c      	mov	r4, r1
 80033a6:	461a      	mov	r2, r3
 80033a8:	4b0e      	ldr	r3, [pc, #56]	; (80033e4 <UART_SetConfig+0x6f4>)
 80033aa:	fba3 1302 	umull	r1, r3, r3, r2
 80033ae:	095b      	lsrs	r3, r3, #5
 80033b0:	2164      	movs	r1, #100	; 0x64
 80033b2:	fb01 f303 	mul.w	r3, r1, r3
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	3332      	adds	r3, #50	; 0x32
 80033bc:	4a09      	ldr	r2, [pc, #36]	; (80033e4 <UART_SetConfig+0x6f4>)
 80033be:	fba2 2303 	umull	r2, r3, r2, r3
 80033c2:	095b      	lsrs	r3, r3, #5
 80033c4:	f003 020f 	and.w	r2, r3, #15
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4442      	add	r2, r8
 80033ce:	609a      	str	r2, [r3, #8]
}
 80033d0:	e7ff      	b.n	80033d2 <UART_SetConfig+0x6e2>
 80033d2:	bf00      	nop
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033dc:	40011000 	.word	0x40011000
 80033e0:	40011400 	.word	0x40011400
 80033e4:	51eb851f 	.word	0x51eb851f

080033e8 <__libc_init_array>:
 80033e8:	b570      	push	{r4, r5, r6, lr}
 80033ea:	4e0d      	ldr	r6, [pc, #52]	; (8003420 <__libc_init_array+0x38>)
 80033ec:	4c0d      	ldr	r4, [pc, #52]	; (8003424 <__libc_init_array+0x3c>)
 80033ee:	1ba4      	subs	r4, r4, r6
 80033f0:	10a4      	asrs	r4, r4, #2
 80033f2:	2500      	movs	r5, #0
 80033f4:	42a5      	cmp	r5, r4
 80033f6:	d109      	bne.n	800340c <__libc_init_array+0x24>
 80033f8:	4e0b      	ldr	r6, [pc, #44]	; (8003428 <__libc_init_array+0x40>)
 80033fa:	4c0c      	ldr	r4, [pc, #48]	; (800342c <__libc_init_array+0x44>)
 80033fc:	f000 f820 	bl	8003440 <_init>
 8003400:	1ba4      	subs	r4, r4, r6
 8003402:	10a4      	asrs	r4, r4, #2
 8003404:	2500      	movs	r5, #0
 8003406:	42a5      	cmp	r5, r4
 8003408:	d105      	bne.n	8003416 <__libc_init_array+0x2e>
 800340a:	bd70      	pop	{r4, r5, r6, pc}
 800340c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003410:	4798      	blx	r3
 8003412:	3501      	adds	r5, #1
 8003414:	e7ee      	b.n	80033f4 <__libc_init_array+0xc>
 8003416:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800341a:	4798      	blx	r3
 800341c:	3501      	adds	r5, #1
 800341e:	e7f2      	b.n	8003406 <__libc_init_array+0x1e>
 8003420:	0800349c 	.word	0x0800349c
 8003424:	0800349c 	.word	0x0800349c
 8003428:	0800349c 	.word	0x0800349c
 800342c:	080034a0 	.word	0x080034a0

08003430 <memset>:
 8003430:	4402      	add	r2, r0
 8003432:	4603      	mov	r3, r0
 8003434:	4293      	cmp	r3, r2
 8003436:	d100      	bne.n	800343a <memset+0xa>
 8003438:	4770      	bx	lr
 800343a:	f803 1b01 	strb.w	r1, [r3], #1
 800343e:	e7f9      	b.n	8003434 <memset+0x4>

08003440 <_init>:
 8003440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003442:	bf00      	nop
 8003444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003446:	bc08      	pop	{r3}
 8003448:	469e      	mov	lr, r3
 800344a:	4770      	bx	lr

0800344c <_fini>:
 800344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344e:	bf00      	nop
 8003450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003452:	bc08      	pop	{r3}
 8003454:	469e      	mov	lr, r3
 8003456:	4770      	bx	lr
